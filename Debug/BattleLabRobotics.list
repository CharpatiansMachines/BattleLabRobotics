
BattleLabRobotics.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bb8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08004d40  08004d40  00014d40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d50  08004d50  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004d50  08004d50  00014d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d58  08004d58  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d58  08004d58  00014d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d5c  08004d5c  00014d5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004d60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000530  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000053c  2000053c  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000acf2  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001de4  00000000  00000000  0002ad2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000988  00000000  00000000  0002cb18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000008a0  00000000  00000000  0002d4a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020721  00000000  00000000  0002dd40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000afbc  00000000  00000000  0004e461  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c36d8  00000000  00000000  0005941d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011caf5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002668  00000000  00000000  0011cb48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004d28 	.word	0x08004d28

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004d28 	.word	0x08004d28

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0

  HAL_Init();
 80004d0:	f000 f98a 	bl	80007e8 <HAL_Init>
  SystemClock_Config();
 80004d4:	f000 f804 	bl	80004e0 <SystemClock_Config>
  MX_GPIO_Init();
 80004d8:	f000 f86c 	bl	80005b4 <MX_GPIO_Init>

  while (1)
 80004dc:	e7fe      	b.n	80004dc <main+0x10>
	...

080004e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b094      	sub	sp, #80	; 0x50
 80004e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004e6:	f107 0320 	add.w	r3, r7, #32
 80004ea:	2230      	movs	r2, #48	; 0x30
 80004ec:	2100      	movs	r1, #0
 80004ee:	4618      	mov	r0, r3
 80004f0:	f004 fc12 	bl	8004d18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004f4:	f107 030c 	add.w	r3, r7, #12
 80004f8:	2200      	movs	r2, #0
 80004fa:	601a      	str	r2, [r3, #0]
 80004fc:	605a      	str	r2, [r3, #4]
 80004fe:	609a      	str	r2, [r3, #8]
 8000500:	60da      	str	r2, [r3, #12]
 8000502:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000504:	2300      	movs	r3, #0
 8000506:	60bb      	str	r3, [r7, #8]
 8000508:	4b28      	ldr	r3, [pc, #160]	; (80005ac <SystemClock_Config+0xcc>)
 800050a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800050c:	4a27      	ldr	r2, [pc, #156]	; (80005ac <SystemClock_Config+0xcc>)
 800050e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000512:	6413      	str	r3, [r2, #64]	; 0x40
 8000514:	4b25      	ldr	r3, [pc, #148]	; (80005ac <SystemClock_Config+0xcc>)
 8000516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000518:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800051c:	60bb      	str	r3, [r7, #8]
 800051e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000520:	2300      	movs	r3, #0
 8000522:	607b      	str	r3, [r7, #4]
 8000524:	4b22      	ldr	r3, [pc, #136]	; (80005b0 <SystemClock_Config+0xd0>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a21      	ldr	r2, [pc, #132]	; (80005b0 <SystemClock_Config+0xd0>)
 800052a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800052e:	6013      	str	r3, [r2, #0]
 8000530:	4b1f      	ldr	r3, [pc, #124]	; (80005b0 <SystemClock_Config+0xd0>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000538:	607b      	str	r3, [r7, #4]
 800053a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800053c:	2301      	movs	r3, #1
 800053e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000540:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000544:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000546:	2302      	movs	r3, #2
 8000548:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800054a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800054e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000550:	2308      	movs	r3, #8
 8000552:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000554:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000558:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800055a:	2302      	movs	r3, #2
 800055c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800055e:	2307      	movs	r3, #7
 8000560:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000562:	f107 0320 	add.w	r3, r7, #32
 8000566:	4618      	mov	r0, r3
 8000568:	f001 fb08 	bl	8001b7c <HAL_RCC_OscConfig>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000572:	f000 f89b 	bl	80006ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000576:	230f      	movs	r3, #15
 8000578:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800057a:	2302      	movs	r3, #2
 800057c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800057e:	2300      	movs	r3, #0
 8000580:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000582:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000586:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000588:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800058c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800058e:	f107 030c 	add.w	r3, r7, #12
 8000592:	2105      	movs	r1, #5
 8000594:	4618      	mov	r0, r3
 8000596:	f001 fd69 	bl	800206c <HAL_RCC_ClockConfig>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005a0:	f000 f884 	bl	80006ac <Error_Handler>
  }
}
 80005a4:	bf00      	nop
 80005a6:	3750      	adds	r7, #80	; 0x50
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	40023800 	.word	0x40023800
 80005b0:	40007000 	.word	0x40007000

080005b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b089      	sub	sp, #36	; 0x24
 80005b8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ba:	2300      	movs	r3, #0
 80005bc:	61fb      	str	r3, [r7, #28]
 80005be:	4b3a      	ldr	r3, [pc, #232]	; (80006a8 <MX_GPIO_Init+0xf4>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	4a39      	ldr	r2, [pc, #228]	; (80006a8 <MX_GPIO_Init+0xf4>)
 80005c4:	f043 0301 	orr.w	r3, r3, #1
 80005c8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ca:	4b37      	ldr	r3, [pc, #220]	; (80006a8 <MX_GPIO_Init+0xf4>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	f003 0301 	and.w	r3, r3, #1
 80005d2:	61fb      	str	r3, [r7, #28]
 80005d4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005d6:	2300      	movs	r3, #0
 80005d8:	61bb      	str	r3, [r7, #24]
 80005da:	4b33      	ldr	r3, [pc, #204]	; (80006a8 <MX_GPIO_Init+0xf4>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	4a32      	ldr	r2, [pc, #200]	; (80006a8 <MX_GPIO_Init+0xf4>)
 80005e0:	f043 0302 	orr.w	r3, r3, #2
 80005e4:	6313      	str	r3, [r2, #48]	; 0x30
 80005e6:	4b30      	ldr	r3, [pc, #192]	; (80006a8 <MX_GPIO_Init+0xf4>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	f003 0302 	and.w	r3, r3, #2
 80005ee:	61bb      	str	r3, [r7, #24]
 80005f0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005f2:	2300      	movs	r3, #0
 80005f4:	617b      	str	r3, [r7, #20]
 80005f6:	4b2c      	ldr	r3, [pc, #176]	; (80006a8 <MX_GPIO_Init+0xf4>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	4a2b      	ldr	r2, [pc, #172]	; (80006a8 <MX_GPIO_Init+0xf4>)
 80005fc:	f043 0304 	orr.w	r3, r3, #4
 8000600:	6313      	str	r3, [r2, #48]	; 0x30
 8000602:	4b29      	ldr	r3, [pc, #164]	; (80006a8 <MX_GPIO_Init+0xf4>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	f003 0304 	and.w	r3, r3, #4
 800060a:	617b      	str	r3, [r7, #20]
 800060c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800060e:	2300      	movs	r3, #0
 8000610:	613b      	str	r3, [r7, #16]
 8000612:	4b25      	ldr	r3, [pc, #148]	; (80006a8 <MX_GPIO_Init+0xf4>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	4a24      	ldr	r2, [pc, #144]	; (80006a8 <MX_GPIO_Init+0xf4>)
 8000618:	f043 0308 	orr.w	r3, r3, #8
 800061c:	6313      	str	r3, [r2, #48]	; 0x30
 800061e:	4b22      	ldr	r3, [pc, #136]	; (80006a8 <MX_GPIO_Init+0xf4>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	f003 0308 	and.w	r3, r3, #8
 8000626:	613b      	str	r3, [r7, #16]
 8000628:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800062a:	2300      	movs	r3, #0
 800062c:	60fb      	str	r3, [r7, #12]
 800062e:	4b1e      	ldr	r3, [pc, #120]	; (80006a8 <MX_GPIO_Init+0xf4>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	4a1d      	ldr	r2, [pc, #116]	; (80006a8 <MX_GPIO_Init+0xf4>)
 8000634:	f043 0310 	orr.w	r3, r3, #16
 8000638:	6313      	str	r3, [r2, #48]	; 0x30
 800063a:	4b1b      	ldr	r3, [pc, #108]	; (80006a8 <MX_GPIO_Init+0xf4>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	f003 0310 	and.w	r3, r3, #16
 8000642:	60fb      	str	r3, [r7, #12]
 8000644:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000646:	2300      	movs	r3, #0
 8000648:	60bb      	str	r3, [r7, #8]
 800064a:	4b17      	ldr	r3, [pc, #92]	; (80006a8 <MX_GPIO_Init+0xf4>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	4a16      	ldr	r2, [pc, #88]	; (80006a8 <MX_GPIO_Init+0xf4>)
 8000650:	f043 0320 	orr.w	r3, r3, #32
 8000654:	6313      	str	r3, [r2, #48]	; 0x30
 8000656:	4b14      	ldr	r3, [pc, #80]	; (80006a8 <MX_GPIO_Init+0xf4>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	f003 0320 	and.w	r3, r3, #32
 800065e:	60bb      	str	r3, [r7, #8]
 8000660:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000662:	2300      	movs	r3, #0
 8000664:	607b      	str	r3, [r7, #4]
 8000666:	4b10      	ldr	r3, [pc, #64]	; (80006a8 <MX_GPIO_Init+0xf4>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	4a0f      	ldr	r2, [pc, #60]	; (80006a8 <MX_GPIO_Init+0xf4>)
 800066c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000670:	6313      	str	r3, [r2, #48]	; 0x30
 8000672:	4b0d      	ldr	r3, [pc, #52]	; (80006a8 <MX_GPIO_Init+0xf4>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800067e:	2300      	movs	r3, #0
 8000680:	603b      	str	r3, [r7, #0]
 8000682:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <MX_GPIO_Init+0xf4>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	4a08      	ldr	r2, [pc, #32]	; (80006a8 <MX_GPIO_Init+0xf4>)
 8000688:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800068c:	6313      	str	r3, [r2, #48]	; 0x30
 800068e:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <MX_GPIO_Init+0xf4>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000696:	603b      	str	r3, [r7, #0]
 8000698:	683b      	ldr	r3, [r7, #0]

}
 800069a:	bf00      	nop
 800069c:	3724      	adds	r7, #36	; 0x24
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	40023800 	.word	0x40023800

080006ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006b0:	b672      	cpsid	i
}
 80006b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006b4:	e7fe      	b.n	80006b4 <Error_Handler+0x8>
	...

080006b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006be:	2300      	movs	r3, #0
 80006c0:	607b      	str	r3, [r7, #4]
 80006c2:	4b10      	ldr	r3, [pc, #64]	; (8000704 <HAL_MspInit+0x4c>)
 80006c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006c6:	4a0f      	ldr	r2, [pc, #60]	; (8000704 <HAL_MspInit+0x4c>)
 80006c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006cc:	6453      	str	r3, [r2, #68]	; 0x44
 80006ce:	4b0d      	ldr	r3, [pc, #52]	; (8000704 <HAL_MspInit+0x4c>)
 80006d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006da:	2300      	movs	r3, #0
 80006dc:	603b      	str	r3, [r7, #0]
 80006de:	4b09      	ldr	r3, [pc, #36]	; (8000704 <HAL_MspInit+0x4c>)
 80006e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e2:	4a08      	ldr	r2, [pc, #32]	; (8000704 <HAL_MspInit+0x4c>)
 80006e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e8:	6413      	str	r3, [r2, #64]	; 0x40
 80006ea:	4b06      	ldr	r3, [pc, #24]	; (8000704 <HAL_MspInit+0x4c>)
 80006ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f2:	603b      	str	r3, [r7, #0]
 80006f4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80006f6:	2007      	movs	r0, #7
 80006f8:	f000 f99a 	bl	8000a30 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006fc:	bf00      	nop
 80006fe:	3708      	adds	r7, #8
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	40023800 	.word	0x40023800

08000708 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800070c:	e7fe      	b.n	800070c <NMI_Handler+0x4>

0800070e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800070e:	b480      	push	{r7}
 8000710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000712:	e7fe      	b.n	8000712 <HardFault_Handler+0x4>

08000714 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000718:	e7fe      	b.n	8000718 <MemManage_Handler+0x4>

0800071a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800071a:	b480      	push	{r7}
 800071c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800071e:	e7fe      	b.n	800071e <BusFault_Handler+0x4>

08000720 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000724:	e7fe      	b.n	8000724 <UsageFault_Handler+0x4>

08000726 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000726:	b480      	push	{r7}
 8000728:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800072a:	bf00      	nop
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr

08000734 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000738:	bf00      	nop
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr

08000742 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000742:	b480      	push	{r7}
 8000744:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000746:	bf00      	nop
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr

08000750 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000754:	f000 f89a 	bl	800088c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000758:	bf00      	nop
 800075a:	bd80      	pop	{r7, pc}

0800075c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000760:	4802      	ldr	r0, [pc, #8]	; (800076c <OTG_FS_IRQHandler+0x10>)
 8000762:	f000 f998 	bl	8000a96 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	20000030 	.word	0x20000030

08000770 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000774:	4b06      	ldr	r3, [pc, #24]	; (8000790 <SystemInit+0x20>)
 8000776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800077a:	4a05      	ldr	r2, [pc, #20]	; (8000790 <SystemInit+0x20>)
 800077c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000780:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000784:	bf00      	nop
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	e000ed00 	.word	0xe000ed00

08000794 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000794:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007cc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000798:	480d      	ldr	r0, [pc, #52]	; (80007d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800079a:	490e      	ldr	r1, [pc, #56]	; (80007d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800079c:	4a0e      	ldr	r2, [pc, #56]	; (80007d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800079e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007a0:	e002      	b.n	80007a8 <LoopCopyDataInit>

080007a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007a6:	3304      	adds	r3, #4

080007a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007ac:	d3f9      	bcc.n	80007a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007ae:	4a0b      	ldr	r2, [pc, #44]	; (80007dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80007b0:	4c0b      	ldr	r4, [pc, #44]	; (80007e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80007b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007b4:	e001      	b.n	80007ba <LoopFillZerobss>

080007b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007b8:	3204      	adds	r2, #4

080007ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007bc:	d3fb      	bcc.n	80007b6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80007be:	f7ff ffd7 	bl	8000770 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007c2:	f004 fa85 	bl	8004cd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007c6:	f7ff fe81 	bl	80004cc <main>
  bx  lr    
 80007ca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80007cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80007d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007d4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007d8:	08004d60 	.word	0x08004d60
  ldr r2, =_sbss
 80007dc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007e0:	2000053c 	.word	0x2000053c

080007e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007e4:	e7fe      	b.n	80007e4 <ADC_IRQHandler>
	...

080007e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80007ec:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <HAL_Init+0x40>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a0d      	ldr	r2, [pc, #52]	; (8000828 <HAL_Init+0x40>)
 80007f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80007f8:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <HAL_Init+0x40>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a0a      	ldr	r2, [pc, #40]	; (8000828 <HAL_Init+0x40>)
 80007fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000802:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000804:	4b08      	ldr	r3, [pc, #32]	; (8000828 <HAL_Init+0x40>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a07      	ldr	r2, [pc, #28]	; (8000828 <HAL_Init+0x40>)
 800080a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800080e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000810:	2003      	movs	r0, #3
 8000812:	f000 f90d 	bl	8000a30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000816:	2000      	movs	r0, #0
 8000818:	f000 f808 	bl	800082c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800081c:	f7ff ff4c 	bl	80006b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000820:	2300      	movs	r3, #0
}
 8000822:	4618      	mov	r0, r3
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40023c00 	.word	0x40023c00

0800082c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000834:	4b12      	ldr	r3, [pc, #72]	; (8000880 <HAL_InitTick+0x54>)
 8000836:	681a      	ldr	r2, [r3, #0]
 8000838:	4b12      	ldr	r3, [pc, #72]	; (8000884 <HAL_InitTick+0x58>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	4619      	mov	r1, r3
 800083e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000842:	fbb3 f3f1 	udiv	r3, r3, r1
 8000846:	fbb2 f3f3 	udiv	r3, r2, r3
 800084a:	4618      	mov	r0, r3
 800084c:	f000 f917 	bl	8000a7e <HAL_SYSTICK_Config>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000856:	2301      	movs	r3, #1
 8000858:	e00e      	b.n	8000878 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	2b0f      	cmp	r3, #15
 800085e:	d80a      	bhi.n	8000876 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000860:	2200      	movs	r2, #0
 8000862:	6879      	ldr	r1, [r7, #4]
 8000864:	f04f 30ff 	mov.w	r0, #4294967295
 8000868:	f000 f8ed 	bl	8000a46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800086c:	4a06      	ldr	r2, [pc, #24]	; (8000888 <HAL_InitTick+0x5c>)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000872:	2300      	movs	r3, #0
 8000874:	e000      	b.n	8000878 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000876:	2301      	movs	r3, #1
}
 8000878:	4618      	mov	r0, r3
 800087a:	3708      	adds	r7, #8
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	20000000 	.word	0x20000000
 8000884:	20000008 	.word	0x20000008
 8000888:	20000004 	.word	0x20000004

0800088c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000890:	4b06      	ldr	r3, [pc, #24]	; (80008ac <HAL_IncTick+0x20>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	461a      	mov	r2, r3
 8000896:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <HAL_IncTick+0x24>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4413      	add	r3, r2
 800089c:	4a04      	ldr	r2, [pc, #16]	; (80008b0 <HAL_IncTick+0x24>)
 800089e:	6013      	str	r3, [r2, #0]
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	20000008 	.word	0x20000008
 80008b0:	20000028 	.word	0x20000028

080008b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  return uwTick;
 80008b8:	4b03      	ldr	r3, [pc, #12]	; (80008c8 <HAL_GetTick+0x14>)
 80008ba:	681b      	ldr	r3, [r3, #0]
}
 80008bc:	4618      	mov	r0, r3
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	20000028 	.word	0x20000028

080008cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b085      	sub	sp, #20
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	f003 0307 	and.w	r3, r3, #7
 80008da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008dc:	4b0c      	ldr	r3, [pc, #48]	; (8000910 <__NVIC_SetPriorityGrouping+0x44>)
 80008de:	68db      	ldr	r3, [r3, #12]
 80008e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008e2:	68ba      	ldr	r2, [r7, #8]
 80008e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008e8:	4013      	ands	r3, r2
 80008ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008f0:	68bb      	ldr	r3, [r7, #8]
 80008f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008fe:	4a04      	ldr	r2, [pc, #16]	; (8000910 <__NVIC_SetPriorityGrouping+0x44>)
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	60d3      	str	r3, [r2, #12]
}
 8000904:	bf00      	nop
 8000906:	3714      	adds	r7, #20
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr
 8000910:	e000ed00 	.word	0xe000ed00

08000914 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000918:	4b04      	ldr	r3, [pc, #16]	; (800092c <__NVIC_GetPriorityGrouping+0x18>)
 800091a:	68db      	ldr	r3, [r3, #12]
 800091c:	0a1b      	lsrs	r3, r3, #8
 800091e:	f003 0307 	and.w	r3, r3, #7
}
 8000922:	4618      	mov	r0, r3
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr
 800092c:	e000ed00 	.word	0xe000ed00

08000930 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	4603      	mov	r3, r0
 8000938:	6039      	str	r1, [r7, #0]
 800093a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800093c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000940:	2b00      	cmp	r3, #0
 8000942:	db0a      	blt.n	800095a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	b2da      	uxtb	r2, r3
 8000948:	490c      	ldr	r1, [pc, #48]	; (800097c <__NVIC_SetPriority+0x4c>)
 800094a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800094e:	0112      	lsls	r2, r2, #4
 8000950:	b2d2      	uxtb	r2, r2
 8000952:	440b      	add	r3, r1
 8000954:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000958:	e00a      	b.n	8000970 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	b2da      	uxtb	r2, r3
 800095e:	4908      	ldr	r1, [pc, #32]	; (8000980 <__NVIC_SetPriority+0x50>)
 8000960:	79fb      	ldrb	r3, [r7, #7]
 8000962:	f003 030f 	and.w	r3, r3, #15
 8000966:	3b04      	subs	r3, #4
 8000968:	0112      	lsls	r2, r2, #4
 800096a:	b2d2      	uxtb	r2, r2
 800096c:	440b      	add	r3, r1
 800096e:	761a      	strb	r2, [r3, #24]
}
 8000970:	bf00      	nop
 8000972:	370c      	adds	r7, #12
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr
 800097c:	e000e100 	.word	0xe000e100
 8000980:	e000ed00 	.word	0xe000ed00

08000984 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000984:	b480      	push	{r7}
 8000986:	b089      	sub	sp, #36	; 0x24
 8000988:	af00      	add	r7, sp, #0
 800098a:	60f8      	str	r0, [r7, #12]
 800098c:	60b9      	str	r1, [r7, #8]
 800098e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	f003 0307 	and.w	r3, r3, #7
 8000996:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000998:	69fb      	ldr	r3, [r7, #28]
 800099a:	f1c3 0307 	rsb	r3, r3, #7
 800099e:	2b04      	cmp	r3, #4
 80009a0:	bf28      	it	cs
 80009a2:	2304      	movcs	r3, #4
 80009a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009a6:	69fb      	ldr	r3, [r7, #28]
 80009a8:	3304      	adds	r3, #4
 80009aa:	2b06      	cmp	r3, #6
 80009ac:	d902      	bls.n	80009b4 <NVIC_EncodePriority+0x30>
 80009ae:	69fb      	ldr	r3, [r7, #28]
 80009b0:	3b03      	subs	r3, #3
 80009b2:	e000      	b.n	80009b6 <NVIC_EncodePriority+0x32>
 80009b4:	2300      	movs	r3, #0
 80009b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009b8:	f04f 32ff 	mov.w	r2, #4294967295
 80009bc:	69bb      	ldr	r3, [r7, #24]
 80009be:	fa02 f303 	lsl.w	r3, r2, r3
 80009c2:	43da      	mvns	r2, r3
 80009c4:	68bb      	ldr	r3, [r7, #8]
 80009c6:	401a      	ands	r2, r3
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009cc:	f04f 31ff 	mov.w	r1, #4294967295
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	fa01 f303 	lsl.w	r3, r1, r3
 80009d6:	43d9      	mvns	r1, r3
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009dc:	4313      	orrs	r3, r2
         );
}
 80009de:	4618      	mov	r0, r3
 80009e0:	3724      	adds	r7, #36	; 0x24
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
	...

080009ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	3b01      	subs	r3, #1
 80009f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009fc:	d301      	bcc.n	8000a02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009fe:	2301      	movs	r3, #1
 8000a00:	e00f      	b.n	8000a22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a02:	4a0a      	ldr	r2, [pc, #40]	; (8000a2c <SysTick_Config+0x40>)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	3b01      	subs	r3, #1
 8000a08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a0a:	210f      	movs	r1, #15
 8000a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a10:	f7ff ff8e 	bl	8000930 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a14:	4b05      	ldr	r3, [pc, #20]	; (8000a2c <SysTick_Config+0x40>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a1a:	4b04      	ldr	r3, [pc, #16]	; (8000a2c <SysTick_Config+0x40>)
 8000a1c:	2207      	movs	r2, #7
 8000a1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a20:	2300      	movs	r3, #0
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	e000e010 	.word	0xe000e010

08000a30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a38:	6878      	ldr	r0, [r7, #4]
 8000a3a:	f7ff ff47 	bl	80008cc <__NVIC_SetPriorityGrouping>
}
 8000a3e:	bf00      	nop
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}

08000a46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a46:	b580      	push	{r7, lr}
 8000a48:	b086      	sub	sp, #24
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	60b9      	str	r1, [r7, #8]
 8000a50:	607a      	str	r2, [r7, #4]
 8000a52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a54:	2300      	movs	r3, #0
 8000a56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a58:	f7ff ff5c 	bl	8000914 <__NVIC_GetPriorityGrouping>
 8000a5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a5e:	687a      	ldr	r2, [r7, #4]
 8000a60:	68b9      	ldr	r1, [r7, #8]
 8000a62:	6978      	ldr	r0, [r7, #20]
 8000a64:	f7ff ff8e 	bl	8000984 <NVIC_EncodePriority>
 8000a68:	4602      	mov	r2, r0
 8000a6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a6e:	4611      	mov	r1, r2
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff ff5d 	bl	8000930 <__NVIC_SetPriority>
}
 8000a76:	bf00      	nop
 8000a78:	3718      	adds	r7, #24
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}

08000a7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a7e:	b580      	push	{r7, lr}
 8000a80:	b082      	sub	sp, #8
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a86:	6878      	ldr	r0, [r7, #4]
 8000a88:	f7ff ffb0 	bl	80009ec <SysTick_Config>
 8000a8c:	4603      	mov	r3, r0
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}

08000a96 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000a96:	b590      	push	{r4, r7, lr}
 8000a98:	b08d      	sub	sp, #52	; 0x34
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8000aa4:	6a3b      	ldr	r3, [r7, #32]
 8000aa6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4618      	mov	r0, r3
 8000aae:	f002 fcc4 	bl	800343a <USB_GetMode>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	f040 848a 	bne.w	80013ce <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f002 fc28 	bl	8003314 <USB_ReadInterrupts>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	f000 8480 	beq.w	80013cc <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8000acc:	69fb      	ldr	r3, [r7, #28]
 8000ace:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000ad2:	689b      	ldr	r3, [r3, #8]
 8000ad4:	0a1b      	lsrs	r3, r3, #8
 8000ad6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f002 fc15 	bl	8003314 <USB_ReadInterrupts>
 8000aea:	4603      	mov	r3, r0
 8000aec:	f003 0302 	and.w	r3, r3, #2
 8000af0:	2b02      	cmp	r3, #2
 8000af2:	d107      	bne.n	8000b04 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	695a      	ldr	r2, [r3, #20]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	f002 0202 	and.w	r2, r2, #2
 8000b02:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f002 fc03 	bl	8003314 <USB_ReadInterrupts>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	f003 0310 	and.w	r3, r3, #16
 8000b14:	2b10      	cmp	r3, #16
 8000b16:	d161      	bne.n	8000bdc <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	699a      	ldr	r2, [r3, #24]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	f022 0210 	bic.w	r2, r2, #16
 8000b26:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8000b28:	6a3b      	ldr	r3, [r7, #32]
 8000b2a:	6a1b      	ldr	r3, [r3, #32]
 8000b2c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8000b2e:	69bb      	ldr	r3, [r7, #24]
 8000b30:	f003 020f 	and.w	r2, r3, #15
 8000b34:	4613      	mov	r3, r2
 8000b36:	00db      	lsls	r3, r3, #3
 8000b38:	4413      	add	r3, r2
 8000b3a:	009b      	lsls	r3, r3, #2
 8000b3c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8000b40:	687a      	ldr	r2, [r7, #4]
 8000b42:	4413      	add	r3, r2
 8000b44:	3304      	adds	r3, #4
 8000b46:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8000b48:	69bb      	ldr	r3, [r7, #24]
 8000b4a:	0c5b      	lsrs	r3, r3, #17
 8000b4c:	f003 030f 	and.w	r3, r3, #15
 8000b50:	2b02      	cmp	r3, #2
 8000b52:	d124      	bne.n	8000b9e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8000b54:	69ba      	ldr	r2, [r7, #24]
 8000b56:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8000b5a:	4013      	ands	r3, r2
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d035      	beq.n	8000bcc <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8000b64:	69bb      	ldr	r3, [r7, #24]
 8000b66:	091b      	lsrs	r3, r3, #4
 8000b68:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8000b6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000b6e:	b29b      	uxth	r3, r3
 8000b70:	461a      	mov	r2, r3
 8000b72:	6a38      	ldr	r0, [r7, #32]
 8000b74:	f002 fa7c 	bl	8003070 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	691a      	ldr	r2, [r3, #16]
 8000b7c:	69bb      	ldr	r3, [r7, #24]
 8000b7e:	091b      	lsrs	r3, r3, #4
 8000b80:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000b84:	441a      	add	r2, r3
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	6a1a      	ldr	r2, [r3, #32]
 8000b8e:	69bb      	ldr	r3, [r7, #24]
 8000b90:	091b      	lsrs	r3, r3, #4
 8000b92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000b96:	441a      	add	r2, r3
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	621a      	str	r2, [r3, #32]
 8000b9c:	e016      	b.n	8000bcc <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8000b9e:	69bb      	ldr	r3, [r7, #24]
 8000ba0:	0c5b      	lsrs	r3, r3, #17
 8000ba2:	f003 030f 	and.w	r3, r3, #15
 8000ba6:	2b06      	cmp	r3, #6
 8000ba8:	d110      	bne.n	8000bcc <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8000bb0:	2208      	movs	r2, #8
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	6a38      	ldr	r0, [r7, #32]
 8000bb6:	f002 fa5b 	bl	8003070 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	6a1a      	ldr	r2, [r3, #32]
 8000bbe:	69bb      	ldr	r3, [r7, #24]
 8000bc0:	091b      	lsrs	r3, r3, #4
 8000bc2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000bc6:	441a      	add	r2, r3
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	699a      	ldr	r2, [r3, #24]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	f042 0210 	orr.w	r2, r2, #16
 8000bda:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4618      	mov	r0, r3
 8000be2:	f002 fb97 	bl	8003314 <USB_ReadInterrupts>
 8000be6:	4603      	mov	r3, r0
 8000be8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000bec:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8000bf0:	f040 80a7 	bne.w	8000d42 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f002 fb9c 	bl	800333a <USB_ReadDevAllOutEpInterrupt>
 8000c02:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8000c04:	e099      	b.n	8000d3a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8000c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c08:	f003 0301 	and.w	r3, r3, #1
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	f000 808e 	beq.w	8000d2e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c18:	b2d2      	uxtb	r2, r2
 8000c1a:	4611      	mov	r1, r2
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f002 fbc0 	bl	80033a2 <USB_ReadDevOutEPInterrupt>
 8000c22:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8000c24:	693b      	ldr	r3, [r7, #16]
 8000c26:	f003 0301 	and.w	r3, r3, #1
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d00c      	beq.n	8000c48 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8000c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c30:	015a      	lsls	r2, r3, #5
 8000c32:	69fb      	ldr	r3, [r7, #28]
 8000c34:	4413      	add	r3, r2
 8000c36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8000c40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000c42:	6878      	ldr	r0, [r7, #4]
 8000c44:	f000 fe60 	bl	8001908 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8000c48:	693b      	ldr	r3, [r7, #16]
 8000c4a:	f003 0308 	and.w	r3, r3, #8
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d00c      	beq.n	8000c6c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8000c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c54:	015a      	lsls	r2, r3, #5
 8000c56:	69fb      	ldr	r3, [r7, #28]
 8000c58:	4413      	add	r3, r2
 8000c5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000c5e:	461a      	mov	r2, r3
 8000c60:	2308      	movs	r3, #8
 8000c62:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8000c64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000c66:	6878      	ldr	r0, [r7, #4]
 8000c68:	f000 ff36 	bl	8001ad8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8000c6c:	693b      	ldr	r3, [r7, #16]
 8000c6e:	f003 0310 	and.w	r3, r3, #16
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d008      	beq.n	8000c88 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8000c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c78:	015a      	lsls	r2, r3, #5
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000c82:	461a      	mov	r2, r3
 8000c84:	2310      	movs	r3, #16
 8000c86:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8000c88:	693b      	ldr	r3, [r7, #16]
 8000c8a:	f003 0302 	and.w	r3, r3, #2
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d030      	beq.n	8000cf4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8000c92:	6a3b      	ldr	r3, [r7, #32]
 8000c94:	695b      	ldr	r3, [r3, #20]
 8000c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c9a:	2b80      	cmp	r3, #128	; 0x80
 8000c9c:	d109      	bne.n	8000cb2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	69fa      	ldr	r2, [r7, #28]
 8000ca8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8000cac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cb0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8000cb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cb4:	4613      	mov	r3, r2
 8000cb6:	00db      	lsls	r3, r3, #3
 8000cb8:	4413      	add	r3, r2
 8000cba:	009b      	lsls	r3, r3, #2
 8000cbc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8000cc0:	687a      	ldr	r2, [r7, #4]
 8000cc2:	4413      	add	r3, r2
 8000cc4:	3304      	adds	r3, #4
 8000cc6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	78db      	ldrb	r3, [r3, #3]
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	d108      	bne.n	8000ce2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8000cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	4619      	mov	r1, r3
 8000cdc:	6878      	ldr	r0, [r7, #4]
 8000cde:	f003 fe99 	bl	8004a14 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8000ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce4:	015a      	lsls	r2, r3, #5
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	4413      	add	r3, r2
 8000cea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000cee:	461a      	mov	r2, r3
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8000cf4:	693b      	ldr	r3, [r7, #16]
 8000cf6:	f003 0320 	and.w	r3, r3, #32
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d008      	beq.n	8000d10 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8000cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d00:	015a      	lsls	r2, r3, #5
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	4413      	add	r3, r2
 8000d06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	2320      	movs	r3, #32
 8000d0e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8000d10:	693b      	ldr	r3, [r7, #16]
 8000d12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d009      	beq.n	8000d2e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8000d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d1c:	015a      	lsls	r2, r3, #5
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	4413      	add	r3, r2
 8000d22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000d26:	461a      	mov	r2, r3
 8000d28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d2c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8000d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d30:	3301      	adds	r3, #1
 8000d32:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8000d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d36:	085b      	lsrs	r3, r3, #1
 8000d38:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8000d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	f47f af62 	bne.w	8000c06 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4618      	mov	r0, r3
 8000d48:	f002 fae4 	bl	8003314 <USB_ReadInterrupts>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d52:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000d56:	f040 80db 	bne.w	8000f10 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f002 fb05 	bl	800336e <USB_ReadDevAllInEpInterrupt>
 8000d64:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8000d66:	2300      	movs	r3, #0
 8000d68:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8000d6a:	e0cd      	b.n	8000f08 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8000d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	f000 80c2 	beq.w	8000efc <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d7e:	b2d2      	uxtb	r2, r2
 8000d80:	4611      	mov	r1, r2
 8000d82:	4618      	mov	r0, r3
 8000d84:	f002 fb2b 	bl	80033de <USB_ReadDevInEPInterrupt>
 8000d88:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8000d8a:	693b      	ldr	r3, [r7, #16]
 8000d8c:	f003 0301 	and.w	r3, r3, #1
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d057      	beq.n	8000e44 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8000d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d96:	f003 030f 	and.w	r3, r3, #15
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000da0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000da8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	43db      	mvns	r3, r3
 8000dae:	69f9      	ldr	r1, [r7, #28]
 8000db0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8000db4:	4013      	ands	r3, r2
 8000db6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8000db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dba:	015a      	lsls	r2, r3, #5
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	691b      	ldr	r3, [r3, #16]
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d132      	bne.n	8000e38 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8000dd2:	6879      	ldr	r1, [r7, #4]
 8000dd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000dd6:	4613      	mov	r3, r2
 8000dd8:	00db      	lsls	r3, r3, #3
 8000dda:	4413      	add	r3, r2
 8000ddc:	009b      	lsls	r3, r3, #2
 8000dde:	440b      	add	r3, r1
 8000de0:	334c      	adds	r3, #76	; 0x4c
 8000de2:	6819      	ldr	r1, [r3, #0]
 8000de4:	6878      	ldr	r0, [r7, #4]
 8000de6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000de8:	4613      	mov	r3, r2
 8000dea:	00db      	lsls	r3, r3, #3
 8000dec:	4413      	add	r3, r2
 8000dee:	009b      	lsls	r3, r3, #2
 8000df0:	4403      	add	r3, r0
 8000df2:	3348      	adds	r3, #72	; 0x48
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4419      	add	r1, r3
 8000df8:	6878      	ldr	r0, [r7, #4]
 8000dfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000dfc:	4613      	mov	r3, r2
 8000dfe:	00db      	lsls	r3, r3, #3
 8000e00:	4413      	add	r3, r2
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	4403      	add	r3, r0
 8000e06:	334c      	adds	r3, #76	; 0x4c
 8000e08:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8000e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d113      	bne.n	8000e38 <HAL_PCD_IRQHandler+0x3a2>
 8000e10:	6879      	ldr	r1, [r7, #4]
 8000e12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e14:	4613      	mov	r3, r2
 8000e16:	00db      	lsls	r3, r3, #3
 8000e18:	4413      	add	r3, r2
 8000e1a:	009b      	lsls	r3, r3, #2
 8000e1c:	440b      	add	r3, r1
 8000e1e:	3354      	adds	r3, #84	; 0x54
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d108      	bne.n	8000e38 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6818      	ldr	r0, [r3, #0]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8000e30:	461a      	mov	r2, r3
 8000e32:	2101      	movs	r1, #1
 8000e34:	f002 fb32 	bl	800349c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8000e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	6878      	ldr	r0, [r7, #4]
 8000e40:	f003 fd64 	bl	800490c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8000e44:	693b      	ldr	r3, [r7, #16]
 8000e46:	f003 0308 	and.w	r3, r3, #8
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d008      	beq.n	8000e60 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8000e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e50:	015a      	lsls	r2, r3, #5
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	4413      	add	r3, r2
 8000e56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	2308      	movs	r3, #8
 8000e5e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	f003 0310 	and.w	r3, r3, #16
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d008      	beq.n	8000e7c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8000e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e6c:	015a      	lsls	r2, r3, #5
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	4413      	add	r3, r2
 8000e72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8000e76:	461a      	mov	r2, r3
 8000e78:	2310      	movs	r3, #16
 8000e7a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d008      	beq.n	8000e98 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8000e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e88:	015a      	lsls	r2, r3, #5
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8000e92:	461a      	mov	r2, r3
 8000e94:	2340      	movs	r3, #64	; 0x40
 8000e96:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	f003 0302 	and.w	r3, r3, #2
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d023      	beq.n	8000eea <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8000ea2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000ea4:	6a38      	ldr	r0, [r7, #32]
 8000ea6:	f001 fb7b 	bl	80025a0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8000eaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000eac:	4613      	mov	r3, r2
 8000eae:	00db      	lsls	r3, r3, #3
 8000eb0:	4413      	add	r3, r2
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	3338      	adds	r3, #56	; 0x38
 8000eb6:	687a      	ldr	r2, [r7, #4]
 8000eb8:	4413      	add	r3, r2
 8000eba:	3304      	adds	r3, #4
 8000ebc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	78db      	ldrb	r3, [r3, #3]
 8000ec2:	2b01      	cmp	r3, #1
 8000ec4:	d108      	bne.n	8000ed8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	2200      	movs	r2, #0
 8000eca:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8000ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f003 fdb0 	bl	8004a38 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8000ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eda:	015a      	lsls	r2, r3, #5
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	4413      	add	r3, r2
 8000ee0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d003      	beq.n	8000efc <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8000ef4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	f000 fc79 	bl	80017ee <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8000efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000efe:	3301      	adds	r3, #1
 8000f00:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8000f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f04:	085b      	lsrs	r3, r3, #1
 8000f06:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8000f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	f47f af2e 	bne.w	8000d6c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4618      	mov	r0, r3
 8000f16:	f002 f9fd 	bl	8003314 <USB_ReadInterrupts>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000f20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000f24:	d122      	bne.n	8000f6c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	69fa      	ldr	r2, [r7, #28]
 8000f30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8000f34:	f023 0301 	bic.w	r3, r3, #1
 8000f38:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d108      	bne.n	8000f56 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2200      	movs	r2, #0
 8000f48:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f000 fe08 	bl	8001b64 <HAL_PCDEx_LPM_Callback>
 8000f54:	e002      	b.n	8000f5c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f003 fd4e 	bl	80049f8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	695a      	ldr	r2, [r3, #20]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8000f6a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4618      	mov	r0, r3
 8000f72:	f002 f9cf 	bl	8003314 <USB_ReadInterrupts>
 8000f76:	4603      	mov	r3, r0
 8000f78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000f80:	d112      	bne.n	8000fa8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000f88:	689b      	ldr	r3, [r3, #8]
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d102      	bne.n	8000f98 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f003 fd0a 	bl	80049ac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	695a      	ldr	r2, [r3, #20]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8000fa6:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4618      	mov	r0, r3
 8000fae:	f002 f9b1 	bl	8003314 <USB_ReadInterrupts>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000fbc:	f040 80b7 	bne.w	800112e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	69fa      	ldr	r2, [r7, #28]
 8000fca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8000fce:	f023 0301 	bic.w	r3, r3, #1
 8000fd2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	2110      	movs	r1, #16
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f001 fae0 	bl	80025a0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000fe4:	e046      	b.n	8001074 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8000fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fe8:	015a      	lsls	r2, r3, #5
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	4413      	add	r3, r2
 8000fee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8000ff8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8000ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ffc:	015a      	lsls	r2, r3, #5
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	4413      	add	r3, r2
 8001002:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800100a:	0151      	lsls	r1, r2, #5
 800100c:	69fa      	ldr	r2, [r7, #28]
 800100e:	440a      	add	r2, r1
 8001010:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001014:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001018:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800101a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800101c:	015a      	lsls	r2, r3, #5
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	4413      	add	r3, r2
 8001022:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001026:	461a      	mov	r2, r3
 8001028:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800102c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800102e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001030:	015a      	lsls	r2, r3, #5
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	4413      	add	r3, r2
 8001036:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800103e:	0151      	lsls	r1, r2, #5
 8001040:	69fa      	ldr	r2, [r7, #28]
 8001042:	440a      	add	r2, r1
 8001044:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001048:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800104c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800104e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001050:	015a      	lsls	r2, r3, #5
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	4413      	add	r3, r2
 8001056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800105e:	0151      	lsls	r1, r2, #5
 8001060:	69fa      	ldr	r2, [r7, #28]
 8001062:	440a      	add	r2, r1
 8001064:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001068:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800106c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800106e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001070:	3301      	adds	r3, #1
 8001072:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800107a:	429a      	cmp	r2, r3
 800107c:	d3b3      	bcc.n	8000fe6 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001084:	69db      	ldr	r3, [r3, #28]
 8001086:	69fa      	ldr	r2, [r7, #28]
 8001088:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800108c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001090:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	2b00      	cmp	r3, #0
 8001098:	d016      	beq.n	80010c8 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80010a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80010a4:	69fa      	ldr	r2, [r7, #28]
 80010a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80010aa:	f043 030b 	orr.w	r3, r3, #11
 80010ae:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80010b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ba:	69fa      	ldr	r2, [r7, #28]
 80010bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80010c0:	f043 030b 	orr.w	r3, r3, #11
 80010c4:	6453      	str	r3, [r2, #68]	; 0x44
 80010c6:	e015      	b.n	80010f4 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80010ce:	695b      	ldr	r3, [r3, #20]
 80010d0:	69fa      	ldr	r2, [r7, #28]
 80010d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80010d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80010da:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80010de:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80010e6:	691b      	ldr	r3, [r3, #16]
 80010e8:	69fa      	ldr	r2, [r7, #28]
 80010ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80010ee:	f043 030b 	orr.w	r3, r3, #11
 80010f2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	69fa      	ldr	r2, [r7, #28]
 80010fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001102:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001106:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6818      	ldr	r0, [r3, #0]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	691b      	ldr	r3, [r3, #16]
 8001110:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001118:	461a      	mov	r2, r3
 800111a:	f002 f9bf 	bl	800349c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	695a      	ldr	r2, [r3, #20]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800112c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4618      	mov	r0, r3
 8001134:	f002 f8ee 	bl	8003314 <USB_ReadInterrupts>
 8001138:	4603      	mov	r3, r0
 800113a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800113e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001142:	d124      	bne.n	800118e <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4618      	mov	r0, r3
 800114a:	f002 f984 	bl	8003456 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4618      	mov	r0, r3
 8001154:	f001 fa58 	bl	8002608 <USB_GetDevSpeed>
 8001158:	4603      	mov	r3, r0
 800115a:	461a      	mov	r2, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681c      	ldr	r4, [r3, #0]
 8001164:	f001 f96e 	bl	8002444 <HAL_RCC_GetHCLKFreq>
 8001168:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800116e:	b2db      	uxtb	r3, r3
 8001170:	461a      	mov	r2, r3
 8001172:	4620      	mov	r0, r4
 8001174:	f001 f972 	bl	800245c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f003 fbef 	bl	800495c <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	695a      	ldr	r2, [r3, #20]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800118c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4618      	mov	r0, r3
 8001194:	f002 f8be 	bl	8003314 <USB_ReadInterrupts>
 8001198:	4603      	mov	r3, r0
 800119a:	f003 0308 	and.w	r3, r3, #8
 800119e:	2b08      	cmp	r3, #8
 80011a0:	d10a      	bne.n	80011b8 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f003 fbcc 	bl	8004940 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	695a      	ldr	r2, [r3, #20]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f002 0208 	and.w	r2, r2, #8
 80011b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4618      	mov	r0, r3
 80011be:	f002 f8a9 	bl	8003314 <USB_ReadInterrupts>
 80011c2:	4603      	mov	r3, r0
 80011c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011c8:	2b80      	cmp	r3, #128	; 0x80
 80011ca:	d122      	bne.n	8001212 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80011cc:	6a3b      	ldr	r3, [r7, #32]
 80011ce:	699b      	ldr	r3, [r3, #24]
 80011d0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80011d4:	6a3b      	ldr	r3, [r7, #32]
 80011d6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80011d8:	2301      	movs	r3, #1
 80011da:	627b      	str	r3, [r7, #36]	; 0x24
 80011dc:	e014      	b.n	8001208 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80011de:	6879      	ldr	r1, [r7, #4]
 80011e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011e2:	4613      	mov	r3, r2
 80011e4:	00db      	lsls	r3, r3, #3
 80011e6:	4413      	add	r3, r2
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	440b      	add	r3, r1
 80011ec:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d105      	bne.n	8001202 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80011f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	4619      	mov	r1, r3
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f000 fac5 	bl	800178c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001204:	3301      	adds	r3, #1
 8001206:	627b      	str	r3, [r7, #36]	; 0x24
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800120e:	429a      	cmp	r2, r3
 8001210:	d3e5      	bcc.n	80011de <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4618      	mov	r0, r3
 8001218:	f002 f87c 	bl	8003314 <USB_ReadInterrupts>
 800121c:	4603      	mov	r3, r0
 800121e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001222:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001226:	d13b      	bne.n	80012a0 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001228:	2301      	movs	r3, #1
 800122a:	627b      	str	r3, [r7, #36]	; 0x24
 800122c:	e02b      	b.n	8001286 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800122e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001230:	015a      	lsls	r2, r3, #5
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	4413      	add	r3, r2
 8001236:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800123e:	6879      	ldr	r1, [r7, #4]
 8001240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001242:	4613      	mov	r3, r2
 8001244:	00db      	lsls	r3, r3, #3
 8001246:	4413      	add	r3, r2
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	440b      	add	r3, r1
 800124c:	3340      	adds	r3, #64	; 0x40
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	2b01      	cmp	r3, #1
 8001252:	d115      	bne.n	8001280 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001254:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001256:	2b00      	cmp	r3, #0
 8001258:	da12      	bge.n	8001280 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800125a:	6879      	ldr	r1, [r7, #4]
 800125c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800125e:	4613      	mov	r3, r2
 8001260:	00db      	lsls	r3, r3, #3
 8001262:	4413      	add	r3, r2
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	440b      	add	r3, r1
 8001268:	333f      	adds	r3, #63	; 0x3f
 800126a:	2201      	movs	r2, #1
 800126c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800126e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001270:	b2db      	uxtb	r3, r3
 8001272:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001276:	b2db      	uxtb	r3, r3
 8001278:	4619      	mov	r1, r3
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f000 fa86 	bl	800178c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001282:	3301      	adds	r3, #1
 8001284:	627b      	str	r3, [r7, #36]	; 0x24
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800128c:	429a      	cmp	r2, r3
 800128e:	d3ce      	bcc.n	800122e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	695a      	ldr	r2, [r3, #20]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800129e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f002 f835 	bl	8003314 <USB_ReadInterrupts>
 80012aa:	4603      	mov	r3, r0
 80012ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80012b4:	d155      	bne.n	8001362 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80012b6:	2301      	movs	r3, #1
 80012b8:	627b      	str	r3, [r7, #36]	; 0x24
 80012ba:	e045      	b.n	8001348 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80012bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012be:	015a      	lsls	r2, r3, #5
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	4413      	add	r3, r2
 80012c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80012cc:	6879      	ldr	r1, [r7, #4]
 80012ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012d0:	4613      	mov	r3, r2
 80012d2:	00db      	lsls	r3, r3, #3
 80012d4:	4413      	add	r3, r2
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	440b      	add	r3, r1
 80012da:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d12e      	bne.n	8001342 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80012e4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	da2b      	bge.n	8001342 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80012f6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d121      	bne.n	8001342 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80012fe:	6879      	ldr	r1, [r7, #4]
 8001300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001302:	4613      	mov	r3, r2
 8001304:	00db      	lsls	r3, r3, #3
 8001306:	4413      	add	r3, r2
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	440b      	add	r3, r1
 800130c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001310:	2201      	movs	r2, #1
 8001312:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001314:	6a3b      	ldr	r3, [r7, #32]
 8001316:	699b      	ldr	r3, [r3, #24]
 8001318:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800131c:	6a3b      	ldr	r3, [r7, #32]
 800131e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001320:	6a3b      	ldr	r3, [r7, #32]
 8001322:	695b      	ldr	r3, [r3, #20]
 8001324:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001328:	2b00      	cmp	r3, #0
 800132a:	d10a      	bne.n	8001342 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	69fa      	ldr	r2, [r7, #28]
 8001336:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800133a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800133e:	6053      	str	r3, [r2, #4]
            break;
 8001340:	e007      	b.n	8001352 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001344:	3301      	adds	r3, #1
 8001346:	627b      	str	r3, [r7, #36]	; 0x24
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800134e:	429a      	cmp	r2, r3
 8001350:	d3b4      	bcc.n	80012bc <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	695a      	ldr	r2, [r3, #20]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001360:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4618      	mov	r0, r3
 8001368:	f001 ffd4 	bl	8003314 <USB_ReadInterrupts>
 800136c:	4603      	mov	r3, r0
 800136e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001372:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001376:	d10a      	bne.n	800138e <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f003 fb6f 	bl	8004a5c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	695a      	ldr	r2, [r3, #20]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800138c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4618      	mov	r0, r3
 8001394:	f001 ffbe 	bl	8003314 <USB_ReadInterrupts>
 8001398:	4603      	mov	r3, r0
 800139a:	f003 0304 	and.w	r3, r3, #4
 800139e:	2b04      	cmp	r3, #4
 80013a0:	d115      	bne.n	80013ce <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	f003 0304 	and.w	r3, r3, #4
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d002      	beq.n	80013ba <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f003 fb5f 	bl	8004a78 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	6859      	ldr	r1, [r3, #4]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	430a      	orrs	r2, r1
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	e000      	b.n	80013ce <HAL_PCD_IRQHandler+0x938>
      return;
 80013cc:	bf00      	nop
    }
  }
}
 80013ce:	3734      	adds	r7, #52	; 0x34
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd90      	pop	{r4, r7, pc}

080013d4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	460b      	mov	r3, r1
 80013de:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d101      	bne.n	80013ee <HAL_PCD_SetAddress+0x1a>
 80013ea:	2302      	movs	r3, #2
 80013ec:	e013      	b.n	8001416 <HAL_PCD_SetAddress+0x42>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2201      	movs	r2, #1
 80013f2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	78fa      	ldrb	r2, [r7, #3]
 80013fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	78fa      	ldrb	r2, [r7, #3]
 8001404:	4611      	mov	r1, r2
 8001406:	4618      	mov	r0, r3
 8001408:	f001 ff5e 	bl	80032c8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2200      	movs	r2, #0
 8001410:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001414:	2300      	movs	r3, #0
}
 8001416:	4618      	mov	r0, r3
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	b084      	sub	sp, #16
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
 8001426:	4608      	mov	r0, r1
 8001428:	4611      	mov	r1, r2
 800142a:	461a      	mov	r2, r3
 800142c:	4603      	mov	r3, r0
 800142e:	70fb      	strb	r3, [r7, #3]
 8001430:	460b      	mov	r3, r1
 8001432:	803b      	strh	r3, [r7, #0]
 8001434:	4613      	mov	r3, r2
 8001436:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001438:	2300      	movs	r3, #0
 800143a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800143c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001440:	2b00      	cmp	r3, #0
 8001442:	da0f      	bge.n	8001464 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001444:	78fb      	ldrb	r3, [r7, #3]
 8001446:	f003 020f 	and.w	r2, r3, #15
 800144a:	4613      	mov	r3, r2
 800144c:	00db      	lsls	r3, r3, #3
 800144e:	4413      	add	r3, r2
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	3338      	adds	r3, #56	; 0x38
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	4413      	add	r3, r2
 8001458:	3304      	adds	r3, #4
 800145a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	2201      	movs	r2, #1
 8001460:	705a      	strb	r2, [r3, #1]
 8001462:	e00f      	b.n	8001484 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001464:	78fb      	ldrb	r3, [r7, #3]
 8001466:	f003 020f 	and.w	r2, r3, #15
 800146a:	4613      	mov	r3, r2
 800146c:	00db      	lsls	r3, r3, #3
 800146e:	4413      	add	r3, r2
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001476:	687a      	ldr	r2, [r7, #4]
 8001478:	4413      	add	r3, r2
 800147a:	3304      	adds	r3, #4
 800147c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	2200      	movs	r2, #0
 8001482:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001484:	78fb      	ldrb	r3, [r7, #3]
 8001486:	f003 030f 	and.w	r3, r3, #15
 800148a:	b2da      	uxtb	r2, r3
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001490:	883a      	ldrh	r2, [r7, #0]
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	78ba      	ldrb	r2, [r7, #2]
 800149a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	785b      	ldrb	r3, [r3, #1]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d004      	beq.n	80014ae <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	b29a      	uxth	r2, r3
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80014ae:	78bb      	ldrb	r3, [r7, #2]
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d102      	bne.n	80014ba <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	2200      	movs	r2, #0
 80014b8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d101      	bne.n	80014c8 <HAL_PCD_EP_Open+0xaa>
 80014c4:	2302      	movs	r3, #2
 80014c6:	e00e      	b.n	80014e6 <HAL_PCD_EP_Open+0xc8>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2201      	movs	r2, #1
 80014cc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	68f9      	ldr	r1, [r7, #12]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f001 f8bb 	bl	8002652 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2200      	movs	r2, #0
 80014e0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80014e4:	7afb      	ldrb	r3, [r7, #11]
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3710      	adds	r7, #16
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b086      	sub	sp, #24
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	60f8      	str	r0, [r7, #12]
 80014f6:	607a      	str	r2, [r7, #4]
 80014f8:	603b      	str	r3, [r7, #0]
 80014fa:	460b      	mov	r3, r1
 80014fc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80014fe:	7afb      	ldrb	r3, [r7, #11]
 8001500:	f003 020f 	and.w	r2, r3, #15
 8001504:	4613      	mov	r3, r2
 8001506:	00db      	lsls	r3, r3, #3
 8001508:	4413      	add	r3, r2
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001510:	68fa      	ldr	r2, [r7, #12]
 8001512:	4413      	add	r3, r2
 8001514:	3304      	adds	r3, #4
 8001516:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	683a      	ldr	r2, [r7, #0]
 8001522:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	2200      	movs	r2, #0
 8001528:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	2200      	movs	r2, #0
 800152e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001530:	7afb      	ldrb	r3, [r7, #11]
 8001532:	f003 030f 	and.w	r3, r3, #15
 8001536:	b2da      	uxtb	r2, r3
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	691b      	ldr	r3, [r3, #16]
 8001540:	2b01      	cmp	r3, #1
 8001542:	d102      	bne.n	800154a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800154a:	7afb      	ldrb	r3, [r7, #11]
 800154c:	f003 030f 	and.w	r3, r3, #15
 8001550:	2b00      	cmp	r3, #0
 8001552:	d109      	bne.n	8001568 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	6818      	ldr	r0, [r3, #0]
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	691b      	ldr	r3, [r3, #16]
 800155c:	b2db      	uxtb	r3, r3
 800155e:	461a      	mov	r2, r3
 8001560:	6979      	ldr	r1, [r7, #20]
 8001562:	f001 fb45 	bl	8002bf0 <USB_EP0StartXfer>
 8001566:	e008      	b.n	800157a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	6818      	ldr	r0, [r3, #0]
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	691b      	ldr	r3, [r3, #16]
 8001570:	b2db      	uxtb	r3, r3
 8001572:	461a      	mov	r2, r3
 8001574:	6979      	ldr	r1, [r7, #20]
 8001576:	f001 f8f3 	bl	8002760 <USB_EPStartXfer>
  }

  return HAL_OK;
 800157a:	2300      	movs	r3, #0
}
 800157c:	4618      	mov	r0, r3
 800157e:	3718      	adds	r7, #24
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}

08001584 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0
 800158a:	60f8      	str	r0, [r7, #12]
 800158c:	607a      	str	r2, [r7, #4]
 800158e:	603b      	str	r3, [r7, #0]
 8001590:	460b      	mov	r3, r1
 8001592:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001594:	7afb      	ldrb	r3, [r7, #11]
 8001596:	f003 020f 	and.w	r2, r3, #15
 800159a:	4613      	mov	r3, r2
 800159c:	00db      	lsls	r3, r3, #3
 800159e:	4413      	add	r3, r2
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	3338      	adds	r3, #56	; 0x38
 80015a4:	68fa      	ldr	r2, [r7, #12]
 80015a6:	4413      	add	r3, r2
 80015a8:	3304      	adds	r3, #4
 80015aa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	683a      	ldr	r2, [r7, #0]
 80015b6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	2200      	movs	r2, #0
 80015bc:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	2201      	movs	r2, #1
 80015c2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80015c4:	7afb      	ldrb	r3, [r7, #11]
 80015c6:	f003 030f 	and.w	r3, r3, #15
 80015ca:	b2da      	uxtb	r2, r3
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	691b      	ldr	r3, [r3, #16]
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d102      	bne.n	80015de <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80015de:	7afb      	ldrb	r3, [r7, #11]
 80015e0:	f003 030f 	and.w	r3, r3, #15
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d109      	bne.n	80015fc <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	6818      	ldr	r0, [r3, #0]
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	691b      	ldr	r3, [r3, #16]
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	461a      	mov	r2, r3
 80015f4:	6979      	ldr	r1, [r7, #20]
 80015f6:	f001 fafb 	bl	8002bf0 <USB_EP0StartXfer>
 80015fa:	e008      	b.n	800160e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	6818      	ldr	r0, [r3, #0]
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	691b      	ldr	r3, [r3, #16]
 8001604:	b2db      	uxtb	r3, r3
 8001606:	461a      	mov	r2, r3
 8001608:	6979      	ldr	r1, [r7, #20]
 800160a:	f001 f8a9 	bl	8002760 <USB_EPStartXfer>
  }

  return HAL_OK;
 800160e:	2300      	movs	r3, #0
}
 8001610:	4618      	mov	r0, r3
 8001612:	3718      	adds	r7, #24
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}

08001618 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	460b      	mov	r3, r1
 8001622:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001624:	78fb      	ldrb	r3, [r7, #3]
 8001626:	f003 020f 	and.w	r2, r3, #15
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	429a      	cmp	r2, r3
 8001630:	d901      	bls.n	8001636 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e050      	b.n	80016d8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001636:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800163a:	2b00      	cmp	r3, #0
 800163c:	da0f      	bge.n	800165e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800163e:	78fb      	ldrb	r3, [r7, #3]
 8001640:	f003 020f 	and.w	r2, r3, #15
 8001644:	4613      	mov	r3, r2
 8001646:	00db      	lsls	r3, r3, #3
 8001648:	4413      	add	r3, r2
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	3338      	adds	r3, #56	; 0x38
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	4413      	add	r3, r2
 8001652:	3304      	adds	r3, #4
 8001654:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	2201      	movs	r2, #1
 800165a:	705a      	strb	r2, [r3, #1]
 800165c:	e00d      	b.n	800167a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800165e:	78fa      	ldrb	r2, [r7, #3]
 8001660:	4613      	mov	r3, r2
 8001662:	00db      	lsls	r3, r3, #3
 8001664:	4413      	add	r3, r2
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	4413      	add	r3, r2
 8001670:	3304      	adds	r3, #4
 8001672:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	2200      	movs	r2, #0
 8001678:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	2201      	movs	r2, #1
 800167e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001680:	78fb      	ldrb	r3, [r7, #3]
 8001682:	f003 030f 	and.w	r3, r3, #15
 8001686:	b2da      	uxtb	r2, r3
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001692:	2b01      	cmp	r3, #1
 8001694:	d101      	bne.n	800169a <HAL_PCD_EP_SetStall+0x82>
 8001696:	2302      	movs	r3, #2
 8001698:	e01e      	b.n	80016d8 <HAL_PCD_EP_SetStall+0xc0>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2201      	movs	r2, #1
 800169e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	68f9      	ldr	r1, [r7, #12]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f001 fd39 	bl	8003120 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80016ae:	78fb      	ldrb	r3, [r7, #3]
 80016b0:	f003 030f 	and.w	r3, r3, #15
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d10a      	bne.n	80016ce <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6818      	ldr	r0, [r3, #0]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	691b      	ldr	r3, [r3, #16]
 80016c0:	b2d9      	uxtb	r1, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80016c8:	461a      	mov	r2, r3
 80016ca:	f001 fee7 	bl	800349c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2200      	movs	r2, #0
 80016d2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80016d6:	2300      	movs	r3, #0
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3710      	adds	r7, #16
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}

080016e0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	460b      	mov	r3, r1
 80016ea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80016ec:	78fb      	ldrb	r3, [r7, #3]
 80016ee:	f003 020f 	and.w	r2, r3, #15
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d901      	bls.n	80016fe <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e042      	b.n	8001784 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80016fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001702:	2b00      	cmp	r3, #0
 8001704:	da0f      	bge.n	8001726 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001706:	78fb      	ldrb	r3, [r7, #3]
 8001708:	f003 020f 	and.w	r2, r3, #15
 800170c:	4613      	mov	r3, r2
 800170e:	00db      	lsls	r3, r3, #3
 8001710:	4413      	add	r3, r2
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	3338      	adds	r3, #56	; 0x38
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	4413      	add	r3, r2
 800171a:	3304      	adds	r3, #4
 800171c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	2201      	movs	r2, #1
 8001722:	705a      	strb	r2, [r3, #1]
 8001724:	e00f      	b.n	8001746 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001726:	78fb      	ldrb	r3, [r7, #3]
 8001728:	f003 020f 	and.w	r2, r3, #15
 800172c:	4613      	mov	r3, r2
 800172e:	00db      	lsls	r3, r3, #3
 8001730:	4413      	add	r3, r2
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	4413      	add	r3, r2
 800173c:	3304      	adds	r3, #4
 800173e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	2200      	movs	r2, #0
 8001744:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	2200      	movs	r2, #0
 800174a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800174c:	78fb      	ldrb	r3, [r7, #3]
 800174e:	f003 030f 	and.w	r3, r3, #15
 8001752:	b2da      	uxtb	r2, r3
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800175e:	2b01      	cmp	r3, #1
 8001760:	d101      	bne.n	8001766 <HAL_PCD_EP_ClrStall+0x86>
 8001762:	2302      	movs	r3, #2
 8001764:	e00e      	b.n	8001784 <HAL_PCD_EP_ClrStall+0xa4>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2201      	movs	r2, #1
 800176a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	68f9      	ldr	r1, [r7, #12]
 8001774:	4618      	mov	r0, r3
 8001776:	f001 fd41 	bl	80031fc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2200      	movs	r2, #0
 800177e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001782:	2300      	movs	r3, #0
}
 8001784:	4618      	mov	r0, r3
 8001786:	3710      	adds	r7, #16
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}

0800178c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	460b      	mov	r3, r1
 8001796:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001798:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800179c:	2b00      	cmp	r3, #0
 800179e:	da0c      	bge.n	80017ba <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017a0:	78fb      	ldrb	r3, [r7, #3]
 80017a2:	f003 020f 	and.w	r2, r3, #15
 80017a6:	4613      	mov	r3, r2
 80017a8:	00db      	lsls	r3, r3, #3
 80017aa:	4413      	add	r3, r2
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	3338      	adds	r3, #56	; 0x38
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	4413      	add	r3, r2
 80017b4:	3304      	adds	r3, #4
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	e00c      	b.n	80017d4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80017ba:	78fb      	ldrb	r3, [r7, #3]
 80017bc:	f003 020f 	and.w	r2, r3, #15
 80017c0:	4613      	mov	r3, r2
 80017c2:	00db      	lsls	r3, r3, #3
 80017c4:	4413      	add	r3, r2
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	4413      	add	r3, r2
 80017d0:	3304      	adds	r3, #4
 80017d2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	68f9      	ldr	r1, [r7, #12]
 80017da:	4618      	mov	r0, r3
 80017dc:	f001 fb60 	bl	8002ea0 <USB_EPStopXfer>
 80017e0:	4603      	mov	r3, r0
 80017e2:	72fb      	strb	r3, [r7, #11]

  return ret;
 80017e4:	7afb      	ldrb	r3, [r7, #11]
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3710      	adds	r7, #16
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}

080017ee <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b08a      	sub	sp, #40	; 0x28
 80017f2:	af02      	add	r7, sp, #8
 80017f4:	6078      	str	r0, [r7, #4]
 80017f6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001802:	683a      	ldr	r2, [r7, #0]
 8001804:	4613      	mov	r3, r2
 8001806:	00db      	lsls	r3, r3, #3
 8001808:	4413      	add	r3, r2
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	3338      	adds	r3, #56	; 0x38
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	4413      	add	r3, r2
 8001812:	3304      	adds	r3, #4
 8001814:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	6a1a      	ldr	r2, [r3, #32]
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	699b      	ldr	r3, [r3, #24]
 800181e:	429a      	cmp	r2, r3
 8001820:	d901      	bls.n	8001826 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e06c      	b.n	8001900 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	699a      	ldr	r2, [r3, #24]
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	6a1b      	ldr	r3, [r3, #32]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	68db      	ldr	r3, [r3, #12]
 8001836:	69fa      	ldr	r2, [r7, #28]
 8001838:	429a      	cmp	r2, r3
 800183a:	d902      	bls.n	8001842 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	3303      	adds	r3, #3
 8001846:	089b      	lsrs	r3, r3, #2
 8001848:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800184a:	e02b      	b.n	80018a4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	699a      	ldr	r2, [r3, #24]
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	6a1b      	ldr	r3, [r3, #32]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	69fa      	ldr	r2, [r7, #28]
 800185e:	429a      	cmp	r2, r3
 8001860:	d902      	bls.n	8001868 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	68db      	ldr	r3, [r3, #12]
 8001866:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	3303      	adds	r3, #3
 800186c:	089b      	lsrs	r3, r3, #2
 800186e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	6919      	ldr	r1, [r3, #16]
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	b2da      	uxtb	r2, r3
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001880:	b2db      	uxtb	r3, r3
 8001882:	9300      	str	r3, [sp, #0]
 8001884:	4603      	mov	r3, r0
 8001886:	6978      	ldr	r0, [r7, #20]
 8001888:	f001 fbb4 	bl	8002ff4 <USB_WritePacket>

    ep->xfer_buff  += len;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	691a      	ldr	r2, [r3, #16]
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	441a      	add	r2, r3
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	6a1a      	ldr	r2, [r3, #32]
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	441a      	add	r2, r3
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	015a      	lsls	r2, r3, #5
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	4413      	add	r3, r2
 80018ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018b0:	699b      	ldr	r3, [r3, #24]
 80018b2:	b29b      	uxth	r3, r3
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d809      	bhi.n	80018ce <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	6a1a      	ldr	r2, [r3, #32]
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d203      	bcs.n	80018ce <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	699b      	ldr	r3, [r3, #24]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d1be      	bne.n	800184c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	699a      	ldr	r2, [r3, #24]
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	6a1b      	ldr	r3, [r3, #32]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d811      	bhi.n	80018fe <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	f003 030f 	and.w	r3, r3, #15
 80018e0:	2201      	movs	r2, #1
 80018e2:	fa02 f303 	lsl.w	r3, r2, r3
 80018e6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	43db      	mvns	r3, r3
 80018f4:	6939      	ldr	r1, [r7, #16]
 80018f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80018fa:	4013      	ands	r3, r2
 80018fc:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80018fe:	2300      	movs	r3, #0
}
 8001900:	4618      	mov	r0, r3
 8001902:	3720      	adds	r7, #32
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b088      	sub	sp, #32
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	333c      	adds	r3, #60	; 0x3c
 8001920:	3304      	adds	r3, #4
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	015a      	lsls	r2, r3, #5
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	4413      	add	r3, r2
 800192e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	691b      	ldr	r3, [r3, #16]
 800193a:	2b01      	cmp	r3, #1
 800193c:	d17b      	bne.n	8001a36 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	f003 0308 	and.w	r3, r3, #8
 8001944:	2b00      	cmp	r3, #0
 8001946:	d015      	beq.n	8001974 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	4a61      	ldr	r2, [pc, #388]	; (8001ad0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800194c:	4293      	cmp	r3, r2
 800194e:	f240 80b9 	bls.w	8001ac4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001958:	2b00      	cmp	r3, #0
 800195a:	f000 80b3 	beq.w	8001ac4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	015a      	lsls	r2, r3, #5
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	4413      	add	r3, r2
 8001966:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800196a:	461a      	mov	r2, r3
 800196c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001970:	6093      	str	r3, [r2, #8]
 8001972:	e0a7      	b.n	8001ac4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	f003 0320 	and.w	r3, r3, #32
 800197a:	2b00      	cmp	r3, #0
 800197c:	d009      	beq.n	8001992 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	015a      	lsls	r2, r3, #5
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	4413      	add	r3, r2
 8001986:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800198a:	461a      	mov	r2, r3
 800198c:	2320      	movs	r3, #32
 800198e:	6093      	str	r3, [r2, #8]
 8001990:	e098      	b.n	8001ac4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001998:	2b00      	cmp	r3, #0
 800199a:	f040 8093 	bne.w	8001ac4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	4a4b      	ldr	r2, [pc, #300]	; (8001ad0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d90f      	bls.n	80019c6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d00a      	beq.n	80019c6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	015a      	lsls	r2, r3, #5
 80019b4:	69bb      	ldr	r3, [r7, #24]
 80019b6:	4413      	add	r3, r2
 80019b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019bc:	461a      	mov	r2, r3
 80019be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80019c2:	6093      	str	r3, [r2, #8]
 80019c4:	e07e      	b.n	8001ac4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80019c6:	683a      	ldr	r2, [r7, #0]
 80019c8:	4613      	mov	r3, r2
 80019ca:	00db      	lsls	r3, r3, #3
 80019cc:	4413      	add	r3, r2
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	4413      	add	r3, r2
 80019d8:	3304      	adds	r3, #4
 80019da:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	69da      	ldr	r2, [r3, #28]
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	0159      	lsls	r1, r3, #5
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	440b      	add	r3, r1
 80019e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019ec:	691b      	ldr	r3, [r3, #16]
 80019ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019f2:	1ad2      	subs	r2, r2, r3
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d114      	bne.n	8001a28 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	699b      	ldr	r3, [r3, #24]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d109      	bne.n	8001a1a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6818      	ldr	r0, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001a10:	461a      	mov	r2, r3
 8001a12:	2101      	movs	r1, #1
 8001a14:	f001 fd42 	bl	800349c <USB_EP0_OutStart>
 8001a18:	e006      	b.n	8001a28 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	691a      	ldr	r2, [r3, #16]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	6a1b      	ldr	r3, [r3, #32]
 8001a22:	441a      	add	r2, r3
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f002 ff51 	bl	80048d6 <HAL_PCD_DataOutStageCallback>
 8001a34:	e046      	b.n	8001ac4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	4a26      	ldr	r2, [pc, #152]	; (8001ad4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d124      	bne.n	8001a88 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d00a      	beq.n	8001a5e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	015a      	lsls	r2, r3, #5
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	4413      	add	r3, r2
 8001a50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a54:	461a      	mov	r2, r3
 8001a56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a5a:	6093      	str	r3, [r2, #8]
 8001a5c:	e032      	b.n	8001ac4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	f003 0320 	and.w	r3, r3, #32
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d008      	beq.n	8001a7a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	015a      	lsls	r2, r3, #5
 8001a6c:	69bb      	ldr	r3, [r7, #24]
 8001a6e:	4413      	add	r3, r2
 8001a70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a74:	461a      	mov	r2, r3
 8001a76:	2320      	movs	r3, #32
 8001a78:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	4619      	mov	r1, r3
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f002 ff28 	bl	80048d6 <HAL_PCD_DataOutStageCallback>
 8001a86:	e01d      	b.n	8001ac4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d114      	bne.n	8001ab8 <PCD_EP_OutXfrComplete_int+0x1b0>
 8001a8e:	6879      	ldr	r1, [r7, #4]
 8001a90:	683a      	ldr	r2, [r7, #0]
 8001a92:	4613      	mov	r3, r2
 8001a94:	00db      	lsls	r3, r3, #3
 8001a96:	4413      	add	r3, r2
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	440b      	add	r3, r1
 8001a9c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d108      	bne.n	8001ab8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6818      	ldr	r0, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	f001 fcf2 	bl	800349c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	4619      	mov	r1, r3
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f002 ff09 	bl	80048d6 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3720      	adds	r7, #32
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	4f54300a 	.word	0x4f54300a
 8001ad4:	4f54310a 	.word	0x4f54310a

08001ad8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b086      	sub	sp, #24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	333c      	adds	r3, #60	; 0x3c
 8001af0:	3304      	adds	r3, #4
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	015a      	lsls	r2, r3, #5
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	4413      	add	r3, r2
 8001afe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	4a15      	ldr	r2, [pc, #84]	; (8001b60 <PCD_EP_OutSetupPacket_int+0x88>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d90e      	bls.n	8001b2c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d009      	beq.n	8001b2c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	015a      	lsls	r2, r3, #5
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	4413      	add	r3, r2
 8001b20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b24:	461a      	mov	r2, r3
 8001b26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b2a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f002 fec0 	bl	80048b2 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	4a0a      	ldr	r2, [pc, #40]	; (8001b60 <PCD_EP_OutSetupPacket_int+0x88>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d90c      	bls.n	8001b54 <PCD_EP_OutSetupPacket_int+0x7c>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	691b      	ldr	r3, [r3, #16]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d108      	bne.n	8001b54 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6818      	ldr	r0, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	2101      	movs	r1, #1
 8001b50:	f001 fca4 	bl	800349c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3718      	adds	r7, #24
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	4f54300a 	.word	0x4f54300a

08001b64 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8001b70:	bf00      	nop
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b086      	sub	sp, #24
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d101      	bne.n	8001b8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e267      	b.n	800205e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d075      	beq.n	8001c86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b9a:	4b88      	ldr	r3, [pc, #544]	; (8001dbc <HAL_RCC_OscConfig+0x240>)
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f003 030c 	and.w	r3, r3, #12
 8001ba2:	2b04      	cmp	r3, #4
 8001ba4:	d00c      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ba6:	4b85      	ldr	r3, [pc, #532]	; (8001dbc <HAL_RCC_OscConfig+0x240>)
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bae:	2b08      	cmp	r3, #8
 8001bb0:	d112      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bb2:	4b82      	ldr	r3, [pc, #520]	; (8001dbc <HAL_RCC_OscConfig+0x240>)
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001bbe:	d10b      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bc0:	4b7e      	ldr	r3, [pc, #504]	; (8001dbc <HAL_RCC_OscConfig+0x240>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d05b      	beq.n	8001c84 <HAL_RCC_OscConfig+0x108>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d157      	bne.n	8001c84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e242      	b.n	800205e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001be0:	d106      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x74>
 8001be2:	4b76      	ldr	r3, [pc, #472]	; (8001dbc <HAL_RCC_OscConfig+0x240>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a75      	ldr	r2, [pc, #468]	; (8001dbc <HAL_RCC_OscConfig+0x240>)
 8001be8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bec:	6013      	str	r3, [r2, #0]
 8001bee:	e01d      	b.n	8001c2c <HAL_RCC_OscConfig+0xb0>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bf8:	d10c      	bne.n	8001c14 <HAL_RCC_OscConfig+0x98>
 8001bfa:	4b70      	ldr	r3, [pc, #448]	; (8001dbc <HAL_RCC_OscConfig+0x240>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a6f      	ldr	r2, [pc, #444]	; (8001dbc <HAL_RCC_OscConfig+0x240>)
 8001c00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c04:	6013      	str	r3, [r2, #0]
 8001c06:	4b6d      	ldr	r3, [pc, #436]	; (8001dbc <HAL_RCC_OscConfig+0x240>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a6c      	ldr	r2, [pc, #432]	; (8001dbc <HAL_RCC_OscConfig+0x240>)
 8001c0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c10:	6013      	str	r3, [r2, #0]
 8001c12:	e00b      	b.n	8001c2c <HAL_RCC_OscConfig+0xb0>
 8001c14:	4b69      	ldr	r3, [pc, #420]	; (8001dbc <HAL_RCC_OscConfig+0x240>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a68      	ldr	r2, [pc, #416]	; (8001dbc <HAL_RCC_OscConfig+0x240>)
 8001c1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c1e:	6013      	str	r3, [r2, #0]
 8001c20:	4b66      	ldr	r3, [pc, #408]	; (8001dbc <HAL_RCC_OscConfig+0x240>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a65      	ldr	r2, [pc, #404]	; (8001dbc <HAL_RCC_OscConfig+0x240>)
 8001c26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d013      	beq.n	8001c5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c34:	f7fe fe3e 	bl	80008b4 <HAL_GetTick>
 8001c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c3c:	f7fe fe3a 	bl	80008b4 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b64      	cmp	r3, #100	; 0x64
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e207      	b.n	800205e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c4e:	4b5b      	ldr	r3, [pc, #364]	; (8001dbc <HAL_RCC_OscConfig+0x240>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d0f0      	beq.n	8001c3c <HAL_RCC_OscConfig+0xc0>
 8001c5a:	e014      	b.n	8001c86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c5c:	f7fe fe2a 	bl	80008b4 <HAL_GetTick>
 8001c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c62:	e008      	b.n	8001c76 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c64:	f7fe fe26 	bl	80008b4 <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	2b64      	cmp	r3, #100	; 0x64
 8001c70:	d901      	bls.n	8001c76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e1f3      	b.n	800205e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c76:	4b51      	ldr	r3, [pc, #324]	; (8001dbc <HAL_RCC_OscConfig+0x240>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d1f0      	bne.n	8001c64 <HAL_RCC_OscConfig+0xe8>
 8001c82:	e000      	b.n	8001c86 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0302 	and.w	r3, r3, #2
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d063      	beq.n	8001d5a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c92:	4b4a      	ldr	r3, [pc, #296]	; (8001dbc <HAL_RCC_OscConfig+0x240>)
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	f003 030c 	and.w	r3, r3, #12
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d00b      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c9e:	4b47      	ldr	r3, [pc, #284]	; (8001dbc <HAL_RCC_OscConfig+0x240>)
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ca6:	2b08      	cmp	r3, #8
 8001ca8:	d11c      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001caa:	4b44      	ldr	r3, [pc, #272]	; (8001dbc <HAL_RCC_OscConfig+0x240>)
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d116      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cb6:	4b41      	ldr	r3, [pc, #260]	; (8001dbc <HAL_RCC_OscConfig+0x240>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0302 	and.w	r3, r3, #2
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d005      	beq.n	8001cce <HAL_RCC_OscConfig+0x152>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d001      	beq.n	8001cce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e1c7      	b.n	800205e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cce:	4b3b      	ldr	r3, [pc, #236]	; (8001dbc <HAL_RCC_OscConfig+0x240>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	691b      	ldr	r3, [r3, #16]
 8001cda:	00db      	lsls	r3, r3, #3
 8001cdc:	4937      	ldr	r1, [pc, #220]	; (8001dbc <HAL_RCC_OscConfig+0x240>)
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ce2:	e03a      	b.n	8001d5a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d020      	beq.n	8001d2e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cec:	4b34      	ldr	r3, [pc, #208]	; (8001dc0 <HAL_RCC_OscConfig+0x244>)
 8001cee:	2201      	movs	r2, #1
 8001cf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf2:	f7fe fddf 	bl	80008b4 <HAL_GetTick>
 8001cf6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cf8:	e008      	b.n	8001d0c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cfa:	f7fe fddb 	bl	80008b4 <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d901      	bls.n	8001d0c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e1a8      	b.n	800205e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d0c:	4b2b      	ldr	r3, [pc, #172]	; (8001dbc <HAL_RCC_OscConfig+0x240>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0302 	and.w	r3, r3, #2
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d0f0      	beq.n	8001cfa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d18:	4b28      	ldr	r3, [pc, #160]	; (8001dbc <HAL_RCC_OscConfig+0x240>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	691b      	ldr	r3, [r3, #16]
 8001d24:	00db      	lsls	r3, r3, #3
 8001d26:	4925      	ldr	r1, [pc, #148]	; (8001dbc <HAL_RCC_OscConfig+0x240>)
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	600b      	str	r3, [r1, #0]
 8001d2c:	e015      	b.n	8001d5a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d2e:	4b24      	ldr	r3, [pc, #144]	; (8001dc0 <HAL_RCC_OscConfig+0x244>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d34:	f7fe fdbe 	bl	80008b4 <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d3a:	e008      	b.n	8001d4e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d3c:	f7fe fdba 	bl	80008b4 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e187      	b.n	800205e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d4e:	4b1b      	ldr	r3, [pc, #108]	; (8001dbc <HAL_RCC_OscConfig+0x240>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0302 	and.w	r3, r3, #2
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d1f0      	bne.n	8001d3c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0308 	and.w	r3, r3, #8
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d036      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	695b      	ldr	r3, [r3, #20]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d016      	beq.n	8001d9c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d6e:	4b15      	ldr	r3, [pc, #84]	; (8001dc4 <HAL_RCC_OscConfig+0x248>)
 8001d70:	2201      	movs	r2, #1
 8001d72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d74:	f7fe fd9e 	bl	80008b4 <HAL_GetTick>
 8001d78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d7a:	e008      	b.n	8001d8e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d7c:	f7fe fd9a 	bl	80008b4 <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d901      	bls.n	8001d8e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e167      	b.n	800205e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d8e:	4b0b      	ldr	r3, [pc, #44]	; (8001dbc <HAL_RCC_OscConfig+0x240>)
 8001d90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d92:	f003 0302 	and.w	r3, r3, #2
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d0f0      	beq.n	8001d7c <HAL_RCC_OscConfig+0x200>
 8001d9a:	e01b      	b.n	8001dd4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d9c:	4b09      	ldr	r3, [pc, #36]	; (8001dc4 <HAL_RCC_OscConfig+0x248>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001da2:	f7fe fd87 	bl	80008b4 <HAL_GetTick>
 8001da6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001da8:	e00e      	b.n	8001dc8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001daa:	f7fe fd83 	bl	80008b4 <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d907      	bls.n	8001dc8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	e150      	b.n	800205e <HAL_RCC_OscConfig+0x4e2>
 8001dbc:	40023800 	.word	0x40023800
 8001dc0:	42470000 	.word	0x42470000
 8001dc4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dc8:	4b88      	ldr	r3, [pc, #544]	; (8001fec <HAL_RCC_OscConfig+0x470>)
 8001dca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dcc:	f003 0302 	and.w	r3, r3, #2
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d1ea      	bne.n	8001daa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0304 	and.w	r3, r3, #4
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	f000 8097 	beq.w	8001f10 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001de2:	2300      	movs	r3, #0
 8001de4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001de6:	4b81      	ldr	r3, [pc, #516]	; (8001fec <HAL_RCC_OscConfig+0x470>)
 8001de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d10f      	bne.n	8001e12 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	60bb      	str	r3, [r7, #8]
 8001df6:	4b7d      	ldr	r3, [pc, #500]	; (8001fec <HAL_RCC_OscConfig+0x470>)
 8001df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfa:	4a7c      	ldr	r2, [pc, #496]	; (8001fec <HAL_RCC_OscConfig+0x470>)
 8001dfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e00:	6413      	str	r3, [r2, #64]	; 0x40
 8001e02:	4b7a      	ldr	r3, [pc, #488]	; (8001fec <HAL_RCC_OscConfig+0x470>)
 8001e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e0a:	60bb      	str	r3, [r7, #8]
 8001e0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e12:	4b77      	ldr	r3, [pc, #476]	; (8001ff0 <HAL_RCC_OscConfig+0x474>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d118      	bne.n	8001e50 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e1e:	4b74      	ldr	r3, [pc, #464]	; (8001ff0 <HAL_RCC_OscConfig+0x474>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a73      	ldr	r2, [pc, #460]	; (8001ff0 <HAL_RCC_OscConfig+0x474>)
 8001e24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e2a:	f7fe fd43 	bl	80008b4 <HAL_GetTick>
 8001e2e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e30:	e008      	b.n	8001e44 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e32:	f7fe fd3f 	bl	80008b4 <HAL_GetTick>
 8001e36:	4602      	mov	r2, r0
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d901      	bls.n	8001e44 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	e10c      	b.n	800205e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e44:	4b6a      	ldr	r3, [pc, #424]	; (8001ff0 <HAL_RCC_OscConfig+0x474>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d0f0      	beq.n	8001e32 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d106      	bne.n	8001e66 <HAL_RCC_OscConfig+0x2ea>
 8001e58:	4b64      	ldr	r3, [pc, #400]	; (8001fec <HAL_RCC_OscConfig+0x470>)
 8001e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e5c:	4a63      	ldr	r2, [pc, #396]	; (8001fec <HAL_RCC_OscConfig+0x470>)
 8001e5e:	f043 0301 	orr.w	r3, r3, #1
 8001e62:	6713      	str	r3, [r2, #112]	; 0x70
 8001e64:	e01c      	b.n	8001ea0 <HAL_RCC_OscConfig+0x324>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	2b05      	cmp	r3, #5
 8001e6c:	d10c      	bne.n	8001e88 <HAL_RCC_OscConfig+0x30c>
 8001e6e:	4b5f      	ldr	r3, [pc, #380]	; (8001fec <HAL_RCC_OscConfig+0x470>)
 8001e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e72:	4a5e      	ldr	r2, [pc, #376]	; (8001fec <HAL_RCC_OscConfig+0x470>)
 8001e74:	f043 0304 	orr.w	r3, r3, #4
 8001e78:	6713      	str	r3, [r2, #112]	; 0x70
 8001e7a:	4b5c      	ldr	r3, [pc, #368]	; (8001fec <HAL_RCC_OscConfig+0x470>)
 8001e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e7e:	4a5b      	ldr	r2, [pc, #364]	; (8001fec <HAL_RCC_OscConfig+0x470>)
 8001e80:	f043 0301 	orr.w	r3, r3, #1
 8001e84:	6713      	str	r3, [r2, #112]	; 0x70
 8001e86:	e00b      	b.n	8001ea0 <HAL_RCC_OscConfig+0x324>
 8001e88:	4b58      	ldr	r3, [pc, #352]	; (8001fec <HAL_RCC_OscConfig+0x470>)
 8001e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e8c:	4a57      	ldr	r2, [pc, #348]	; (8001fec <HAL_RCC_OscConfig+0x470>)
 8001e8e:	f023 0301 	bic.w	r3, r3, #1
 8001e92:	6713      	str	r3, [r2, #112]	; 0x70
 8001e94:	4b55      	ldr	r3, [pc, #340]	; (8001fec <HAL_RCC_OscConfig+0x470>)
 8001e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e98:	4a54      	ldr	r2, [pc, #336]	; (8001fec <HAL_RCC_OscConfig+0x470>)
 8001e9a:	f023 0304 	bic.w	r3, r3, #4
 8001e9e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d015      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ea8:	f7fe fd04 	bl	80008b4 <HAL_GetTick>
 8001eac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eae:	e00a      	b.n	8001ec6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001eb0:	f7fe fd00 	bl	80008b4 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e0cb      	b.n	800205e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ec6:	4b49      	ldr	r3, [pc, #292]	; (8001fec <HAL_RCC_OscConfig+0x470>)
 8001ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d0ee      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x334>
 8001ed2:	e014      	b.n	8001efe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ed4:	f7fe fcee 	bl	80008b4 <HAL_GetTick>
 8001ed8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eda:	e00a      	b.n	8001ef2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001edc:	f7fe fcea 	bl	80008b4 <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e0b5      	b.n	800205e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ef2:	4b3e      	ldr	r3, [pc, #248]	; (8001fec <HAL_RCC_OscConfig+0x470>)
 8001ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ef6:	f003 0302 	and.w	r3, r3, #2
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d1ee      	bne.n	8001edc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001efe:	7dfb      	ldrb	r3, [r7, #23]
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d105      	bne.n	8001f10 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f04:	4b39      	ldr	r3, [pc, #228]	; (8001fec <HAL_RCC_OscConfig+0x470>)
 8001f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f08:	4a38      	ldr	r2, [pc, #224]	; (8001fec <HAL_RCC_OscConfig+0x470>)
 8001f0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f0e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	699b      	ldr	r3, [r3, #24]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	f000 80a1 	beq.w	800205c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f1a:	4b34      	ldr	r3, [pc, #208]	; (8001fec <HAL_RCC_OscConfig+0x470>)
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	f003 030c 	and.w	r3, r3, #12
 8001f22:	2b08      	cmp	r3, #8
 8001f24:	d05c      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	699b      	ldr	r3, [r3, #24]
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d141      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f2e:	4b31      	ldr	r3, [pc, #196]	; (8001ff4 <HAL_RCC_OscConfig+0x478>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f34:	f7fe fcbe 	bl	80008b4 <HAL_GetTick>
 8001f38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f3a:	e008      	b.n	8001f4e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f3c:	f7fe fcba 	bl	80008b4 <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d901      	bls.n	8001f4e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e087      	b.n	800205e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f4e:	4b27      	ldr	r3, [pc, #156]	; (8001fec <HAL_RCC_OscConfig+0x470>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d1f0      	bne.n	8001f3c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	69da      	ldr	r2, [r3, #28]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a1b      	ldr	r3, [r3, #32]
 8001f62:	431a      	orrs	r2, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f68:	019b      	lsls	r3, r3, #6
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f70:	085b      	lsrs	r3, r3, #1
 8001f72:	3b01      	subs	r3, #1
 8001f74:	041b      	lsls	r3, r3, #16
 8001f76:	431a      	orrs	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f7c:	061b      	lsls	r3, r3, #24
 8001f7e:	491b      	ldr	r1, [pc, #108]	; (8001fec <HAL_RCC_OscConfig+0x470>)
 8001f80:	4313      	orrs	r3, r2
 8001f82:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f84:	4b1b      	ldr	r3, [pc, #108]	; (8001ff4 <HAL_RCC_OscConfig+0x478>)
 8001f86:	2201      	movs	r2, #1
 8001f88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f8a:	f7fe fc93 	bl	80008b4 <HAL_GetTick>
 8001f8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f90:	e008      	b.n	8001fa4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f92:	f7fe fc8f 	bl	80008b4 <HAL_GetTick>
 8001f96:	4602      	mov	r2, r0
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d901      	bls.n	8001fa4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e05c      	b.n	800205e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fa4:	4b11      	ldr	r3, [pc, #68]	; (8001fec <HAL_RCC_OscConfig+0x470>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d0f0      	beq.n	8001f92 <HAL_RCC_OscConfig+0x416>
 8001fb0:	e054      	b.n	800205c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fb2:	4b10      	ldr	r3, [pc, #64]	; (8001ff4 <HAL_RCC_OscConfig+0x478>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb8:	f7fe fc7c 	bl	80008b4 <HAL_GetTick>
 8001fbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fbe:	e008      	b.n	8001fd2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fc0:	f7fe fc78 	bl	80008b4 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e045      	b.n	800205e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fd2:	4b06      	ldr	r3, [pc, #24]	; (8001fec <HAL_RCC_OscConfig+0x470>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d1f0      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x444>
 8001fde:	e03d      	b.n	800205c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d107      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e038      	b.n	800205e <HAL_RCC_OscConfig+0x4e2>
 8001fec:	40023800 	.word	0x40023800
 8001ff0:	40007000 	.word	0x40007000
 8001ff4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ff8:	4b1b      	ldr	r3, [pc, #108]	; (8002068 <HAL_RCC_OscConfig+0x4ec>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	699b      	ldr	r3, [r3, #24]
 8002002:	2b01      	cmp	r3, #1
 8002004:	d028      	beq.n	8002058 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002010:	429a      	cmp	r2, r3
 8002012:	d121      	bne.n	8002058 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800201e:	429a      	cmp	r2, r3
 8002020:	d11a      	bne.n	8002058 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002022:	68fa      	ldr	r2, [r7, #12]
 8002024:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002028:	4013      	ands	r3, r2
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800202e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002030:	4293      	cmp	r3, r2
 8002032:	d111      	bne.n	8002058 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800203e:	085b      	lsrs	r3, r3, #1
 8002040:	3b01      	subs	r3, #1
 8002042:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002044:	429a      	cmp	r2, r3
 8002046:	d107      	bne.n	8002058 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002052:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002054:	429a      	cmp	r2, r3
 8002056:	d001      	beq.n	800205c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e000      	b.n	800205e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3718      	adds	r7, #24
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	40023800 	.word	0x40023800

0800206c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d101      	bne.n	8002080 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e0cc      	b.n	800221a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002080:	4b68      	ldr	r3, [pc, #416]	; (8002224 <HAL_RCC_ClockConfig+0x1b8>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0307 	and.w	r3, r3, #7
 8002088:	683a      	ldr	r2, [r7, #0]
 800208a:	429a      	cmp	r2, r3
 800208c:	d90c      	bls.n	80020a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800208e:	4b65      	ldr	r3, [pc, #404]	; (8002224 <HAL_RCC_ClockConfig+0x1b8>)
 8002090:	683a      	ldr	r2, [r7, #0]
 8002092:	b2d2      	uxtb	r2, r2
 8002094:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002096:	4b63      	ldr	r3, [pc, #396]	; (8002224 <HAL_RCC_ClockConfig+0x1b8>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0307 	and.w	r3, r3, #7
 800209e:	683a      	ldr	r2, [r7, #0]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d001      	beq.n	80020a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e0b8      	b.n	800221a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0302 	and.w	r3, r3, #2
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d020      	beq.n	80020f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0304 	and.w	r3, r3, #4
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d005      	beq.n	80020cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020c0:	4b59      	ldr	r3, [pc, #356]	; (8002228 <HAL_RCC_ClockConfig+0x1bc>)
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	4a58      	ldr	r2, [pc, #352]	; (8002228 <HAL_RCC_ClockConfig+0x1bc>)
 80020c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80020ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0308 	and.w	r3, r3, #8
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d005      	beq.n	80020e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020d8:	4b53      	ldr	r3, [pc, #332]	; (8002228 <HAL_RCC_ClockConfig+0x1bc>)
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	4a52      	ldr	r2, [pc, #328]	; (8002228 <HAL_RCC_ClockConfig+0x1bc>)
 80020de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80020e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020e4:	4b50      	ldr	r3, [pc, #320]	; (8002228 <HAL_RCC_ClockConfig+0x1bc>)
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	494d      	ldr	r1, [pc, #308]	; (8002228 <HAL_RCC_ClockConfig+0x1bc>)
 80020f2:	4313      	orrs	r3, r2
 80020f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0301 	and.w	r3, r3, #1
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d044      	beq.n	800218c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	2b01      	cmp	r3, #1
 8002108:	d107      	bne.n	800211a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800210a:	4b47      	ldr	r3, [pc, #284]	; (8002228 <HAL_RCC_ClockConfig+0x1bc>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d119      	bne.n	800214a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e07f      	b.n	800221a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	2b02      	cmp	r3, #2
 8002120:	d003      	beq.n	800212a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002126:	2b03      	cmp	r3, #3
 8002128:	d107      	bne.n	800213a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800212a:	4b3f      	ldr	r3, [pc, #252]	; (8002228 <HAL_RCC_ClockConfig+0x1bc>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d109      	bne.n	800214a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e06f      	b.n	800221a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800213a:	4b3b      	ldr	r3, [pc, #236]	; (8002228 <HAL_RCC_ClockConfig+0x1bc>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	2b00      	cmp	r3, #0
 8002144:	d101      	bne.n	800214a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e067      	b.n	800221a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800214a:	4b37      	ldr	r3, [pc, #220]	; (8002228 <HAL_RCC_ClockConfig+0x1bc>)
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	f023 0203 	bic.w	r2, r3, #3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	4934      	ldr	r1, [pc, #208]	; (8002228 <HAL_RCC_ClockConfig+0x1bc>)
 8002158:	4313      	orrs	r3, r2
 800215a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800215c:	f7fe fbaa 	bl	80008b4 <HAL_GetTick>
 8002160:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002162:	e00a      	b.n	800217a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002164:	f7fe fba6 	bl	80008b4 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002172:	4293      	cmp	r3, r2
 8002174:	d901      	bls.n	800217a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e04f      	b.n	800221a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800217a:	4b2b      	ldr	r3, [pc, #172]	; (8002228 <HAL_RCC_ClockConfig+0x1bc>)
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f003 020c 	and.w	r2, r3, #12
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	429a      	cmp	r2, r3
 800218a:	d1eb      	bne.n	8002164 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800218c:	4b25      	ldr	r3, [pc, #148]	; (8002224 <HAL_RCC_ClockConfig+0x1b8>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0307 	and.w	r3, r3, #7
 8002194:	683a      	ldr	r2, [r7, #0]
 8002196:	429a      	cmp	r2, r3
 8002198:	d20c      	bcs.n	80021b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800219a:	4b22      	ldr	r3, [pc, #136]	; (8002224 <HAL_RCC_ClockConfig+0x1b8>)
 800219c:	683a      	ldr	r2, [r7, #0]
 800219e:	b2d2      	uxtb	r2, r2
 80021a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021a2:	4b20      	ldr	r3, [pc, #128]	; (8002224 <HAL_RCC_ClockConfig+0x1b8>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0307 	and.w	r3, r3, #7
 80021aa:	683a      	ldr	r2, [r7, #0]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d001      	beq.n	80021b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e032      	b.n	800221a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0304 	and.w	r3, r3, #4
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d008      	beq.n	80021d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021c0:	4b19      	ldr	r3, [pc, #100]	; (8002228 <HAL_RCC_ClockConfig+0x1bc>)
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	4916      	ldr	r1, [pc, #88]	; (8002228 <HAL_RCC_ClockConfig+0x1bc>)
 80021ce:	4313      	orrs	r3, r2
 80021d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0308 	and.w	r3, r3, #8
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d009      	beq.n	80021f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021de:	4b12      	ldr	r3, [pc, #72]	; (8002228 <HAL_RCC_ClockConfig+0x1bc>)
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	00db      	lsls	r3, r3, #3
 80021ec:	490e      	ldr	r1, [pc, #56]	; (8002228 <HAL_RCC_ClockConfig+0x1bc>)
 80021ee:	4313      	orrs	r3, r2
 80021f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021f2:	f000 f821 	bl	8002238 <HAL_RCC_GetSysClockFreq>
 80021f6:	4602      	mov	r2, r0
 80021f8:	4b0b      	ldr	r3, [pc, #44]	; (8002228 <HAL_RCC_ClockConfig+0x1bc>)
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	091b      	lsrs	r3, r3, #4
 80021fe:	f003 030f 	and.w	r3, r3, #15
 8002202:	490a      	ldr	r1, [pc, #40]	; (800222c <HAL_RCC_ClockConfig+0x1c0>)
 8002204:	5ccb      	ldrb	r3, [r1, r3]
 8002206:	fa22 f303 	lsr.w	r3, r2, r3
 800220a:	4a09      	ldr	r2, [pc, #36]	; (8002230 <HAL_RCC_ClockConfig+0x1c4>)
 800220c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800220e:	4b09      	ldr	r3, [pc, #36]	; (8002234 <HAL_RCC_ClockConfig+0x1c8>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4618      	mov	r0, r3
 8002214:	f7fe fb0a 	bl	800082c <HAL_InitTick>

  return HAL_OK;
 8002218:	2300      	movs	r3, #0
}
 800221a:	4618      	mov	r0, r3
 800221c:	3710      	adds	r7, #16
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	40023c00 	.word	0x40023c00
 8002228:	40023800 	.word	0x40023800
 800222c:	08004d40 	.word	0x08004d40
 8002230:	20000000 	.word	0x20000000
 8002234:	20000004 	.word	0x20000004

08002238 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002238:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800223c:	b094      	sub	sp, #80	; 0x50
 800223e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002240:	2300      	movs	r3, #0
 8002242:	647b      	str	r3, [r7, #68]	; 0x44
 8002244:	2300      	movs	r3, #0
 8002246:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002248:	2300      	movs	r3, #0
 800224a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800224c:	2300      	movs	r3, #0
 800224e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002250:	4b79      	ldr	r3, [pc, #484]	; (8002438 <HAL_RCC_GetSysClockFreq+0x200>)
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	f003 030c 	and.w	r3, r3, #12
 8002258:	2b08      	cmp	r3, #8
 800225a:	d00d      	beq.n	8002278 <HAL_RCC_GetSysClockFreq+0x40>
 800225c:	2b08      	cmp	r3, #8
 800225e:	f200 80e1 	bhi.w	8002424 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002262:	2b00      	cmp	r3, #0
 8002264:	d002      	beq.n	800226c <HAL_RCC_GetSysClockFreq+0x34>
 8002266:	2b04      	cmp	r3, #4
 8002268:	d003      	beq.n	8002272 <HAL_RCC_GetSysClockFreq+0x3a>
 800226a:	e0db      	b.n	8002424 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800226c:	4b73      	ldr	r3, [pc, #460]	; (800243c <HAL_RCC_GetSysClockFreq+0x204>)
 800226e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002270:	e0db      	b.n	800242a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002272:	4b73      	ldr	r3, [pc, #460]	; (8002440 <HAL_RCC_GetSysClockFreq+0x208>)
 8002274:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002276:	e0d8      	b.n	800242a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002278:	4b6f      	ldr	r3, [pc, #444]	; (8002438 <HAL_RCC_GetSysClockFreq+0x200>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002280:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002282:	4b6d      	ldr	r3, [pc, #436]	; (8002438 <HAL_RCC_GetSysClockFreq+0x200>)
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d063      	beq.n	8002356 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800228e:	4b6a      	ldr	r3, [pc, #424]	; (8002438 <HAL_RCC_GetSysClockFreq+0x200>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	099b      	lsrs	r3, r3, #6
 8002294:	2200      	movs	r2, #0
 8002296:	63bb      	str	r3, [r7, #56]	; 0x38
 8002298:	63fa      	str	r2, [r7, #60]	; 0x3c
 800229a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800229c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022a0:	633b      	str	r3, [r7, #48]	; 0x30
 80022a2:	2300      	movs	r3, #0
 80022a4:	637b      	str	r3, [r7, #52]	; 0x34
 80022a6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80022aa:	4622      	mov	r2, r4
 80022ac:	462b      	mov	r3, r5
 80022ae:	f04f 0000 	mov.w	r0, #0
 80022b2:	f04f 0100 	mov.w	r1, #0
 80022b6:	0159      	lsls	r1, r3, #5
 80022b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022bc:	0150      	lsls	r0, r2, #5
 80022be:	4602      	mov	r2, r0
 80022c0:	460b      	mov	r3, r1
 80022c2:	4621      	mov	r1, r4
 80022c4:	1a51      	subs	r1, r2, r1
 80022c6:	6139      	str	r1, [r7, #16]
 80022c8:	4629      	mov	r1, r5
 80022ca:	eb63 0301 	sbc.w	r3, r3, r1
 80022ce:	617b      	str	r3, [r7, #20]
 80022d0:	f04f 0200 	mov.w	r2, #0
 80022d4:	f04f 0300 	mov.w	r3, #0
 80022d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80022dc:	4659      	mov	r1, fp
 80022de:	018b      	lsls	r3, r1, #6
 80022e0:	4651      	mov	r1, sl
 80022e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022e6:	4651      	mov	r1, sl
 80022e8:	018a      	lsls	r2, r1, #6
 80022ea:	4651      	mov	r1, sl
 80022ec:	ebb2 0801 	subs.w	r8, r2, r1
 80022f0:	4659      	mov	r1, fp
 80022f2:	eb63 0901 	sbc.w	r9, r3, r1
 80022f6:	f04f 0200 	mov.w	r2, #0
 80022fa:	f04f 0300 	mov.w	r3, #0
 80022fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002302:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002306:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800230a:	4690      	mov	r8, r2
 800230c:	4699      	mov	r9, r3
 800230e:	4623      	mov	r3, r4
 8002310:	eb18 0303 	adds.w	r3, r8, r3
 8002314:	60bb      	str	r3, [r7, #8]
 8002316:	462b      	mov	r3, r5
 8002318:	eb49 0303 	adc.w	r3, r9, r3
 800231c:	60fb      	str	r3, [r7, #12]
 800231e:	f04f 0200 	mov.w	r2, #0
 8002322:	f04f 0300 	mov.w	r3, #0
 8002326:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800232a:	4629      	mov	r1, r5
 800232c:	024b      	lsls	r3, r1, #9
 800232e:	4621      	mov	r1, r4
 8002330:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002334:	4621      	mov	r1, r4
 8002336:	024a      	lsls	r2, r1, #9
 8002338:	4610      	mov	r0, r2
 800233a:	4619      	mov	r1, r3
 800233c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800233e:	2200      	movs	r2, #0
 8002340:	62bb      	str	r3, [r7, #40]	; 0x28
 8002342:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002344:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002348:	f7fd ff3e 	bl	80001c8 <__aeabi_uldivmod>
 800234c:	4602      	mov	r2, r0
 800234e:	460b      	mov	r3, r1
 8002350:	4613      	mov	r3, r2
 8002352:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002354:	e058      	b.n	8002408 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002356:	4b38      	ldr	r3, [pc, #224]	; (8002438 <HAL_RCC_GetSysClockFreq+0x200>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	099b      	lsrs	r3, r3, #6
 800235c:	2200      	movs	r2, #0
 800235e:	4618      	mov	r0, r3
 8002360:	4611      	mov	r1, r2
 8002362:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002366:	623b      	str	r3, [r7, #32]
 8002368:	2300      	movs	r3, #0
 800236a:	627b      	str	r3, [r7, #36]	; 0x24
 800236c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002370:	4642      	mov	r2, r8
 8002372:	464b      	mov	r3, r9
 8002374:	f04f 0000 	mov.w	r0, #0
 8002378:	f04f 0100 	mov.w	r1, #0
 800237c:	0159      	lsls	r1, r3, #5
 800237e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002382:	0150      	lsls	r0, r2, #5
 8002384:	4602      	mov	r2, r0
 8002386:	460b      	mov	r3, r1
 8002388:	4641      	mov	r1, r8
 800238a:	ebb2 0a01 	subs.w	sl, r2, r1
 800238e:	4649      	mov	r1, r9
 8002390:	eb63 0b01 	sbc.w	fp, r3, r1
 8002394:	f04f 0200 	mov.w	r2, #0
 8002398:	f04f 0300 	mov.w	r3, #0
 800239c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80023a0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80023a4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80023a8:	ebb2 040a 	subs.w	r4, r2, sl
 80023ac:	eb63 050b 	sbc.w	r5, r3, fp
 80023b0:	f04f 0200 	mov.w	r2, #0
 80023b4:	f04f 0300 	mov.w	r3, #0
 80023b8:	00eb      	lsls	r3, r5, #3
 80023ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80023be:	00e2      	lsls	r2, r4, #3
 80023c0:	4614      	mov	r4, r2
 80023c2:	461d      	mov	r5, r3
 80023c4:	4643      	mov	r3, r8
 80023c6:	18e3      	adds	r3, r4, r3
 80023c8:	603b      	str	r3, [r7, #0]
 80023ca:	464b      	mov	r3, r9
 80023cc:	eb45 0303 	adc.w	r3, r5, r3
 80023d0:	607b      	str	r3, [r7, #4]
 80023d2:	f04f 0200 	mov.w	r2, #0
 80023d6:	f04f 0300 	mov.w	r3, #0
 80023da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80023de:	4629      	mov	r1, r5
 80023e0:	028b      	lsls	r3, r1, #10
 80023e2:	4621      	mov	r1, r4
 80023e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023e8:	4621      	mov	r1, r4
 80023ea:	028a      	lsls	r2, r1, #10
 80023ec:	4610      	mov	r0, r2
 80023ee:	4619      	mov	r1, r3
 80023f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023f2:	2200      	movs	r2, #0
 80023f4:	61bb      	str	r3, [r7, #24]
 80023f6:	61fa      	str	r2, [r7, #28]
 80023f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023fc:	f7fd fee4 	bl	80001c8 <__aeabi_uldivmod>
 8002400:	4602      	mov	r2, r0
 8002402:	460b      	mov	r3, r1
 8002404:	4613      	mov	r3, r2
 8002406:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002408:	4b0b      	ldr	r3, [pc, #44]	; (8002438 <HAL_RCC_GetSysClockFreq+0x200>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	0c1b      	lsrs	r3, r3, #16
 800240e:	f003 0303 	and.w	r3, r3, #3
 8002412:	3301      	adds	r3, #1
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002418:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800241a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800241c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002420:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002422:	e002      	b.n	800242a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002424:	4b05      	ldr	r3, [pc, #20]	; (800243c <HAL_RCC_GetSysClockFreq+0x204>)
 8002426:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002428:	bf00      	nop
    }
  }
  return sysclockfreq;
 800242a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800242c:	4618      	mov	r0, r3
 800242e:	3750      	adds	r7, #80	; 0x50
 8002430:	46bd      	mov	sp, r7
 8002432:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002436:	bf00      	nop
 8002438:	40023800 	.word	0x40023800
 800243c:	00f42400 	.word	0x00f42400
 8002440:	007a1200 	.word	0x007a1200

08002444 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002448:	4b03      	ldr	r3, [pc, #12]	; (8002458 <HAL_RCC_GetHCLKFreq+0x14>)
 800244a:	681b      	ldr	r3, [r3, #0]
}
 800244c:	4618      	mov	r0, r3
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	20000000 	.word	0x20000000

0800245c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800245c:	b480      	push	{r7}
 800245e:	b087      	sub	sp, #28
 8002460:	af00      	add	r7, sp, #0
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	60b9      	str	r1, [r7, #8]
 8002466:	4613      	mov	r3, r2
 8002468:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800246a:	79fb      	ldrb	r3, [r7, #7]
 800246c:	2b02      	cmp	r3, #2
 800246e:	d165      	bne.n	800253c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	4a41      	ldr	r2, [pc, #260]	; (8002578 <USB_SetTurnaroundTime+0x11c>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d906      	bls.n	8002486 <USB_SetTurnaroundTime+0x2a>
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	4a40      	ldr	r2, [pc, #256]	; (800257c <USB_SetTurnaroundTime+0x120>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d202      	bcs.n	8002486 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002480:	230f      	movs	r3, #15
 8002482:	617b      	str	r3, [r7, #20]
 8002484:	e062      	b.n	800254c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	4a3c      	ldr	r2, [pc, #240]	; (800257c <USB_SetTurnaroundTime+0x120>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d306      	bcc.n	800249c <USB_SetTurnaroundTime+0x40>
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	4a3b      	ldr	r2, [pc, #236]	; (8002580 <USB_SetTurnaroundTime+0x124>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d202      	bcs.n	800249c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002496:	230e      	movs	r3, #14
 8002498:	617b      	str	r3, [r7, #20]
 800249a:	e057      	b.n	800254c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	4a38      	ldr	r2, [pc, #224]	; (8002580 <USB_SetTurnaroundTime+0x124>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d306      	bcc.n	80024b2 <USB_SetTurnaroundTime+0x56>
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	4a37      	ldr	r2, [pc, #220]	; (8002584 <USB_SetTurnaroundTime+0x128>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d202      	bcs.n	80024b2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80024ac:	230d      	movs	r3, #13
 80024ae:	617b      	str	r3, [r7, #20]
 80024b0:	e04c      	b.n	800254c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	4a33      	ldr	r2, [pc, #204]	; (8002584 <USB_SetTurnaroundTime+0x128>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d306      	bcc.n	80024c8 <USB_SetTurnaroundTime+0x6c>
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	4a32      	ldr	r2, [pc, #200]	; (8002588 <USB_SetTurnaroundTime+0x12c>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d802      	bhi.n	80024c8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80024c2:	230c      	movs	r3, #12
 80024c4:	617b      	str	r3, [r7, #20]
 80024c6:	e041      	b.n	800254c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	4a2f      	ldr	r2, [pc, #188]	; (8002588 <USB_SetTurnaroundTime+0x12c>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d906      	bls.n	80024de <USB_SetTurnaroundTime+0x82>
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	4a2e      	ldr	r2, [pc, #184]	; (800258c <USB_SetTurnaroundTime+0x130>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d802      	bhi.n	80024de <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80024d8:	230b      	movs	r3, #11
 80024da:	617b      	str	r3, [r7, #20]
 80024dc:	e036      	b.n	800254c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	4a2a      	ldr	r2, [pc, #168]	; (800258c <USB_SetTurnaroundTime+0x130>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d906      	bls.n	80024f4 <USB_SetTurnaroundTime+0x98>
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	4a29      	ldr	r2, [pc, #164]	; (8002590 <USB_SetTurnaroundTime+0x134>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d802      	bhi.n	80024f4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80024ee:	230a      	movs	r3, #10
 80024f0:	617b      	str	r3, [r7, #20]
 80024f2:	e02b      	b.n	800254c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	4a26      	ldr	r2, [pc, #152]	; (8002590 <USB_SetTurnaroundTime+0x134>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d906      	bls.n	800250a <USB_SetTurnaroundTime+0xae>
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	4a25      	ldr	r2, [pc, #148]	; (8002594 <USB_SetTurnaroundTime+0x138>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d202      	bcs.n	800250a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002504:	2309      	movs	r3, #9
 8002506:	617b      	str	r3, [r7, #20]
 8002508:	e020      	b.n	800254c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	4a21      	ldr	r2, [pc, #132]	; (8002594 <USB_SetTurnaroundTime+0x138>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d306      	bcc.n	8002520 <USB_SetTurnaroundTime+0xc4>
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	4a20      	ldr	r2, [pc, #128]	; (8002598 <USB_SetTurnaroundTime+0x13c>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d802      	bhi.n	8002520 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800251a:	2308      	movs	r3, #8
 800251c:	617b      	str	r3, [r7, #20]
 800251e:	e015      	b.n	800254c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	4a1d      	ldr	r2, [pc, #116]	; (8002598 <USB_SetTurnaroundTime+0x13c>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d906      	bls.n	8002536 <USB_SetTurnaroundTime+0xda>
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	4a1c      	ldr	r2, [pc, #112]	; (800259c <USB_SetTurnaroundTime+0x140>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d202      	bcs.n	8002536 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002530:	2307      	movs	r3, #7
 8002532:	617b      	str	r3, [r7, #20]
 8002534:	e00a      	b.n	800254c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002536:	2306      	movs	r3, #6
 8002538:	617b      	str	r3, [r7, #20]
 800253a:	e007      	b.n	800254c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800253c:	79fb      	ldrb	r3, [r7, #7]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d102      	bne.n	8002548 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002542:	2309      	movs	r3, #9
 8002544:	617b      	str	r3, [r7, #20]
 8002546:	e001      	b.n	800254c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002548:	2309      	movs	r3, #9
 800254a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	68da      	ldr	r2, [r3, #12]
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	029b      	lsls	r3, r3, #10
 8002560:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8002564:	431a      	orrs	r2, r3
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800256a:	2300      	movs	r3, #0
}
 800256c:	4618      	mov	r0, r3
 800256e:	371c      	adds	r7, #28
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr
 8002578:	00d8acbf 	.word	0x00d8acbf
 800257c:	00e4e1c0 	.word	0x00e4e1c0
 8002580:	00f42400 	.word	0x00f42400
 8002584:	01067380 	.word	0x01067380
 8002588:	011a499f 	.word	0x011a499f
 800258c:	01312cff 	.word	0x01312cff
 8002590:	014ca43f 	.word	0x014ca43f
 8002594:	016e3600 	.word	0x016e3600
 8002598:	01a6ab1f 	.word	0x01a6ab1f
 800259c:	01e84800 	.word	0x01e84800

080025a0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b085      	sub	sp, #20
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80025aa:	2300      	movs	r3, #0
 80025ac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	3301      	adds	r3, #1
 80025b2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	4a13      	ldr	r2, [pc, #76]	; (8002604 <USB_FlushTxFifo+0x64>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d901      	bls.n	80025c0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e01b      	b.n	80025f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	691b      	ldr	r3, [r3, #16]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	daf2      	bge.n	80025ae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80025c8:	2300      	movs	r3, #0
 80025ca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	019b      	lsls	r3, r3, #6
 80025d0:	f043 0220 	orr.w	r2, r3, #32
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	3301      	adds	r3, #1
 80025dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	4a08      	ldr	r2, [pc, #32]	; (8002604 <USB_FlushTxFifo+0x64>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d901      	bls.n	80025ea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e006      	b.n	80025f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	f003 0320 	and.w	r3, r3, #32
 80025f2:	2b20      	cmp	r3, #32
 80025f4:	d0f0      	beq.n	80025d8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80025f6:	2300      	movs	r3, #0
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3714      	adds	r7, #20
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr
 8002604:	00030d40 	.word	0x00030d40

08002608 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8002608:	b480      	push	{r7}
 800260a:	b087      	sub	sp, #28
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f003 0306 	and.w	r3, r3, #6
 8002620:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d102      	bne.n	800262e <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8002628:	2300      	movs	r3, #0
 800262a:	75fb      	strb	r3, [r7, #23]
 800262c:	e00a      	b.n	8002644 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2b02      	cmp	r3, #2
 8002632:	d002      	beq.n	800263a <USB_GetDevSpeed+0x32>
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2b06      	cmp	r3, #6
 8002638:	d102      	bne.n	8002640 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800263a:	2302      	movs	r3, #2
 800263c:	75fb      	strb	r3, [r7, #23]
 800263e:	e001      	b.n	8002644 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8002640:	230f      	movs	r3, #15
 8002642:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8002644:	7dfb      	ldrb	r3, [r7, #23]
}
 8002646:	4618      	mov	r0, r3
 8002648:	371c      	adds	r7, #28
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr

08002652 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8002652:	b480      	push	{r7}
 8002654:	b085      	sub	sp, #20
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
 800265a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	785b      	ldrb	r3, [r3, #1]
 800266a:	2b01      	cmp	r3, #1
 800266c:	d13a      	bne.n	80026e4 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002674:	69da      	ldr	r2, [r3, #28]
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	f003 030f 	and.w	r3, r3, #15
 800267e:	2101      	movs	r1, #1
 8002680:	fa01 f303 	lsl.w	r3, r1, r3
 8002684:	b29b      	uxth	r3, r3
 8002686:	68f9      	ldr	r1, [r7, #12]
 8002688:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800268c:	4313      	orrs	r3, r2
 800268e:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	015a      	lsls	r2, r3, #5
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	4413      	add	r3, r2
 8002698:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d155      	bne.n	8002752 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	015a      	lsls	r2, r3, #5
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	4413      	add	r3, r2
 80026ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	791b      	ldrb	r3, [r3, #4]
 80026c0:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80026c2:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	059b      	lsls	r3, r3, #22
 80026c8:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80026ca:	4313      	orrs	r3, r2
 80026cc:	68ba      	ldr	r2, [r7, #8]
 80026ce:	0151      	lsls	r1, r2, #5
 80026d0:	68fa      	ldr	r2, [r7, #12]
 80026d2:	440a      	add	r2, r1
 80026d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80026d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026e0:	6013      	str	r3, [r2, #0]
 80026e2:	e036      	b.n	8002752 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026ea:	69da      	ldr	r2, [r3, #28]
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	f003 030f 	and.w	r3, r3, #15
 80026f4:	2101      	movs	r1, #1
 80026f6:	fa01 f303 	lsl.w	r3, r1, r3
 80026fa:	041b      	lsls	r3, r3, #16
 80026fc:	68f9      	ldr	r1, [r7, #12]
 80026fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002702:	4313      	orrs	r3, r2
 8002704:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	015a      	lsls	r2, r3, #5
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	4413      	add	r3, r2
 800270e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d11a      	bne.n	8002752 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	015a      	lsls	r2, r3, #5
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	4413      	add	r3, r2
 8002724:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	791b      	ldrb	r3, [r3, #4]
 8002736:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8002738:	430b      	orrs	r3, r1
 800273a:	4313      	orrs	r3, r2
 800273c:	68ba      	ldr	r2, [r7, #8]
 800273e:	0151      	lsls	r1, r2, #5
 8002740:	68fa      	ldr	r2, [r7, #12]
 8002742:	440a      	add	r2, r1
 8002744:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002748:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800274c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002750:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8002752:	2300      	movs	r3, #0
}
 8002754:	4618      	mov	r0, r3
 8002756:	3714      	adds	r7, #20
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b08a      	sub	sp, #40	; 0x28
 8002764:	af02      	add	r7, sp, #8
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	4613      	mov	r3, r2
 800276c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	785b      	ldrb	r3, [r3, #1]
 800277c:	2b01      	cmp	r3, #1
 800277e:	f040 815c 	bne.w	8002a3a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	699b      	ldr	r3, [r3, #24]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d132      	bne.n	80027f0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	015a      	lsls	r2, r3, #5
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	4413      	add	r3, r2
 8002792:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002796:	691b      	ldr	r3, [r3, #16]
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	0151      	lsls	r1, r2, #5
 800279c:	69fa      	ldr	r2, [r7, #28]
 800279e:	440a      	add	r2, r1
 80027a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80027a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80027a8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80027ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	015a      	lsls	r2, r3, #5
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	4413      	add	r3, r2
 80027b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027ba:	691b      	ldr	r3, [r3, #16]
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	0151      	lsls	r1, r2, #5
 80027c0:	69fa      	ldr	r2, [r7, #28]
 80027c2:	440a      	add	r2, r1
 80027c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80027c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80027cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	015a      	lsls	r2, r3, #5
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	4413      	add	r3, r2
 80027d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027da:	691b      	ldr	r3, [r3, #16]
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	0151      	lsls	r1, r2, #5
 80027e0:	69fa      	ldr	r2, [r7, #28]
 80027e2:	440a      	add	r2, r1
 80027e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80027e8:	0cdb      	lsrs	r3, r3, #19
 80027ea:	04db      	lsls	r3, r3, #19
 80027ec:	6113      	str	r3, [r2, #16]
 80027ee:	e074      	b.n	80028da <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80027f0:	69bb      	ldr	r3, [r7, #24]
 80027f2:	015a      	lsls	r2, r3, #5
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	4413      	add	r3, r2
 80027f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	69ba      	ldr	r2, [r7, #24]
 8002800:	0151      	lsls	r1, r2, #5
 8002802:	69fa      	ldr	r2, [r7, #28]
 8002804:	440a      	add	r2, r1
 8002806:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800280a:	0cdb      	lsrs	r3, r3, #19
 800280c:	04db      	lsls	r3, r3, #19
 800280e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	015a      	lsls	r2, r3, #5
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	4413      	add	r3, r2
 8002818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	69ba      	ldr	r2, [r7, #24]
 8002820:	0151      	lsls	r1, r2, #5
 8002822:	69fa      	ldr	r2, [r7, #28]
 8002824:	440a      	add	r2, r1
 8002826:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800282a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800282e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8002832:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	015a      	lsls	r2, r3, #5
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	4413      	add	r3, r2
 800283c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002840:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	6999      	ldr	r1, [r3, #24]
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	440b      	add	r3, r1
 800284c:	1e59      	subs	r1, r3, #1
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	fbb1 f3f3 	udiv	r3, r1, r3
 8002856:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8002858:	4b9d      	ldr	r3, [pc, #628]	; (8002ad0 <USB_EPStartXfer+0x370>)
 800285a:	400b      	ands	r3, r1
 800285c:	69b9      	ldr	r1, [r7, #24]
 800285e:	0148      	lsls	r0, r1, #5
 8002860:	69f9      	ldr	r1, [r7, #28]
 8002862:	4401      	add	r1, r0
 8002864:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8002868:	4313      	orrs	r3, r2
 800286a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	015a      	lsls	r2, r3, #5
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	4413      	add	r3, r2
 8002874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002878:	691a      	ldr	r2, [r3, #16]
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002882:	69b9      	ldr	r1, [r7, #24]
 8002884:	0148      	lsls	r0, r1, #5
 8002886:	69f9      	ldr	r1, [r7, #28]
 8002888:	4401      	add	r1, r0
 800288a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800288e:	4313      	orrs	r3, r2
 8002890:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	791b      	ldrb	r3, [r3, #4]
 8002896:	2b01      	cmp	r3, #1
 8002898:	d11f      	bne.n	80028da <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	015a      	lsls	r2, r3, #5
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	4413      	add	r3, r2
 80028a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028a6:	691b      	ldr	r3, [r3, #16]
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	0151      	lsls	r1, r2, #5
 80028ac:	69fa      	ldr	r2, [r7, #28]
 80028ae:	440a      	add	r2, r1
 80028b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80028b4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80028b8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	015a      	lsls	r2, r3, #5
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	4413      	add	r3, r2
 80028c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	69ba      	ldr	r2, [r7, #24]
 80028ca:	0151      	lsls	r1, r2, #5
 80028cc:	69fa      	ldr	r2, [r7, #28]
 80028ce:	440a      	add	r2, r1
 80028d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80028d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80028d8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80028da:	79fb      	ldrb	r3, [r7, #7]
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d14b      	bne.n	8002978 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	695b      	ldr	r3, [r3, #20]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d009      	beq.n	80028fc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	015a      	lsls	r2, r3, #5
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	4413      	add	r3, r2
 80028f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028f4:	461a      	mov	r2, r3
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	695b      	ldr	r3, [r3, #20]
 80028fa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	791b      	ldrb	r3, [r3, #4]
 8002900:	2b01      	cmp	r3, #1
 8002902:	d128      	bne.n	8002956 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002910:	2b00      	cmp	r3, #0
 8002912:	d110      	bne.n	8002936 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	015a      	lsls	r2, r3, #5
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	4413      	add	r3, r2
 800291c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	69ba      	ldr	r2, [r7, #24]
 8002924:	0151      	lsls	r1, r2, #5
 8002926:	69fa      	ldr	r2, [r7, #28]
 8002928:	440a      	add	r2, r1
 800292a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800292e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002932:	6013      	str	r3, [r2, #0]
 8002934:	e00f      	b.n	8002956 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	015a      	lsls	r2, r3, #5
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	4413      	add	r3, r2
 800293e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	0151      	lsls	r1, r2, #5
 8002948:	69fa      	ldr	r2, [r7, #28]
 800294a:	440a      	add	r2, r1
 800294c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002950:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002954:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	015a      	lsls	r2, r3, #5
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	4413      	add	r3, r2
 800295e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	69ba      	ldr	r2, [r7, #24]
 8002966:	0151      	lsls	r1, r2, #5
 8002968:	69fa      	ldr	r2, [r7, #28]
 800296a:	440a      	add	r2, r1
 800296c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002970:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8002974:	6013      	str	r3, [r2, #0]
 8002976:	e133      	b.n	8002be0 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	015a      	lsls	r2, r3, #5
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	4413      	add	r3, r2
 8002980:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	69ba      	ldr	r2, [r7, #24]
 8002988:	0151      	lsls	r1, r2, #5
 800298a:	69fa      	ldr	r2, [r7, #28]
 800298c:	440a      	add	r2, r1
 800298e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002992:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8002996:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	791b      	ldrb	r3, [r3, #4]
 800299c:	2b01      	cmp	r3, #1
 800299e:	d015      	beq.n	80029cc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	f000 811b 	beq.w	8002be0 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	f003 030f 	and.w	r3, r3, #15
 80029ba:	2101      	movs	r1, #1
 80029bc:	fa01 f303 	lsl.w	r3, r1, r3
 80029c0:	69f9      	ldr	r1, [r7, #28]
 80029c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80029c6:	4313      	orrs	r3, r2
 80029c8:	634b      	str	r3, [r1, #52]	; 0x34
 80029ca:	e109      	b.n	8002be0 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d110      	bne.n	80029fe <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	015a      	lsls	r2, r3, #5
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	4413      	add	r3, r2
 80029e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	69ba      	ldr	r2, [r7, #24]
 80029ec:	0151      	lsls	r1, r2, #5
 80029ee:	69fa      	ldr	r2, [r7, #28]
 80029f0:	440a      	add	r2, r1
 80029f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80029f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80029fa:	6013      	str	r3, [r2, #0]
 80029fc:	e00f      	b.n	8002a1e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	015a      	lsls	r2, r3, #5
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	4413      	add	r3, r2
 8002a06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	69ba      	ldr	r2, [r7, #24]
 8002a0e:	0151      	lsls	r1, r2, #5
 8002a10:	69fa      	ldr	r2, [r7, #28]
 8002a12:	440a      	add	r2, r1
 8002a14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002a18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a1c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	6919      	ldr	r1, [r3, #16]
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	781a      	ldrb	r2, [r3, #0]
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	b298      	uxth	r0, r3
 8002a2c:	79fb      	ldrb	r3, [r7, #7]
 8002a2e:	9300      	str	r3, [sp, #0]
 8002a30:	4603      	mov	r3, r0
 8002a32:	68f8      	ldr	r0, [r7, #12]
 8002a34:	f000 fade 	bl	8002ff4 <USB_WritePacket>
 8002a38:	e0d2      	b.n	8002be0 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	015a      	lsls	r2, r3, #5
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	4413      	add	r3, r2
 8002a42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a46:	691b      	ldr	r3, [r3, #16]
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	0151      	lsls	r1, r2, #5
 8002a4c:	69fa      	ldr	r2, [r7, #28]
 8002a4e:	440a      	add	r2, r1
 8002a50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002a54:	0cdb      	lsrs	r3, r3, #19
 8002a56:	04db      	lsls	r3, r3, #19
 8002a58:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	015a      	lsls	r2, r3, #5
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	4413      	add	r3, r2
 8002a62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a66:	691b      	ldr	r3, [r3, #16]
 8002a68:	69ba      	ldr	r2, [r7, #24]
 8002a6a:	0151      	lsls	r1, r2, #5
 8002a6c:	69fa      	ldr	r2, [r7, #28]
 8002a6e:	440a      	add	r2, r1
 8002a70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002a74:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8002a78:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8002a7c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	699b      	ldr	r3, [r3, #24]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d126      	bne.n	8002ad4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	015a      	lsls	r2, r3, #5
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	4413      	add	r3, r2
 8002a8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a92:	691a      	ldr	r2, [r3, #16]
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a9c:	69b9      	ldr	r1, [r7, #24]
 8002a9e:	0148      	lsls	r0, r1, #5
 8002aa0:	69f9      	ldr	r1, [r7, #28]
 8002aa2:	4401      	add	r1, r0
 8002aa4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	015a      	lsls	r2, r3, #5
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	4413      	add	r3, r2
 8002ab4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ab8:	691b      	ldr	r3, [r3, #16]
 8002aba:	69ba      	ldr	r2, [r7, #24]
 8002abc:	0151      	lsls	r1, r2, #5
 8002abe:	69fa      	ldr	r2, [r7, #28]
 8002ac0:	440a      	add	r2, r1
 8002ac2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002ac6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002aca:	6113      	str	r3, [r2, #16]
 8002acc:	e03a      	b.n	8002b44 <USB_EPStartXfer+0x3e4>
 8002ace:	bf00      	nop
 8002ad0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	699a      	ldr	r2, [r3, #24]
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	4413      	add	r3, r2
 8002ade:	1e5a      	subs	r2, r3, #1
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ae8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	8afa      	ldrh	r2, [r7, #22]
 8002af0:	fb03 f202 	mul.w	r2, r3, r2
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	015a      	lsls	r2, r3, #5
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	4413      	add	r3, r2
 8002b00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b04:	691a      	ldr	r2, [r3, #16]
 8002b06:	8afb      	ldrh	r3, [r7, #22]
 8002b08:	04d9      	lsls	r1, r3, #19
 8002b0a:	4b38      	ldr	r3, [pc, #224]	; (8002bec <USB_EPStartXfer+0x48c>)
 8002b0c:	400b      	ands	r3, r1
 8002b0e:	69b9      	ldr	r1, [r7, #24]
 8002b10:	0148      	lsls	r0, r1, #5
 8002b12:	69f9      	ldr	r1, [r7, #28]
 8002b14:	4401      	add	r1, r0
 8002b16:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	015a      	lsls	r2, r3, #5
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	4413      	add	r3, r2
 8002b26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b2a:	691a      	ldr	r2, [r3, #16]
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	69db      	ldr	r3, [r3, #28]
 8002b30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b34:	69b9      	ldr	r1, [r7, #24]
 8002b36:	0148      	lsls	r0, r1, #5
 8002b38:	69f9      	ldr	r1, [r7, #28]
 8002b3a:	4401      	add	r1, r0
 8002b3c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8002b40:	4313      	orrs	r3, r2
 8002b42:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8002b44:	79fb      	ldrb	r3, [r7, #7]
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d10d      	bne.n	8002b66 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d009      	beq.n	8002b66 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	6919      	ldr	r1, [r3, #16]
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	015a      	lsls	r2, r3, #5
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b62:	460a      	mov	r2, r1
 8002b64:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	791b      	ldrb	r3, [r3, #4]
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d128      	bne.n	8002bc0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d110      	bne.n	8002ba0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8002b7e:	69bb      	ldr	r3, [r7, #24]
 8002b80:	015a      	lsls	r2, r3, #5
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	4413      	add	r3, r2
 8002b86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	0151      	lsls	r1, r2, #5
 8002b90:	69fa      	ldr	r2, [r7, #28]
 8002b92:	440a      	add	r2, r1
 8002b94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002b98:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002b9c:	6013      	str	r3, [r2, #0]
 8002b9e:	e00f      	b.n	8002bc0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	015a      	lsls	r2, r3, #5
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	4413      	add	r3, r2
 8002ba8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	69ba      	ldr	r2, [r7, #24]
 8002bb0:	0151      	lsls	r1, r2, #5
 8002bb2:	69fa      	ldr	r2, [r7, #28]
 8002bb4:	440a      	add	r2, r1
 8002bb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002bba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bbe:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8002bc0:	69bb      	ldr	r3, [r7, #24]
 8002bc2:	015a      	lsls	r2, r3, #5
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	69ba      	ldr	r2, [r7, #24]
 8002bd0:	0151      	lsls	r1, r2, #5
 8002bd2:	69fa      	ldr	r2, [r7, #28]
 8002bd4:	440a      	add	r2, r1
 8002bd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002bda:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8002bde:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8002be0:	2300      	movs	r3, #0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3720      	adds	r7, #32
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	1ff80000 	.word	0x1ff80000

08002bf0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b087      	sub	sp, #28
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	785b      	ldrb	r3, [r3, #1]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	f040 80ce 	bne.w	8002dae <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	699b      	ldr	r3, [r3, #24]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d132      	bne.n	8002c80 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	015a      	lsls	r2, r3, #5
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	4413      	add	r3, r2
 8002c22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c26:	691b      	ldr	r3, [r3, #16]
 8002c28:	693a      	ldr	r2, [r7, #16]
 8002c2a:	0151      	lsls	r1, r2, #5
 8002c2c:	697a      	ldr	r2, [r7, #20]
 8002c2e:	440a      	add	r2, r1
 8002c30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002c34:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8002c38:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8002c3c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	015a      	lsls	r2, r3, #5
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	4413      	add	r3, r2
 8002c46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c4a:	691b      	ldr	r3, [r3, #16]
 8002c4c:	693a      	ldr	r2, [r7, #16]
 8002c4e:	0151      	lsls	r1, r2, #5
 8002c50:	697a      	ldr	r2, [r7, #20]
 8002c52:	440a      	add	r2, r1
 8002c54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002c58:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002c5c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	015a      	lsls	r2, r3, #5
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	4413      	add	r3, r2
 8002c66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c6a:	691b      	ldr	r3, [r3, #16]
 8002c6c:	693a      	ldr	r2, [r7, #16]
 8002c6e:	0151      	lsls	r1, r2, #5
 8002c70:	697a      	ldr	r2, [r7, #20]
 8002c72:	440a      	add	r2, r1
 8002c74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002c78:	0cdb      	lsrs	r3, r3, #19
 8002c7a:	04db      	lsls	r3, r3, #19
 8002c7c:	6113      	str	r3, [r2, #16]
 8002c7e:	e04e      	b.n	8002d1e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	015a      	lsls	r2, r3, #5
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	4413      	add	r3, r2
 8002c88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c8c:	691b      	ldr	r3, [r3, #16]
 8002c8e:	693a      	ldr	r2, [r7, #16]
 8002c90:	0151      	lsls	r1, r2, #5
 8002c92:	697a      	ldr	r2, [r7, #20]
 8002c94:	440a      	add	r2, r1
 8002c96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002c9a:	0cdb      	lsrs	r3, r3, #19
 8002c9c:	04db      	lsls	r3, r3, #19
 8002c9e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	015a      	lsls	r2, r3, #5
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	4413      	add	r3, r2
 8002ca8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	693a      	ldr	r2, [r7, #16]
 8002cb0:	0151      	lsls	r1, r2, #5
 8002cb2:	697a      	ldr	r2, [r7, #20]
 8002cb4:	440a      	add	r2, r1
 8002cb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002cba:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8002cbe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8002cc2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	699a      	ldr	r2, [r3, #24]
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d903      	bls.n	8002cd8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	68da      	ldr	r2, [r3, #12]
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	015a      	lsls	r2, r3, #5
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	4413      	add	r3, r2
 8002ce0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	693a      	ldr	r2, [r7, #16]
 8002ce8:	0151      	lsls	r1, r2, #5
 8002cea:	697a      	ldr	r2, [r7, #20]
 8002cec:	440a      	add	r2, r1
 8002cee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002cf2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002cf6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	015a      	lsls	r2, r3, #5
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	4413      	add	r3, r2
 8002d00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d04:	691a      	ldr	r2, [r3, #16]
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	699b      	ldr	r3, [r3, #24]
 8002d0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d0e:	6939      	ldr	r1, [r7, #16]
 8002d10:	0148      	lsls	r0, r1, #5
 8002d12:	6979      	ldr	r1, [r7, #20]
 8002d14:	4401      	add	r1, r0
 8002d16:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8002d1e:	79fb      	ldrb	r3, [r7, #7]
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d11e      	bne.n	8002d62 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	695b      	ldr	r3, [r3, #20]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d009      	beq.n	8002d40 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	015a      	lsls	r2, r3, #5
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	4413      	add	r3, r2
 8002d34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d38:	461a      	mov	r2, r3
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	015a      	lsls	r2, r3, #5
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	4413      	add	r3, r2
 8002d48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	693a      	ldr	r2, [r7, #16]
 8002d50:	0151      	lsls	r1, r2, #5
 8002d52:	697a      	ldr	r2, [r7, #20]
 8002d54:	440a      	add	r2, r1
 8002d56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002d5a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8002d5e:	6013      	str	r3, [r2, #0]
 8002d60:	e097      	b.n	8002e92 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	015a      	lsls	r2, r3, #5
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	4413      	add	r3, r2
 8002d6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	693a      	ldr	r2, [r7, #16]
 8002d72:	0151      	lsls	r1, r2, #5
 8002d74:	697a      	ldr	r2, [r7, #20]
 8002d76:	440a      	add	r2, r1
 8002d78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002d7c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8002d80:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	699b      	ldr	r3, [r3, #24]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	f000 8083 	beq.w	8002e92 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	f003 030f 	and.w	r3, r3, #15
 8002d9c:	2101      	movs	r1, #1
 8002d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002da2:	6979      	ldr	r1, [r7, #20]
 8002da4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002da8:	4313      	orrs	r3, r2
 8002daa:	634b      	str	r3, [r1, #52]	; 0x34
 8002dac:	e071      	b.n	8002e92 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	015a      	lsls	r2, r3, #5
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	4413      	add	r3, r2
 8002db6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dba:	691b      	ldr	r3, [r3, #16]
 8002dbc:	693a      	ldr	r2, [r7, #16]
 8002dbe:	0151      	lsls	r1, r2, #5
 8002dc0:	697a      	ldr	r2, [r7, #20]
 8002dc2:	440a      	add	r2, r1
 8002dc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002dc8:	0cdb      	lsrs	r3, r3, #19
 8002dca:	04db      	lsls	r3, r3, #19
 8002dcc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	015a      	lsls	r2, r3, #5
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dda:	691b      	ldr	r3, [r3, #16]
 8002ddc:	693a      	ldr	r2, [r7, #16]
 8002dde:	0151      	lsls	r1, r2, #5
 8002de0:	697a      	ldr	r2, [r7, #20]
 8002de2:	440a      	add	r2, r1
 8002de4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002de8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8002dec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8002df0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	699b      	ldr	r3, [r3, #24]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d003      	beq.n	8002e02 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	68da      	ldr	r2, [r3, #12]
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	68da      	ldr	r2, [r3, #12]
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	015a      	lsls	r2, r3, #5
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	4413      	add	r3, r2
 8002e12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e16:	691b      	ldr	r3, [r3, #16]
 8002e18:	693a      	ldr	r2, [r7, #16]
 8002e1a:	0151      	lsls	r1, r2, #5
 8002e1c:	697a      	ldr	r2, [r7, #20]
 8002e1e:	440a      	add	r2, r1
 8002e20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002e24:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002e28:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	015a      	lsls	r2, r3, #5
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	4413      	add	r3, r2
 8002e32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e36:	691a      	ldr	r2, [r3, #16]
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	69db      	ldr	r3, [r3, #28]
 8002e3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e40:	6939      	ldr	r1, [r7, #16]
 8002e42:	0148      	lsls	r0, r1, #5
 8002e44:	6979      	ldr	r1, [r7, #20]
 8002e46:	4401      	add	r1, r0
 8002e48:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8002e50:	79fb      	ldrb	r3, [r7, #7]
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d10d      	bne.n	8002e72 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d009      	beq.n	8002e72 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	6919      	ldr	r1, [r3, #16]
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	015a      	lsls	r2, r3, #5
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	4413      	add	r3, r2
 8002e6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e6e:	460a      	mov	r2, r1
 8002e70:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	015a      	lsls	r2, r3, #5
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	4413      	add	r3, r2
 8002e7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	693a      	ldr	r2, [r7, #16]
 8002e82:	0151      	lsls	r1, r2, #5
 8002e84:	697a      	ldr	r2, [r7, #20]
 8002e86:	440a      	add	r2, r1
 8002e88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002e8c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8002e90:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8002e92:	2300      	movs	r3, #0
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	371c      	adds	r7, #28
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b087      	sub	sp, #28
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	785b      	ldrb	r3, [r3, #1]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d14a      	bne.n	8002f54 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	015a      	lsls	r2, r3, #5
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	4413      	add	r3, r2
 8002ec8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002ed2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ed6:	f040 8086 	bne.w	8002fe6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	015a      	lsls	r2, r3, #5
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	4413      	add	r3, r2
 8002ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	683a      	ldr	r2, [r7, #0]
 8002eec:	7812      	ldrb	r2, [r2, #0]
 8002eee:	0151      	lsls	r1, r2, #5
 8002ef0:	693a      	ldr	r2, [r7, #16]
 8002ef2:	440a      	add	r2, r1
 8002ef4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002ef8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002efc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	015a      	lsls	r2, r3, #5
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	4413      	add	r3, r2
 8002f08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	683a      	ldr	r2, [r7, #0]
 8002f10:	7812      	ldrb	r2, [r2, #0]
 8002f12:	0151      	lsls	r1, r2, #5
 8002f14:	693a      	ldr	r2, [r7, #16]
 8002f16:	440a      	add	r2, r1
 8002f18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002f1c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002f20:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	3301      	adds	r3, #1
 8002f26:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f242 7210 	movw	r2, #10000	; 0x2710
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d902      	bls.n	8002f38 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	75fb      	strb	r3, [r7, #23]
          break;
 8002f36:	e056      	b.n	8002fe6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	015a      	lsls	r2, r3, #5
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	4413      	add	r3, r2
 8002f42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002f4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f50:	d0e7      	beq.n	8002f22 <USB_EPStopXfer+0x82>
 8002f52:	e048      	b.n	8002fe6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	015a      	lsls	r2, r3, #5
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	4413      	add	r3, r2
 8002f5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002f68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f6c:	d13b      	bne.n	8002fe6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	015a      	lsls	r2, r3, #5
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	4413      	add	r3, r2
 8002f78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	683a      	ldr	r2, [r7, #0]
 8002f80:	7812      	ldrb	r2, [r2, #0]
 8002f82:	0151      	lsls	r1, r2, #5
 8002f84:	693a      	ldr	r2, [r7, #16]
 8002f86:	440a      	add	r2, r1
 8002f88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002f8c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002f90:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	015a      	lsls	r2, r3, #5
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	4413      	add	r3, r2
 8002f9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	683a      	ldr	r2, [r7, #0]
 8002fa4:	7812      	ldrb	r2, [r2, #0]
 8002fa6:	0151      	lsls	r1, r2, #5
 8002fa8:	693a      	ldr	r2, [r7, #16]
 8002faa:	440a      	add	r2, r1
 8002fac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002fb0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002fb4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	3301      	adds	r3, #1
 8002fba:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f242 7210 	movw	r2, #10000	; 0x2710
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d902      	bls.n	8002fcc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	75fb      	strb	r3, [r7, #23]
          break;
 8002fca:	e00c      	b.n	8002fe6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	015a      	lsls	r2, r3, #5
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	4413      	add	r3, r2
 8002fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002fe0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002fe4:	d0e7      	beq.n	8002fb6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8002fe6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	371c      	adds	r7, #28
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr

08002ff4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b089      	sub	sp, #36	; 0x24
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	60b9      	str	r1, [r7, #8]
 8002ffe:	4611      	mov	r1, r2
 8003000:	461a      	mov	r2, r3
 8003002:	460b      	mov	r3, r1
 8003004:	71fb      	strb	r3, [r7, #7]
 8003006:	4613      	mov	r3, r2
 8003008:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003012:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003016:	2b00      	cmp	r3, #0
 8003018:	d123      	bne.n	8003062 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800301a:	88bb      	ldrh	r3, [r7, #4]
 800301c:	3303      	adds	r3, #3
 800301e:	089b      	lsrs	r3, r3, #2
 8003020:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003022:	2300      	movs	r3, #0
 8003024:	61bb      	str	r3, [r7, #24]
 8003026:	e018      	b.n	800305a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003028:	79fb      	ldrb	r3, [r7, #7]
 800302a:	031a      	lsls	r2, r3, #12
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	4413      	add	r3, r2
 8003030:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003034:	461a      	mov	r2, r3
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	3301      	adds	r3, #1
 8003040:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	3301      	adds	r3, #1
 8003046:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	3301      	adds	r3, #1
 800304c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	3301      	adds	r3, #1
 8003052:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	3301      	adds	r3, #1
 8003058:	61bb      	str	r3, [r7, #24]
 800305a:	69ba      	ldr	r2, [r7, #24]
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	429a      	cmp	r2, r3
 8003060:	d3e2      	bcc.n	8003028 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003062:	2300      	movs	r3, #0
}
 8003064:	4618      	mov	r0, r3
 8003066:	3724      	adds	r7, #36	; 0x24
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr

08003070 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003070:	b480      	push	{r7}
 8003072:	b08b      	sub	sp, #44	; 0x2c
 8003074:	af00      	add	r7, sp, #0
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	4613      	mov	r3, r2
 800307c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003086:	88fb      	ldrh	r3, [r7, #6]
 8003088:	089b      	lsrs	r3, r3, #2
 800308a:	b29b      	uxth	r3, r3
 800308c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800308e:	88fb      	ldrh	r3, [r7, #6]
 8003090:	f003 0303 	and.w	r3, r3, #3
 8003094:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003096:	2300      	movs	r3, #0
 8003098:	623b      	str	r3, [r7, #32]
 800309a:	e014      	b.n	80030c6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a6:	601a      	str	r2, [r3, #0]
    pDest++;
 80030a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030aa:	3301      	adds	r3, #1
 80030ac:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80030ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b0:	3301      	adds	r3, #1
 80030b2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80030b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b6:	3301      	adds	r3, #1
 80030b8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80030ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030bc:	3301      	adds	r3, #1
 80030be:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80030c0:	6a3b      	ldr	r3, [r7, #32]
 80030c2:	3301      	adds	r3, #1
 80030c4:	623b      	str	r3, [r7, #32]
 80030c6:	6a3a      	ldr	r2, [r7, #32]
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d3e6      	bcc.n	800309c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80030ce:	8bfb      	ldrh	r3, [r7, #30]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d01e      	beq.n	8003112 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80030d4:	2300      	movs	r3, #0
 80030d6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030de:	461a      	mov	r2, r3
 80030e0:	f107 0310 	add.w	r3, r7, #16
 80030e4:	6812      	ldr	r2, [r2, #0]
 80030e6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80030e8:	693a      	ldr	r2, [r7, #16]
 80030ea:	6a3b      	ldr	r3, [r7, #32]
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	00db      	lsls	r3, r3, #3
 80030f0:	fa22 f303 	lsr.w	r3, r2, r3
 80030f4:	b2da      	uxtb	r2, r3
 80030f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f8:	701a      	strb	r2, [r3, #0]
      i++;
 80030fa:	6a3b      	ldr	r3, [r7, #32]
 80030fc:	3301      	adds	r3, #1
 80030fe:	623b      	str	r3, [r7, #32]
      pDest++;
 8003100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003102:	3301      	adds	r3, #1
 8003104:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8003106:	8bfb      	ldrh	r3, [r7, #30]
 8003108:	3b01      	subs	r3, #1
 800310a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800310c:	8bfb      	ldrh	r3, [r7, #30]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d1ea      	bne.n	80030e8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003114:	4618      	mov	r0, r3
 8003116:	372c      	adds	r7, #44	; 0x2c
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr

08003120 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003120:	b480      	push	{r7}
 8003122:	b085      	sub	sp, #20
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	785b      	ldrb	r3, [r3, #1]
 8003138:	2b01      	cmp	r3, #1
 800313a:	d12c      	bne.n	8003196 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	015a      	lsls	r2, r3, #5
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	4413      	add	r3, r2
 8003144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	2b00      	cmp	r3, #0
 800314c:	db12      	blt.n	8003174 <USB_EPSetStall+0x54>
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d00f      	beq.n	8003174 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	015a      	lsls	r2, r3, #5
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	4413      	add	r3, r2
 800315c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	68ba      	ldr	r2, [r7, #8]
 8003164:	0151      	lsls	r1, r2, #5
 8003166:	68fa      	ldr	r2, [r7, #12]
 8003168:	440a      	add	r2, r1
 800316a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800316e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003172:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	015a      	lsls	r2, r3, #5
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	4413      	add	r3, r2
 800317c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	68ba      	ldr	r2, [r7, #8]
 8003184:	0151      	lsls	r1, r2, #5
 8003186:	68fa      	ldr	r2, [r7, #12]
 8003188:	440a      	add	r2, r1
 800318a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800318e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003192:	6013      	str	r3, [r2, #0]
 8003194:	e02b      	b.n	80031ee <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	015a      	lsls	r2, r3, #5
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	4413      	add	r3, r2
 800319e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	db12      	blt.n	80031ce <USB_EPSetStall+0xae>
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d00f      	beq.n	80031ce <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	015a      	lsls	r2, r3, #5
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	4413      	add	r3, r2
 80031b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	68ba      	ldr	r2, [r7, #8]
 80031be:	0151      	lsls	r1, r2, #5
 80031c0:	68fa      	ldr	r2, [r7, #12]
 80031c2:	440a      	add	r2, r1
 80031c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80031c8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80031cc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	015a      	lsls	r2, r3, #5
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	4413      	add	r3, r2
 80031d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	68ba      	ldr	r2, [r7, #8]
 80031de:	0151      	lsls	r1, r2, #5
 80031e0:	68fa      	ldr	r2, [r7, #12]
 80031e2:	440a      	add	r2, r1
 80031e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80031e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80031ec:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80031ee:	2300      	movs	r3, #0
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3714      	adds	r7, #20
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b085      	sub	sp, #20
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	785b      	ldrb	r3, [r3, #1]
 8003214:	2b01      	cmp	r3, #1
 8003216:	d128      	bne.n	800326a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	015a      	lsls	r2, r3, #5
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	4413      	add	r3, r2
 8003220:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	68ba      	ldr	r2, [r7, #8]
 8003228:	0151      	lsls	r1, r2, #5
 800322a:	68fa      	ldr	r2, [r7, #12]
 800322c:	440a      	add	r2, r1
 800322e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003232:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003236:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	791b      	ldrb	r3, [r3, #4]
 800323c:	2b03      	cmp	r3, #3
 800323e:	d003      	beq.n	8003248 <USB_EPClearStall+0x4c>
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	791b      	ldrb	r3, [r3, #4]
 8003244:	2b02      	cmp	r3, #2
 8003246:	d138      	bne.n	80032ba <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	015a      	lsls	r2, r3, #5
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	4413      	add	r3, r2
 8003250:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	68ba      	ldr	r2, [r7, #8]
 8003258:	0151      	lsls	r1, r2, #5
 800325a:	68fa      	ldr	r2, [r7, #12]
 800325c:	440a      	add	r2, r1
 800325e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003262:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003266:	6013      	str	r3, [r2, #0]
 8003268:	e027      	b.n	80032ba <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	015a      	lsls	r2, r3, #5
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	4413      	add	r3, r2
 8003272:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	68ba      	ldr	r2, [r7, #8]
 800327a:	0151      	lsls	r1, r2, #5
 800327c:	68fa      	ldr	r2, [r7, #12]
 800327e:	440a      	add	r2, r1
 8003280:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003284:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003288:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	791b      	ldrb	r3, [r3, #4]
 800328e:	2b03      	cmp	r3, #3
 8003290:	d003      	beq.n	800329a <USB_EPClearStall+0x9e>
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	791b      	ldrb	r3, [r3, #4]
 8003296:	2b02      	cmp	r3, #2
 8003298:	d10f      	bne.n	80032ba <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	015a      	lsls	r2, r3, #5
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	4413      	add	r3, r2
 80032a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68ba      	ldr	r2, [r7, #8]
 80032aa:	0151      	lsls	r1, r2, #5
 80032ac:	68fa      	ldr	r2, [r7, #12]
 80032ae:	440a      	add	r2, r1
 80032b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80032b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032b8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80032ba:	2300      	movs	r3, #0
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3714      	adds	r7, #20
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr

080032c8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b085      	sub	sp, #20
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	460b      	mov	r3, r1
 80032d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68fa      	ldr	r2, [r7, #12]
 80032e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032e6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80032ea:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	78fb      	ldrb	r3, [r7, #3]
 80032f6:	011b      	lsls	r3, r3, #4
 80032f8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80032fc:	68f9      	ldr	r1, [r7, #12]
 80032fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003302:	4313      	orrs	r3, r2
 8003304:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8003306:	2300      	movs	r3, #0
}
 8003308:	4618      	mov	r0, r3
 800330a:	3714      	adds	r7, #20
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr

08003314 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8003314:	b480      	push	{r7}
 8003316:	b085      	sub	sp, #20
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	695b      	ldr	r3, [r3, #20]
 8003320:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	699b      	ldr	r3, [r3, #24]
 8003326:	68fa      	ldr	r2, [r7, #12]
 8003328:	4013      	ands	r3, r2
 800332a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800332c:	68fb      	ldr	r3, [r7, #12]
}
 800332e:	4618      	mov	r0, r3
 8003330:	3714      	adds	r7, #20
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr

0800333a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800333a:	b480      	push	{r7}
 800333c:	b085      	sub	sp, #20
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800334c:	699b      	ldr	r3, [r3, #24]
 800334e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003356:	69db      	ldr	r3, [r3, #28]
 8003358:	68ba      	ldr	r2, [r7, #8]
 800335a:	4013      	ands	r3, r2
 800335c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	0c1b      	lsrs	r3, r3, #16
}
 8003362:	4618      	mov	r0, r3
 8003364:	3714      	adds	r7, #20
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr

0800336e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800336e:	b480      	push	{r7}
 8003370:	b085      	sub	sp, #20
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800338a:	69db      	ldr	r3, [r3, #28]
 800338c:	68ba      	ldr	r2, [r7, #8]
 800338e:	4013      	ands	r3, r2
 8003390:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	b29b      	uxth	r3, r3
}
 8003396:	4618      	mov	r0, r3
 8003398:	3714      	adds	r7, #20
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr

080033a2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80033a2:	b480      	push	{r7}
 80033a4:	b085      	sub	sp, #20
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
 80033aa:	460b      	mov	r3, r1
 80033ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80033b2:	78fb      	ldrb	r3, [r7, #3]
 80033b4:	015a      	lsls	r2, r3, #5
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	4413      	add	r3, r2
 80033ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033c8:	695b      	ldr	r3, [r3, #20]
 80033ca:	68ba      	ldr	r2, [r7, #8]
 80033cc:	4013      	ands	r3, r2
 80033ce:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80033d0:	68bb      	ldr	r3, [r7, #8]
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3714      	adds	r7, #20
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr

080033de <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80033de:	b480      	push	{r7}
 80033e0:	b087      	sub	sp, #28
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
 80033e6:	460b      	mov	r3, r1
 80033e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033f4:	691b      	ldr	r3, [r3, #16]
 80033f6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003400:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8003402:	78fb      	ldrb	r3, [r7, #3]
 8003404:	f003 030f 	and.w	r3, r3, #15
 8003408:	68fa      	ldr	r2, [r7, #12]
 800340a:	fa22 f303 	lsr.w	r3, r2, r3
 800340e:	01db      	lsls	r3, r3, #7
 8003410:	b2db      	uxtb	r3, r3
 8003412:	693a      	ldr	r2, [r7, #16]
 8003414:	4313      	orrs	r3, r2
 8003416:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8003418:	78fb      	ldrb	r3, [r7, #3]
 800341a:	015a      	lsls	r2, r3, #5
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	4413      	add	r3, r2
 8003420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	693a      	ldr	r2, [r7, #16]
 8003428:	4013      	ands	r3, r2
 800342a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800342c:	68bb      	ldr	r3, [r7, #8]
}
 800342e:	4618      	mov	r0, r3
 8003430:	371c      	adds	r7, #28
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr

0800343a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800343a:	b480      	push	{r7}
 800343c:	b083      	sub	sp, #12
 800343e:	af00      	add	r7, sp, #0
 8003440:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	f003 0301 	and.w	r3, r3, #1
}
 800344a:	4618      	mov	r0, r3
 800344c:	370c      	adds	r7, #12
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr

08003456 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8003456:	b480      	push	{r7}
 8003458:	b085      	sub	sp, #20
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	68fa      	ldr	r2, [r7, #12]
 800346c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003470:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003474:	f023 0307 	bic.w	r3, r3, #7
 8003478:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	68fa      	ldr	r2, [r7, #12]
 8003484:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003488:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800348c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800348e:	2300      	movs	r3, #0
}
 8003490:	4618      	mov	r0, r3
 8003492:	3714      	adds	r7, #20
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800349c:	b480      	push	{r7}
 800349e:	b087      	sub	sp, #28
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	460b      	mov	r3, r1
 80034a6:	607a      	str	r2, [r7, #4]
 80034a8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	333c      	adds	r3, #60	; 0x3c
 80034b2:	3304      	adds	r3, #4
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	4a26      	ldr	r2, [pc, #152]	; (8003554 <USB_EP0_OutStart+0xb8>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d90a      	bls.n	80034d6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80034cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034d0:	d101      	bne.n	80034d6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80034d2:	2300      	movs	r3, #0
 80034d4:	e037      	b.n	8003546 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034dc:	461a      	mov	r2, r3
 80034de:	2300      	movs	r3, #0
 80034e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	697a      	ldr	r2, [r7, #20]
 80034ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80034f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80034f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034fc:	691b      	ldr	r3, [r3, #16]
 80034fe:	697a      	ldr	r2, [r7, #20]
 8003500:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003504:	f043 0318 	orr.w	r3, r3, #24
 8003508:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	697a      	ldr	r2, [r7, #20]
 8003514:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003518:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800351c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800351e:	7afb      	ldrb	r3, [r7, #11]
 8003520:	2b01      	cmp	r3, #1
 8003522:	d10f      	bne.n	8003544 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800352a:	461a      	mov	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	697a      	ldr	r2, [r7, #20]
 800353a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800353e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8003542:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003544:	2300      	movs	r3, #0
}
 8003546:	4618      	mov	r0, r3
 8003548:	371c      	adds	r7, #28
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	4f54300a 	.word	0x4f54300a

08003558 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8003560:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8003562:	4618      	mov	r0, r3
 8003564:	370c      	adds	r7, #12
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr

0800356e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800356e:	b580      	push	{r7, lr}
 8003570:	b084      	sub	sp, #16
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
 8003576:	460b      	mov	r3, r1
 8003578:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800357a:	2300      	movs	r3, #0
 800357c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003584:	2b00      	cmp	r3, #0
 8003586:	d009      	beq.n	800359c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	78fa      	ldrb	r2, [r7, #3]
 8003592:	4611      	mov	r1, r2
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	4798      	blx	r3
 8003598:	4603      	mov	r3, r0
 800359a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800359c:	7bfb      	ldrb	r3, [r7, #15]
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3710      	adds	r7, #16
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}

080035a6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80035a6:	b580      	push	{r7, lr}
 80035a8:	b084      	sub	sp, #16
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]
 80035ae:	460b      	mov	r3, r1
 80035b0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80035b2:	2300      	movs	r3, #0
 80035b4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	78fa      	ldrb	r2, [r7, #3]
 80035c0:	4611      	mov	r1, r2
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	4798      	blx	r3
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d001      	beq.n	80035d0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80035cc:	2303      	movs	r3, #3
 80035ce:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80035d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3710      	adds	r7, #16
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}

080035da <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80035da:	b580      	push	{r7, lr}
 80035dc:	b084      	sub	sp, #16
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
 80035e2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80035ea:	6839      	ldr	r1, [r7, #0]
 80035ec:	4618      	mov	r0, r3
 80035ee:	f001 f8b2 	bl	8004756 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2201      	movs	r2, #1
 80035f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8003600:	461a      	mov	r2, r3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800360e:	f003 031f 	and.w	r3, r3, #31
 8003612:	2b02      	cmp	r3, #2
 8003614:	d01a      	beq.n	800364c <USBD_LL_SetupStage+0x72>
 8003616:	2b02      	cmp	r3, #2
 8003618:	d822      	bhi.n	8003660 <USBD_LL_SetupStage+0x86>
 800361a:	2b00      	cmp	r3, #0
 800361c:	d002      	beq.n	8003624 <USBD_LL_SetupStage+0x4a>
 800361e:	2b01      	cmp	r3, #1
 8003620:	d00a      	beq.n	8003638 <USBD_LL_SetupStage+0x5e>
 8003622:	e01d      	b.n	8003660 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800362a:	4619      	mov	r1, r3
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f000 fb09 	bl	8003c44 <USBD_StdDevReq>
 8003632:	4603      	mov	r3, r0
 8003634:	73fb      	strb	r3, [r7, #15]
      break;
 8003636:	e020      	b.n	800367a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800363e:	4619      	mov	r1, r3
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f000 fb71 	bl	8003d28 <USBD_StdItfReq>
 8003646:	4603      	mov	r3, r0
 8003648:	73fb      	strb	r3, [r7, #15]
      break;
 800364a:	e016      	b.n	800367a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8003652:	4619      	mov	r1, r3
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f000 fbd3 	bl	8003e00 <USBD_StdEPReq>
 800365a:	4603      	mov	r3, r0
 800365c:	73fb      	strb	r3, [r7, #15]
      break;
 800365e:	e00c      	b.n	800367a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8003666:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800366a:	b2db      	uxtb	r3, r3
 800366c:	4619      	mov	r1, r3
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f001 fa36 	bl	8004ae0 <USBD_LL_StallEP>
 8003674:	4603      	mov	r3, r0
 8003676:	73fb      	strb	r3, [r7, #15]
      break;
 8003678:	bf00      	nop
  }

  return ret;
 800367a:	7bfb      	ldrb	r3, [r7, #15]
}
 800367c:	4618      	mov	r0, r3
 800367e:	3710      	adds	r7, #16
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b086      	sub	sp, #24
 8003688:	af00      	add	r7, sp, #0
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	460b      	mov	r3, r1
 800368e:	607a      	str	r2, [r7, #4]
 8003690:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8003692:	2300      	movs	r3, #0
 8003694:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8003696:	7afb      	ldrb	r3, [r7, #11]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d16e      	bne.n	800377a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80036a2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80036aa:	2b03      	cmp	r3, #3
 80036ac:	f040 8098 	bne.w	80037e0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	689a      	ldr	r2, [r3, #8]
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d913      	bls.n	80036e4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	689a      	ldr	r2, [r3, #8]
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	1ad2      	subs	r2, r2, r3
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	68da      	ldr	r2, [r3, #12]
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	4293      	cmp	r3, r2
 80036d4:	bf28      	it	cs
 80036d6:	4613      	movcs	r3, r2
 80036d8:	461a      	mov	r2, r3
 80036da:	6879      	ldr	r1, [r7, #4]
 80036dc:	68f8      	ldr	r0, [r7, #12]
 80036de:	f001 f8b1 	bl	8004844 <USBD_CtlContinueRx>
 80036e2:	e07d      	b.n	80037e0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80036ea:	f003 031f 	and.w	r3, r3, #31
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d014      	beq.n	800371c <USBD_LL_DataOutStage+0x98>
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d81d      	bhi.n	8003732 <USBD_LL_DataOutStage+0xae>
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d002      	beq.n	8003700 <USBD_LL_DataOutStage+0x7c>
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d003      	beq.n	8003706 <USBD_LL_DataOutStage+0x82>
 80036fe:	e018      	b.n	8003732 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8003700:	2300      	movs	r3, #0
 8003702:	75bb      	strb	r3, [r7, #22]
            break;
 8003704:	e018      	b.n	8003738 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800370c:	b2db      	uxtb	r3, r3
 800370e:	4619      	mov	r1, r3
 8003710:	68f8      	ldr	r0, [r7, #12]
 8003712:	f000 fa5e 	bl	8003bd2 <USBD_CoreFindIF>
 8003716:	4603      	mov	r3, r0
 8003718:	75bb      	strb	r3, [r7, #22]
            break;
 800371a:	e00d      	b.n	8003738 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8003722:	b2db      	uxtb	r3, r3
 8003724:	4619      	mov	r1, r3
 8003726:	68f8      	ldr	r0, [r7, #12]
 8003728:	f000 fa60 	bl	8003bec <USBD_CoreFindEP>
 800372c:	4603      	mov	r3, r0
 800372e:	75bb      	strb	r3, [r7, #22]
            break;
 8003730:	e002      	b.n	8003738 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8003732:	2300      	movs	r3, #0
 8003734:	75bb      	strb	r3, [r7, #22]
            break;
 8003736:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8003738:	7dbb      	ldrb	r3, [r7, #22]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d119      	bne.n	8003772 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003744:	b2db      	uxtb	r3, r3
 8003746:	2b03      	cmp	r3, #3
 8003748:	d113      	bne.n	8003772 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800374a:	7dba      	ldrb	r2, [r7, #22]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	32ae      	adds	r2, #174	; 0xae
 8003750:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003754:	691b      	ldr	r3, [r3, #16]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d00b      	beq.n	8003772 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800375a:	7dba      	ldrb	r2, [r7, #22]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8003762:	7dba      	ldrb	r2, [r7, #22]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	32ae      	adds	r2, #174	; 0xae
 8003768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	68f8      	ldr	r0, [r7, #12]
 8003770:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8003772:	68f8      	ldr	r0, [r7, #12]
 8003774:	f001 f877 	bl	8004866 <USBD_CtlSendStatus>
 8003778:	e032      	b.n	80037e0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800377a:	7afb      	ldrb	r3, [r7, #11]
 800377c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003780:	b2db      	uxtb	r3, r3
 8003782:	4619      	mov	r1, r3
 8003784:	68f8      	ldr	r0, [r7, #12]
 8003786:	f000 fa31 	bl	8003bec <USBD_CoreFindEP>
 800378a:	4603      	mov	r3, r0
 800378c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800378e:	7dbb      	ldrb	r3, [r7, #22]
 8003790:	2bff      	cmp	r3, #255	; 0xff
 8003792:	d025      	beq.n	80037e0 <USBD_LL_DataOutStage+0x15c>
 8003794:	7dbb      	ldrb	r3, [r7, #22]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d122      	bne.n	80037e0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	2b03      	cmp	r3, #3
 80037a4:	d117      	bne.n	80037d6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80037a6:	7dba      	ldrb	r2, [r7, #22]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	32ae      	adds	r2, #174	; 0xae
 80037ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00f      	beq.n	80037d6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80037b6:	7dba      	ldrb	r2, [r7, #22]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80037be:	7dba      	ldrb	r2, [r7, #22]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	32ae      	adds	r2, #174	; 0xae
 80037c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037c8:	699b      	ldr	r3, [r3, #24]
 80037ca:	7afa      	ldrb	r2, [r7, #11]
 80037cc:	4611      	mov	r1, r2
 80037ce:	68f8      	ldr	r0, [r7, #12]
 80037d0:	4798      	blx	r3
 80037d2:	4603      	mov	r3, r0
 80037d4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80037d6:	7dfb      	ldrb	r3, [r7, #23]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d001      	beq.n	80037e0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80037dc:	7dfb      	ldrb	r3, [r7, #23]
 80037de:	e000      	b.n	80037e2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3718      	adds	r7, #24
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}

080037ea <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80037ea:	b580      	push	{r7, lr}
 80037ec:	b086      	sub	sp, #24
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	60f8      	str	r0, [r7, #12]
 80037f2:	460b      	mov	r3, r1
 80037f4:	607a      	str	r2, [r7, #4]
 80037f6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80037f8:	7afb      	ldrb	r3, [r7, #11]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d16f      	bne.n	80038de <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	3314      	adds	r3, #20
 8003802:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800380a:	2b02      	cmp	r3, #2
 800380c:	d15a      	bne.n	80038c4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	689a      	ldr	r2, [r3, #8]
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	429a      	cmp	r2, r3
 8003818:	d914      	bls.n	8003844 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	689a      	ldr	r2, [r3, #8]
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	1ad2      	subs	r2, r2, r3
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	461a      	mov	r2, r3
 800382e:	6879      	ldr	r1, [r7, #4]
 8003830:	68f8      	ldr	r0, [r7, #12]
 8003832:	f000 fff6 	bl	8004822 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003836:	2300      	movs	r3, #0
 8003838:	2200      	movs	r2, #0
 800383a:	2100      	movs	r1, #0
 800383c:	68f8      	ldr	r0, [r7, #12]
 800383e:	f001 f9f9 	bl	8004c34 <USBD_LL_PrepareReceive>
 8003842:	e03f      	b.n	80038c4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	68da      	ldr	r2, [r3, #12]
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	429a      	cmp	r2, r3
 800384e:	d11c      	bne.n	800388a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	685a      	ldr	r2, [r3, #4]
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8003858:	429a      	cmp	r2, r3
 800385a:	d316      	bcc.n	800388a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	685a      	ldr	r2, [r3, #4]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8003866:	429a      	cmp	r2, r3
 8003868:	d20f      	bcs.n	800388a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800386a:	2200      	movs	r2, #0
 800386c:	2100      	movs	r1, #0
 800386e:	68f8      	ldr	r0, [r7, #12]
 8003870:	f000 ffd7 	bl	8004822 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2200      	movs	r2, #0
 8003878:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800387c:	2300      	movs	r3, #0
 800387e:	2200      	movs	r2, #0
 8003880:	2100      	movs	r1, #0
 8003882:	68f8      	ldr	r0, [r7, #12]
 8003884:	f001 f9d6 	bl	8004c34 <USBD_LL_PrepareReceive>
 8003888:	e01c      	b.n	80038c4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003890:	b2db      	uxtb	r3, r3
 8003892:	2b03      	cmp	r3, #3
 8003894:	d10f      	bne.n	80038b6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d009      	beq.n	80038b6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	68f8      	ldr	r0, [r7, #12]
 80038b4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80038b6:	2180      	movs	r1, #128	; 0x80
 80038b8:	68f8      	ldr	r0, [r7, #12]
 80038ba:	f001 f911 	bl	8004ae0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80038be:	68f8      	ldr	r0, [r7, #12]
 80038c0:	f000 ffe4 	bl	800488c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d03a      	beq.n	8003944 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80038ce:	68f8      	ldr	r0, [r7, #12]
 80038d0:	f7ff fe42 	bl	8003558 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80038dc:	e032      	b.n	8003944 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80038de:	7afb      	ldrb	r3, [r7, #11]
 80038e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	4619      	mov	r1, r3
 80038e8:	68f8      	ldr	r0, [r7, #12]
 80038ea:	f000 f97f 	bl	8003bec <USBD_CoreFindEP>
 80038ee:	4603      	mov	r3, r0
 80038f0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80038f2:	7dfb      	ldrb	r3, [r7, #23]
 80038f4:	2bff      	cmp	r3, #255	; 0xff
 80038f6:	d025      	beq.n	8003944 <USBD_LL_DataInStage+0x15a>
 80038f8:	7dfb      	ldrb	r3, [r7, #23]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d122      	bne.n	8003944 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003904:	b2db      	uxtb	r3, r3
 8003906:	2b03      	cmp	r3, #3
 8003908:	d11c      	bne.n	8003944 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800390a:	7dfa      	ldrb	r2, [r7, #23]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	32ae      	adds	r2, #174	; 0xae
 8003910:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003914:	695b      	ldr	r3, [r3, #20]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d014      	beq.n	8003944 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800391a:	7dfa      	ldrb	r2, [r7, #23]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8003922:	7dfa      	ldrb	r2, [r7, #23]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	32ae      	adds	r2, #174	; 0xae
 8003928:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800392c:	695b      	ldr	r3, [r3, #20]
 800392e:	7afa      	ldrb	r2, [r7, #11]
 8003930:	4611      	mov	r1, r2
 8003932:	68f8      	ldr	r0, [r7, #12]
 8003934:	4798      	blx	r3
 8003936:	4603      	mov	r3, r0
 8003938:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800393a:	7dbb      	ldrb	r3, [r7, #22]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d001      	beq.n	8003944 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8003940:	7dbb      	ldrb	r3, [r7, #22]
 8003942:	e000      	b.n	8003946 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8003944:	2300      	movs	r3, #0
}
 8003946:	4618      	mov	r0, r3
 8003948:	3718      	adds	r7, #24
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}

0800394e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800394e:	b580      	push	{r7, lr}
 8003950:	b084      	sub	sp, #16
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8003956:	2300      	movs	r3, #0
 8003958:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2201      	movs	r2, #1
 800395e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003986:	2b00      	cmp	r3, #0
 8003988:	d014      	beq.n	80039b4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d00e      	beq.n	80039b4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	6852      	ldr	r2, [r2, #4]
 80039a2:	b2d2      	uxtb	r2, r2
 80039a4:	4611      	mov	r1, r2
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	4798      	blx	r3
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d001      	beq.n	80039b4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80039b0:	2303      	movs	r3, #3
 80039b2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80039b4:	2340      	movs	r3, #64	; 0x40
 80039b6:	2200      	movs	r2, #0
 80039b8:	2100      	movs	r1, #0
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f001 f86a 	bl	8004a94 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2240      	movs	r2, #64	; 0x40
 80039cc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80039d0:	2340      	movs	r3, #64	; 0x40
 80039d2:	2200      	movs	r2, #0
 80039d4:	2180      	movs	r1, #128	; 0x80
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f001 f85c 	bl	8004a94 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2240      	movs	r2, #64	; 0x40
 80039e6:	621a      	str	r2, [r3, #32]

  return ret;
 80039e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3710      	adds	r7, #16
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}

080039f2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80039f2:	b480      	push	{r7}
 80039f4:	b083      	sub	sp, #12
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
 80039fa:	460b      	mov	r3, r1
 80039fc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	78fa      	ldrb	r2, [r7, #3]
 8003a02:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8003a04:	2300      	movs	r3, #0
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	370c      	adds	r7, #12
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr

08003a12 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8003a12:	b480      	push	{r7}
 8003a14:	b083      	sub	sp, #12
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003a20:	b2da      	uxtb	r2, r3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2204      	movs	r2, #4
 8003a2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	370c      	adds	r7, #12
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr

08003a3e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8003a3e:	b480      	push	{r7}
 8003a40:	b083      	sub	sp, #12
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	2b04      	cmp	r3, #4
 8003a50:	d106      	bne.n	8003a60 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8003a58:	b2da      	uxtb	r2, r3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	370c      	adds	r7, #12
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr

08003a6e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8003a6e:	b580      	push	{r7, lr}
 8003a70:	b082      	sub	sp, #8
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	2b03      	cmp	r3, #3
 8003a80:	d110      	bne.n	8003aa4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d00b      	beq.n	8003aa4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003a92:	69db      	ldr	r3, [r3, #28]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d005      	beq.n	8003aa4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003a9e:	69db      	ldr	r3, [r3, #28]
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3708      	adds	r7, #8
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}

08003aae <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8003aae:	b580      	push	{r7, lr}
 8003ab0:	b082      	sub	sp, #8
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]
 8003ab6:	460b      	mov	r3, r1
 8003ab8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	32ae      	adds	r2, #174	; 0xae
 8003ac4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d101      	bne.n	8003ad0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8003acc:	2303      	movs	r3, #3
 8003ace:	e01c      	b.n	8003b0a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	2b03      	cmp	r3, #3
 8003ada:	d115      	bne.n	8003b08 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	32ae      	adds	r2, #174	; 0xae
 8003ae6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003aea:	6a1b      	ldr	r3, [r3, #32]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d00b      	beq.n	8003b08 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	32ae      	adds	r2, #174	; 0xae
 8003afa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003afe:	6a1b      	ldr	r3, [r3, #32]
 8003b00:	78fa      	ldrb	r2, [r7, #3]
 8003b02:	4611      	mov	r1, r2
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3708      	adds	r7, #8
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}

08003b12 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8003b12:	b580      	push	{r7, lr}
 8003b14:	b082      	sub	sp, #8
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]
 8003b1a:	460b      	mov	r3, r1
 8003b1c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	32ae      	adds	r2, #174	; 0xae
 8003b28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d101      	bne.n	8003b34 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8003b30:	2303      	movs	r3, #3
 8003b32:	e01c      	b.n	8003b6e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	2b03      	cmp	r3, #3
 8003b3e:	d115      	bne.n	8003b6c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	32ae      	adds	r2, #174	; 0xae
 8003b4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d00b      	beq.n	8003b6c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	32ae      	adds	r2, #174	; 0xae
 8003b5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b64:	78fa      	ldrb	r2, [r7, #3]
 8003b66:	4611      	mov	r1, r2
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3708      	adds	r7, #8
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}

08003b76 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8003b76:	b480      	push	{r7}
 8003b78:	b083      	sub	sp, #12
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8003b7e:	2300      	movs	r3, #0
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b084      	sub	sp, #16
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8003b94:	2300      	movs	r3, #0
 8003b96:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d00e      	beq.n	8003bc8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	6852      	ldr	r2, [r2, #4]
 8003bb6:	b2d2      	uxtb	r2, r2
 8003bb8:	4611      	mov	r1, r2
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	4798      	blx	r3
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d001      	beq.n	8003bc8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8003bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3710      	adds	r7, #16
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}

08003bd2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8003bd2:	b480      	push	{r7}
 8003bd4:	b083      	sub	sp, #12
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]
 8003bda:	460b      	mov	r3, r1
 8003bdc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8003bde:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	370c      	adds	r7, #12
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8003bf8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	370c      	adds	r7, #12
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr

08003c06 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8003c06:	b480      	push	{r7}
 8003c08:	b087      	sub	sp, #28
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8003c24:	8a3b      	ldrh	r3, [r7, #16]
 8003c26:	021b      	lsls	r3, r3, #8
 8003c28:	b21a      	sxth	r2, r3
 8003c2a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	b21b      	sxth	r3, r3
 8003c32:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8003c34:	89fb      	ldrh	r3, [r7, #14]
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	371c      	adds	r7, #28
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
	...

08003c44 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	781b      	ldrb	r3, [r3, #0]
 8003c56:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003c5a:	2b40      	cmp	r3, #64	; 0x40
 8003c5c:	d005      	beq.n	8003c6a <USBD_StdDevReq+0x26>
 8003c5e:	2b40      	cmp	r3, #64	; 0x40
 8003c60:	d857      	bhi.n	8003d12 <USBD_StdDevReq+0xce>
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00f      	beq.n	8003c86 <USBD_StdDevReq+0x42>
 8003c66:	2b20      	cmp	r3, #32
 8003c68:	d153      	bne.n	8003d12 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	32ae      	adds	r2, #174	; 0xae
 8003c74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	6839      	ldr	r1, [r7, #0]
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	4798      	blx	r3
 8003c80:	4603      	mov	r3, r0
 8003c82:	73fb      	strb	r3, [r7, #15]
      break;
 8003c84:	e04a      	b.n	8003d1c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	785b      	ldrb	r3, [r3, #1]
 8003c8a:	2b09      	cmp	r3, #9
 8003c8c:	d83b      	bhi.n	8003d06 <USBD_StdDevReq+0xc2>
 8003c8e:	a201      	add	r2, pc, #4	; (adr r2, 8003c94 <USBD_StdDevReq+0x50>)
 8003c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c94:	08003ce9 	.word	0x08003ce9
 8003c98:	08003cfd 	.word	0x08003cfd
 8003c9c:	08003d07 	.word	0x08003d07
 8003ca0:	08003cf3 	.word	0x08003cf3
 8003ca4:	08003d07 	.word	0x08003d07
 8003ca8:	08003cc7 	.word	0x08003cc7
 8003cac:	08003cbd 	.word	0x08003cbd
 8003cb0:	08003d07 	.word	0x08003d07
 8003cb4:	08003cdf 	.word	0x08003cdf
 8003cb8:	08003cd1 	.word	0x08003cd1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8003cbc:	6839      	ldr	r1, [r7, #0]
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f000 fa3c 	bl	800413c <USBD_GetDescriptor>
          break;
 8003cc4:	e024      	b.n	8003d10 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8003cc6:	6839      	ldr	r1, [r7, #0]
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f000 fba1 	bl	8004410 <USBD_SetAddress>
          break;
 8003cce:	e01f      	b.n	8003d10 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8003cd0:	6839      	ldr	r1, [r7, #0]
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f000 fbe0 	bl	8004498 <USBD_SetConfig>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	73fb      	strb	r3, [r7, #15]
          break;
 8003cdc:	e018      	b.n	8003d10 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8003cde:	6839      	ldr	r1, [r7, #0]
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f000 fc83 	bl	80045ec <USBD_GetConfig>
          break;
 8003ce6:	e013      	b.n	8003d10 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8003ce8:	6839      	ldr	r1, [r7, #0]
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f000 fcb4 	bl	8004658 <USBD_GetStatus>
          break;
 8003cf0:	e00e      	b.n	8003d10 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8003cf2:	6839      	ldr	r1, [r7, #0]
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f000 fce3 	bl	80046c0 <USBD_SetFeature>
          break;
 8003cfa:	e009      	b.n	8003d10 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8003cfc:	6839      	ldr	r1, [r7, #0]
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f000 fd07 	bl	8004712 <USBD_ClrFeature>
          break;
 8003d04:	e004      	b.n	8003d10 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8003d06:	6839      	ldr	r1, [r7, #0]
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f000 fd5e 	bl	80047ca <USBD_CtlError>
          break;
 8003d0e:	bf00      	nop
      }
      break;
 8003d10:	e004      	b.n	8003d1c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8003d12:	6839      	ldr	r1, [r7, #0]
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f000 fd58 	bl	80047ca <USBD_CtlError>
      break;
 8003d1a:	bf00      	nop
  }

  return ret;
 8003d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3710      	adds	r7, #16
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop

08003d28 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8003d32:	2300      	movs	r3, #0
 8003d34:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003d3e:	2b40      	cmp	r3, #64	; 0x40
 8003d40:	d005      	beq.n	8003d4e <USBD_StdItfReq+0x26>
 8003d42:	2b40      	cmp	r3, #64	; 0x40
 8003d44:	d852      	bhi.n	8003dec <USBD_StdItfReq+0xc4>
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d001      	beq.n	8003d4e <USBD_StdItfReq+0x26>
 8003d4a:	2b20      	cmp	r3, #32
 8003d4c:	d14e      	bne.n	8003dec <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	3b01      	subs	r3, #1
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d840      	bhi.n	8003dde <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	889b      	ldrh	r3, [r3, #4]
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d836      	bhi.n	8003dd4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	889b      	ldrh	r3, [r3, #4]
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f7ff ff2f 	bl	8003bd2 <USBD_CoreFindIF>
 8003d74:	4603      	mov	r3, r0
 8003d76:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8003d78:	7bbb      	ldrb	r3, [r7, #14]
 8003d7a:	2bff      	cmp	r3, #255	; 0xff
 8003d7c:	d01d      	beq.n	8003dba <USBD_StdItfReq+0x92>
 8003d7e:	7bbb      	ldrb	r3, [r7, #14]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d11a      	bne.n	8003dba <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8003d84:	7bba      	ldrb	r2, [r7, #14]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	32ae      	adds	r2, #174	; 0xae
 8003d8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d00f      	beq.n	8003db4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8003d94:	7bba      	ldrb	r2, [r7, #14]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8003d9c:	7bba      	ldrb	r2, [r7, #14]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	32ae      	adds	r2, #174	; 0xae
 8003da2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	6839      	ldr	r1, [r7, #0]
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	4798      	blx	r3
 8003dae:	4603      	mov	r3, r0
 8003db0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8003db2:	e004      	b.n	8003dbe <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8003db4:	2303      	movs	r3, #3
 8003db6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8003db8:	e001      	b.n	8003dbe <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	88db      	ldrh	r3, [r3, #6]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d110      	bne.n	8003de8 <USBD_StdItfReq+0xc0>
 8003dc6:	7bfb      	ldrb	r3, [r7, #15]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d10d      	bne.n	8003de8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f000 fd4a 	bl	8004866 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8003dd2:	e009      	b.n	8003de8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8003dd4:	6839      	ldr	r1, [r7, #0]
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 fcf7 	bl	80047ca <USBD_CtlError>
          break;
 8003ddc:	e004      	b.n	8003de8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8003dde:	6839      	ldr	r1, [r7, #0]
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f000 fcf2 	bl	80047ca <USBD_CtlError>
          break;
 8003de6:	e000      	b.n	8003dea <USBD_StdItfReq+0xc2>
          break;
 8003de8:	bf00      	nop
      }
      break;
 8003dea:	e004      	b.n	8003df6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8003dec:	6839      	ldr	r1, [r7, #0]
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f000 fceb 	bl	80047ca <USBD_CtlError>
      break;
 8003df4:	bf00      	nop
  }

  return ret;
 8003df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3710      	adds	r7, #16
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}

08003e00 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	889b      	ldrh	r3, [r3, #4]
 8003e12:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003e1c:	2b40      	cmp	r3, #64	; 0x40
 8003e1e:	d007      	beq.n	8003e30 <USBD_StdEPReq+0x30>
 8003e20:	2b40      	cmp	r3, #64	; 0x40
 8003e22:	f200 817f 	bhi.w	8004124 <USBD_StdEPReq+0x324>
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d02a      	beq.n	8003e80 <USBD_StdEPReq+0x80>
 8003e2a:	2b20      	cmp	r3, #32
 8003e2c:	f040 817a 	bne.w	8004124 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8003e30:	7bbb      	ldrb	r3, [r7, #14]
 8003e32:	4619      	mov	r1, r3
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f7ff fed9 	bl	8003bec <USBD_CoreFindEP>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8003e3e:	7b7b      	ldrb	r3, [r7, #13]
 8003e40:	2bff      	cmp	r3, #255	; 0xff
 8003e42:	f000 8174 	beq.w	800412e <USBD_StdEPReq+0x32e>
 8003e46:	7b7b      	ldrb	r3, [r7, #13]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	f040 8170 	bne.w	800412e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8003e4e:	7b7a      	ldrb	r2, [r7, #13]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8003e56:	7b7a      	ldrb	r2, [r7, #13]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	32ae      	adds	r2, #174	; 0xae
 8003e5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	f000 8163 	beq.w	800412e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8003e68:	7b7a      	ldrb	r2, [r7, #13]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	32ae      	adds	r2, #174	; 0xae
 8003e6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	6839      	ldr	r1, [r7, #0]
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	4798      	blx	r3
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003e7e:	e156      	b.n	800412e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	785b      	ldrb	r3, [r3, #1]
 8003e84:	2b03      	cmp	r3, #3
 8003e86:	d008      	beq.n	8003e9a <USBD_StdEPReq+0x9a>
 8003e88:	2b03      	cmp	r3, #3
 8003e8a:	f300 8145 	bgt.w	8004118 <USBD_StdEPReq+0x318>
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	f000 809b 	beq.w	8003fca <USBD_StdEPReq+0x1ca>
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d03c      	beq.n	8003f12 <USBD_StdEPReq+0x112>
 8003e98:	e13e      	b.n	8004118 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d002      	beq.n	8003eac <USBD_StdEPReq+0xac>
 8003ea6:	2b03      	cmp	r3, #3
 8003ea8:	d016      	beq.n	8003ed8 <USBD_StdEPReq+0xd8>
 8003eaa:	e02c      	b.n	8003f06 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8003eac:	7bbb      	ldrb	r3, [r7, #14]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d00d      	beq.n	8003ece <USBD_StdEPReq+0xce>
 8003eb2:	7bbb      	ldrb	r3, [r7, #14]
 8003eb4:	2b80      	cmp	r3, #128	; 0x80
 8003eb6:	d00a      	beq.n	8003ece <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8003eb8:	7bbb      	ldrb	r3, [r7, #14]
 8003eba:	4619      	mov	r1, r3
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f000 fe0f 	bl	8004ae0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8003ec2:	2180      	movs	r1, #128	; 0x80
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f000 fe0b 	bl	8004ae0 <USBD_LL_StallEP>
 8003eca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8003ecc:	e020      	b.n	8003f10 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8003ece:	6839      	ldr	r1, [r7, #0]
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f000 fc7a 	bl	80047ca <USBD_CtlError>
              break;
 8003ed6:	e01b      	b.n	8003f10 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	885b      	ldrh	r3, [r3, #2]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d10e      	bne.n	8003efe <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8003ee0:	7bbb      	ldrb	r3, [r7, #14]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d00b      	beq.n	8003efe <USBD_StdEPReq+0xfe>
 8003ee6:	7bbb      	ldrb	r3, [r7, #14]
 8003ee8:	2b80      	cmp	r3, #128	; 0x80
 8003eea:	d008      	beq.n	8003efe <USBD_StdEPReq+0xfe>
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	88db      	ldrh	r3, [r3, #6]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d104      	bne.n	8003efe <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8003ef4:	7bbb      	ldrb	r3, [r7, #14]
 8003ef6:	4619      	mov	r1, r3
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f000 fdf1 	bl	8004ae0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f000 fcb1 	bl	8004866 <USBD_CtlSendStatus>

              break;
 8003f04:	e004      	b.n	8003f10 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8003f06:	6839      	ldr	r1, [r7, #0]
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f000 fc5e 	bl	80047ca <USBD_CtlError>
              break;
 8003f0e:	bf00      	nop
          }
          break;
 8003f10:	e107      	b.n	8004122 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d002      	beq.n	8003f24 <USBD_StdEPReq+0x124>
 8003f1e:	2b03      	cmp	r3, #3
 8003f20:	d016      	beq.n	8003f50 <USBD_StdEPReq+0x150>
 8003f22:	e04b      	b.n	8003fbc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8003f24:	7bbb      	ldrb	r3, [r7, #14]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d00d      	beq.n	8003f46 <USBD_StdEPReq+0x146>
 8003f2a:	7bbb      	ldrb	r3, [r7, #14]
 8003f2c:	2b80      	cmp	r3, #128	; 0x80
 8003f2e:	d00a      	beq.n	8003f46 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8003f30:	7bbb      	ldrb	r3, [r7, #14]
 8003f32:	4619      	mov	r1, r3
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f000 fdd3 	bl	8004ae0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8003f3a:	2180      	movs	r1, #128	; 0x80
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f000 fdcf 	bl	8004ae0 <USBD_LL_StallEP>
 8003f42:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8003f44:	e040      	b.n	8003fc8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8003f46:	6839      	ldr	r1, [r7, #0]
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f000 fc3e 	bl	80047ca <USBD_CtlError>
              break;
 8003f4e:	e03b      	b.n	8003fc8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	885b      	ldrh	r3, [r3, #2]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d136      	bne.n	8003fc6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8003f58:	7bbb      	ldrb	r3, [r7, #14]
 8003f5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d004      	beq.n	8003f6c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8003f62:	7bbb      	ldrb	r3, [r7, #14]
 8003f64:	4619      	mov	r1, r3
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 fdd9 	bl	8004b1e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f000 fc7a 	bl	8004866 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8003f72:	7bbb      	ldrb	r3, [r7, #14]
 8003f74:	4619      	mov	r1, r3
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f7ff fe38 	bl	8003bec <USBD_CoreFindEP>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8003f80:	7b7b      	ldrb	r3, [r7, #13]
 8003f82:	2bff      	cmp	r3, #255	; 0xff
 8003f84:	d01f      	beq.n	8003fc6 <USBD_StdEPReq+0x1c6>
 8003f86:	7b7b      	ldrb	r3, [r7, #13]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d11c      	bne.n	8003fc6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8003f8c:	7b7a      	ldrb	r2, [r7, #13]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8003f94:	7b7a      	ldrb	r2, [r7, #13]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	32ae      	adds	r2, #174	; 0xae
 8003f9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d010      	beq.n	8003fc6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8003fa4:	7b7a      	ldrb	r2, [r7, #13]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	32ae      	adds	r2, #174	; 0xae
 8003faa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	6839      	ldr	r1, [r7, #0]
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	4798      	blx	r3
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8003fba:	e004      	b.n	8003fc6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8003fbc:	6839      	ldr	r1, [r7, #0]
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f000 fc03 	bl	80047ca <USBD_CtlError>
              break;
 8003fc4:	e000      	b.n	8003fc8 <USBD_StdEPReq+0x1c8>
              break;
 8003fc6:	bf00      	nop
          }
          break;
 8003fc8:	e0ab      	b.n	8004122 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d002      	beq.n	8003fdc <USBD_StdEPReq+0x1dc>
 8003fd6:	2b03      	cmp	r3, #3
 8003fd8:	d032      	beq.n	8004040 <USBD_StdEPReq+0x240>
 8003fda:	e097      	b.n	800410c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8003fdc:	7bbb      	ldrb	r3, [r7, #14]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d007      	beq.n	8003ff2 <USBD_StdEPReq+0x1f2>
 8003fe2:	7bbb      	ldrb	r3, [r7, #14]
 8003fe4:	2b80      	cmp	r3, #128	; 0x80
 8003fe6:	d004      	beq.n	8003ff2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8003fe8:	6839      	ldr	r1, [r7, #0]
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f000 fbed 	bl	80047ca <USBD_CtlError>
                break;
 8003ff0:	e091      	b.n	8004116 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8003ff2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	da0b      	bge.n	8004012 <USBD_StdEPReq+0x212>
 8003ffa:	7bbb      	ldrb	r3, [r7, #14]
 8003ffc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004000:	4613      	mov	r3, r2
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	4413      	add	r3, r2
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	3310      	adds	r3, #16
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	4413      	add	r3, r2
 800400e:	3304      	adds	r3, #4
 8004010:	e00b      	b.n	800402a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8004012:	7bbb      	ldrb	r3, [r7, #14]
 8004014:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004018:	4613      	mov	r3, r2
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	4413      	add	r3, r2
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	4413      	add	r3, r2
 8004028:	3304      	adds	r3, #4
 800402a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	2200      	movs	r2, #0
 8004030:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	2202      	movs	r2, #2
 8004036:	4619      	mov	r1, r3
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f000 fbd7 	bl	80047ec <USBD_CtlSendData>
              break;
 800403e:	e06a      	b.n	8004116 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8004040:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004044:	2b00      	cmp	r3, #0
 8004046:	da11      	bge.n	800406c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004048:	7bbb      	ldrb	r3, [r7, #14]
 800404a:	f003 020f 	and.w	r2, r3, #15
 800404e:	6879      	ldr	r1, [r7, #4]
 8004050:	4613      	mov	r3, r2
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	4413      	add	r3, r2
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	440b      	add	r3, r1
 800405a:	3324      	adds	r3, #36	; 0x24
 800405c:	881b      	ldrh	r3, [r3, #0]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d117      	bne.n	8004092 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8004062:	6839      	ldr	r1, [r7, #0]
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f000 fbb0 	bl	80047ca <USBD_CtlError>
                  break;
 800406a:	e054      	b.n	8004116 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800406c:	7bbb      	ldrb	r3, [r7, #14]
 800406e:	f003 020f 	and.w	r2, r3, #15
 8004072:	6879      	ldr	r1, [r7, #4]
 8004074:	4613      	mov	r3, r2
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	4413      	add	r3, r2
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	440b      	add	r3, r1
 800407e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004082:	881b      	ldrh	r3, [r3, #0]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d104      	bne.n	8004092 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8004088:	6839      	ldr	r1, [r7, #0]
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f000 fb9d 	bl	80047ca <USBD_CtlError>
                  break;
 8004090:	e041      	b.n	8004116 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004092:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004096:	2b00      	cmp	r3, #0
 8004098:	da0b      	bge.n	80040b2 <USBD_StdEPReq+0x2b2>
 800409a:	7bbb      	ldrb	r3, [r7, #14]
 800409c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80040a0:	4613      	mov	r3, r2
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	4413      	add	r3, r2
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	3310      	adds	r3, #16
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	4413      	add	r3, r2
 80040ae:	3304      	adds	r3, #4
 80040b0:	e00b      	b.n	80040ca <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80040b2:	7bbb      	ldrb	r3, [r7, #14]
 80040b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80040b8:	4613      	mov	r3, r2
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	4413      	add	r3, r2
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	4413      	add	r3, r2
 80040c8:	3304      	adds	r3, #4
 80040ca:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80040cc:	7bbb      	ldrb	r3, [r7, #14]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d002      	beq.n	80040d8 <USBD_StdEPReq+0x2d8>
 80040d2:	7bbb      	ldrb	r3, [r7, #14]
 80040d4:	2b80      	cmp	r3, #128	; 0x80
 80040d6:	d103      	bne.n	80040e0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	2200      	movs	r2, #0
 80040dc:	601a      	str	r2, [r3, #0]
 80040de:	e00e      	b.n	80040fe <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80040e0:	7bbb      	ldrb	r3, [r7, #14]
 80040e2:	4619      	mov	r1, r3
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f000 fd39 	bl	8004b5c <USBD_LL_IsStallEP>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d003      	beq.n	80040f8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	2201      	movs	r2, #1
 80040f4:	601a      	str	r2, [r3, #0]
 80040f6:	e002      	b.n	80040fe <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	2200      	movs	r2, #0
 80040fc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	2202      	movs	r2, #2
 8004102:	4619      	mov	r1, r3
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f000 fb71 	bl	80047ec <USBD_CtlSendData>
              break;
 800410a:	e004      	b.n	8004116 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800410c:	6839      	ldr	r1, [r7, #0]
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 fb5b 	bl	80047ca <USBD_CtlError>
              break;
 8004114:	bf00      	nop
          }
          break;
 8004116:	e004      	b.n	8004122 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8004118:	6839      	ldr	r1, [r7, #0]
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f000 fb55 	bl	80047ca <USBD_CtlError>
          break;
 8004120:	bf00      	nop
      }
      break;
 8004122:	e005      	b.n	8004130 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8004124:	6839      	ldr	r1, [r7, #0]
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f000 fb4f 	bl	80047ca <USBD_CtlError>
      break;
 800412c:	e000      	b.n	8004130 <USBD_StdEPReq+0x330>
      break;
 800412e:	bf00      	nop
  }

  return ret;
 8004130:	7bfb      	ldrb	r3, [r7, #15]
}
 8004132:	4618      	mov	r0, r3
 8004134:	3710      	adds	r7, #16
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
	...

0800413c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004146:	2300      	movs	r3, #0
 8004148:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800414a:	2300      	movs	r3, #0
 800414c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800414e:	2300      	movs	r3, #0
 8004150:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	885b      	ldrh	r3, [r3, #2]
 8004156:	0a1b      	lsrs	r3, r3, #8
 8004158:	b29b      	uxth	r3, r3
 800415a:	3b01      	subs	r3, #1
 800415c:	2b06      	cmp	r3, #6
 800415e:	f200 8128 	bhi.w	80043b2 <USBD_GetDescriptor+0x276>
 8004162:	a201      	add	r2, pc, #4	; (adr r2, 8004168 <USBD_GetDescriptor+0x2c>)
 8004164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004168:	08004185 	.word	0x08004185
 800416c:	0800419d 	.word	0x0800419d
 8004170:	080041dd 	.word	0x080041dd
 8004174:	080043b3 	.word	0x080043b3
 8004178:	080043b3 	.word	0x080043b3
 800417c:	08004353 	.word	0x08004353
 8004180:	0800437f 	.word	0x0800437f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	7c12      	ldrb	r2, [r2, #16]
 8004190:	f107 0108 	add.w	r1, r7, #8
 8004194:	4610      	mov	r0, r2
 8004196:	4798      	blx	r3
 8004198:	60f8      	str	r0, [r7, #12]
      break;
 800419a:	e112      	b.n	80043c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	7c1b      	ldrb	r3, [r3, #16]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d10d      	bne.n	80041c0 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80041aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ac:	f107 0208 	add.w	r2, r7, #8
 80041b0:	4610      	mov	r0, r2
 80041b2:	4798      	blx	r3
 80041b4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	3301      	adds	r3, #1
 80041ba:	2202      	movs	r2, #2
 80041bc:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80041be:	e100      	b.n	80043c2 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80041c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c8:	f107 0208 	add.w	r2, r7, #8
 80041cc:	4610      	mov	r0, r2
 80041ce:	4798      	blx	r3
 80041d0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	3301      	adds	r3, #1
 80041d6:	2202      	movs	r2, #2
 80041d8:	701a      	strb	r2, [r3, #0]
      break;
 80041da:	e0f2      	b.n	80043c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	885b      	ldrh	r3, [r3, #2]
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	2b05      	cmp	r3, #5
 80041e4:	f200 80ac 	bhi.w	8004340 <USBD_GetDescriptor+0x204>
 80041e8:	a201      	add	r2, pc, #4	; (adr r2, 80041f0 <USBD_GetDescriptor+0xb4>)
 80041ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ee:	bf00      	nop
 80041f0:	08004209 	.word	0x08004209
 80041f4:	0800423d 	.word	0x0800423d
 80041f8:	08004271 	.word	0x08004271
 80041fc:	080042a5 	.word	0x080042a5
 8004200:	080042d9 	.word	0x080042d9
 8004204:	0800430d 	.word	0x0800430d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d00b      	beq.n	800422c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	7c12      	ldrb	r2, [r2, #16]
 8004220:	f107 0108 	add.w	r1, r7, #8
 8004224:	4610      	mov	r0, r2
 8004226:	4798      	blx	r3
 8004228:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800422a:	e091      	b.n	8004350 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800422c:	6839      	ldr	r1, [r7, #0]
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 facb 	bl	80047ca <USBD_CtlError>
            err++;
 8004234:	7afb      	ldrb	r3, [r7, #11]
 8004236:	3301      	adds	r3, #1
 8004238:	72fb      	strb	r3, [r7, #11]
          break;
 800423a:	e089      	b.n	8004350 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00b      	beq.n	8004260 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	7c12      	ldrb	r2, [r2, #16]
 8004254:	f107 0108 	add.w	r1, r7, #8
 8004258:	4610      	mov	r0, r2
 800425a:	4798      	blx	r3
 800425c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800425e:	e077      	b.n	8004350 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004260:	6839      	ldr	r1, [r7, #0]
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f000 fab1 	bl	80047ca <USBD_CtlError>
            err++;
 8004268:	7afb      	ldrb	r3, [r7, #11]
 800426a:	3301      	adds	r3, #1
 800426c:	72fb      	strb	r3, [r7, #11]
          break;
 800426e:	e06f      	b.n	8004350 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d00b      	beq.n	8004294 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	7c12      	ldrb	r2, [r2, #16]
 8004288:	f107 0108 	add.w	r1, r7, #8
 800428c:	4610      	mov	r0, r2
 800428e:	4798      	blx	r3
 8004290:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004292:	e05d      	b.n	8004350 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004294:	6839      	ldr	r1, [r7, #0]
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f000 fa97 	bl	80047ca <USBD_CtlError>
            err++;
 800429c:	7afb      	ldrb	r3, [r7, #11]
 800429e:	3301      	adds	r3, #1
 80042a0:	72fb      	strb	r3, [r7, #11]
          break;
 80042a2:	e055      	b.n	8004350 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80042aa:	691b      	ldr	r3, [r3, #16]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d00b      	beq.n	80042c8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80042b6:	691b      	ldr	r3, [r3, #16]
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	7c12      	ldrb	r2, [r2, #16]
 80042bc:	f107 0108 	add.w	r1, r7, #8
 80042c0:	4610      	mov	r0, r2
 80042c2:	4798      	blx	r3
 80042c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80042c6:	e043      	b.n	8004350 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80042c8:	6839      	ldr	r1, [r7, #0]
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f000 fa7d 	bl	80047ca <USBD_CtlError>
            err++;
 80042d0:	7afb      	ldrb	r3, [r7, #11]
 80042d2:	3301      	adds	r3, #1
 80042d4:	72fb      	strb	r3, [r7, #11]
          break;
 80042d6:	e03b      	b.n	8004350 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80042de:	695b      	ldr	r3, [r3, #20]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d00b      	beq.n	80042fc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80042ea:	695b      	ldr	r3, [r3, #20]
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	7c12      	ldrb	r2, [r2, #16]
 80042f0:	f107 0108 	add.w	r1, r7, #8
 80042f4:	4610      	mov	r0, r2
 80042f6:	4798      	blx	r3
 80042f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80042fa:	e029      	b.n	8004350 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80042fc:	6839      	ldr	r1, [r7, #0]
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 fa63 	bl	80047ca <USBD_CtlError>
            err++;
 8004304:	7afb      	ldrb	r3, [r7, #11]
 8004306:	3301      	adds	r3, #1
 8004308:	72fb      	strb	r3, [r7, #11]
          break;
 800430a:	e021      	b.n	8004350 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004312:	699b      	ldr	r3, [r3, #24]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d00b      	beq.n	8004330 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800431e:	699b      	ldr	r3, [r3, #24]
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	7c12      	ldrb	r2, [r2, #16]
 8004324:	f107 0108 	add.w	r1, r7, #8
 8004328:	4610      	mov	r0, r2
 800432a:	4798      	blx	r3
 800432c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800432e:	e00f      	b.n	8004350 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004330:	6839      	ldr	r1, [r7, #0]
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f000 fa49 	bl	80047ca <USBD_CtlError>
            err++;
 8004338:	7afb      	ldrb	r3, [r7, #11]
 800433a:	3301      	adds	r3, #1
 800433c:	72fb      	strb	r3, [r7, #11]
          break;
 800433e:	e007      	b.n	8004350 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8004340:	6839      	ldr	r1, [r7, #0]
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f000 fa41 	bl	80047ca <USBD_CtlError>
          err++;
 8004348:	7afb      	ldrb	r3, [r7, #11]
 800434a:	3301      	adds	r3, #1
 800434c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800434e:	bf00      	nop
      }
      break;
 8004350:	e037      	b.n	80043c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	7c1b      	ldrb	r3, [r3, #16]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d109      	bne.n	800436e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004362:	f107 0208 	add.w	r2, r7, #8
 8004366:	4610      	mov	r0, r2
 8004368:	4798      	blx	r3
 800436a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800436c:	e029      	b.n	80043c2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800436e:	6839      	ldr	r1, [r7, #0]
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f000 fa2a 	bl	80047ca <USBD_CtlError>
        err++;
 8004376:	7afb      	ldrb	r3, [r7, #11]
 8004378:	3301      	adds	r3, #1
 800437a:	72fb      	strb	r3, [r7, #11]
      break;
 800437c:	e021      	b.n	80043c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	7c1b      	ldrb	r3, [r3, #16]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d10d      	bne.n	80043a2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800438c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800438e:	f107 0208 	add.w	r2, r7, #8
 8004392:	4610      	mov	r0, r2
 8004394:	4798      	blx	r3
 8004396:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	3301      	adds	r3, #1
 800439c:	2207      	movs	r2, #7
 800439e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80043a0:	e00f      	b.n	80043c2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80043a2:	6839      	ldr	r1, [r7, #0]
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f000 fa10 	bl	80047ca <USBD_CtlError>
        err++;
 80043aa:	7afb      	ldrb	r3, [r7, #11]
 80043ac:	3301      	adds	r3, #1
 80043ae:	72fb      	strb	r3, [r7, #11]
      break;
 80043b0:	e007      	b.n	80043c2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80043b2:	6839      	ldr	r1, [r7, #0]
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f000 fa08 	bl	80047ca <USBD_CtlError>
      err++;
 80043ba:	7afb      	ldrb	r3, [r7, #11]
 80043bc:	3301      	adds	r3, #1
 80043be:	72fb      	strb	r3, [r7, #11]
      break;
 80043c0:	bf00      	nop
  }

  if (err != 0U)
 80043c2:	7afb      	ldrb	r3, [r7, #11]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d11e      	bne.n	8004406 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	88db      	ldrh	r3, [r3, #6]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d016      	beq.n	80043fe <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80043d0:	893b      	ldrh	r3, [r7, #8]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d00e      	beq.n	80043f4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	88da      	ldrh	r2, [r3, #6]
 80043da:	893b      	ldrh	r3, [r7, #8]
 80043dc:	4293      	cmp	r3, r2
 80043de:	bf28      	it	cs
 80043e0:	4613      	movcs	r3, r2
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80043e6:	893b      	ldrh	r3, [r7, #8]
 80043e8:	461a      	mov	r2, r3
 80043ea:	68f9      	ldr	r1, [r7, #12]
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f000 f9fd 	bl	80047ec <USBD_CtlSendData>
 80043f2:	e009      	b.n	8004408 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80043f4:	6839      	ldr	r1, [r7, #0]
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 f9e7 	bl	80047ca <USBD_CtlError>
 80043fc:	e004      	b.n	8004408 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f000 fa31 	bl	8004866 <USBD_CtlSendStatus>
 8004404:	e000      	b.n	8004408 <USBD_GetDescriptor+0x2cc>
    return;
 8004406:	bf00      	nop
  }
}
 8004408:	3710      	adds	r7, #16
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop

08004410 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	889b      	ldrh	r3, [r3, #4]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d131      	bne.n	8004486 <USBD_SetAddress+0x76>
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	88db      	ldrh	r3, [r3, #6]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d12d      	bne.n	8004486 <USBD_SetAddress+0x76>
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	885b      	ldrh	r3, [r3, #2]
 800442e:	2b7f      	cmp	r3, #127	; 0x7f
 8004430:	d829      	bhi.n	8004486 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	885b      	ldrh	r3, [r3, #2]
 8004436:	b2db      	uxtb	r3, r3
 8004438:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800443c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004444:	b2db      	uxtb	r3, r3
 8004446:	2b03      	cmp	r3, #3
 8004448:	d104      	bne.n	8004454 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800444a:	6839      	ldr	r1, [r7, #0]
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f000 f9bc 	bl	80047ca <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004452:	e01d      	b.n	8004490 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	7bfa      	ldrb	r2, [r7, #15]
 8004458:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800445c:	7bfb      	ldrb	r3, [r7, #15]
 800445e:	4619      	mov	r1, r3
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f000 fba7 	bl	8004bb4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f000 f9fd 	bl	8004866 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800446c:	7bfb      	ldrb	r3, [r7, #15]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d004      	beq.n	800447c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2202      	movs	r2, #2
 8004476:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800447a:	e009      	b.n	8004490 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004484:	e004      	b.n	8004490 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8004486:	6839      	ldr	r1, [r7, #0]
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f000 f99e 	bl	80047ca <USBD_CtlError>
  }
}
 800448e:	bf00      	nop
 8004490:	bf00      	nop
 8004492:	3710      	adds	r7, #16
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}

08004498 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b084      	sub	sp, #16
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80044a2:	2300      	movs	r3, #0
 80044a4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	885b      	ldrh	r3, [r3, #2]
 80044aa:	b2da      	uxtb	r2, r3
 80044ac:	4b4e      	ldr	r3, [pc, #312]	; (80045e8 <USBD_SetConfig+0x150>)
 80044ae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80044b0:	4b4d      	ldr	r3, [pc, #308]	; (80045e8 <USBD_SetConfig+0x150>)
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d905      	bls.n	80044c4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80044b8:	6839      	ldr	r1, [r7, #0]
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 f985 	bl	80047ca <USBD_CtlError>
    return USBD_FAIL;
 80044c0:	2303      	movs	r3, #3
 80044c2:	e08c      	b.n	80045de <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d002      	beq.n	80044d6 <USBD_SetConfig+0x3e>
 80044d0:	2b03      	cmp	r3, #3
 80044d2:	d029      	beq.n	8004528 <USBD_SetConfig+0x90>
 80044d4:	e075      	b.n	80045c2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80044d6:	4b44      	ldr	r3, [pc, #272]	; (80045e8 <USBD_SetConfig+0x150>)
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d020      	beq.n	8004520 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80044de:	4b42      	ldr	r3, [pc, #264]	; (80045e8 <USBD_SetConfig+0x150>)
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	461a      	mov	r2, r3
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80044e8:	4b3f      	ldr	r3, [pc, #252]	; (80045e8 <USBD_SetConfig+0x150>)
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	4619      	mov	r1, r3
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f7ff f83d 	bl	800356e <USBD_SetClassConfig>
 80044f4:	4603      	mov	r3, r0
 80044f6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80044f8:	7bfb      	ldrb	r3, [r7, #15]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d008      	beq.n	8004510 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80044fe:	6839      	ldr	r1, [r7, #0]
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f000 f962 	bl	80047ca <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2202      	movs	r2, #2
 800450a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800450e:	e065      	b.n	80045dc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f000 f9a8 	bl	8004866 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2203      	movs	r2, #3
 800451a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800451e:	e05d      	b.n	80045dc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f000 f9a0 	bl	8004866 <USBD_CtlSendStatus>
      break;
 8004526:	e059      	b.n	80045dc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8004528:	4b2f      	ldr	r3, [pc, #188]	; (80045e8 <USBD_SetConfig+0x150>)
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d112      	bne.n	8004556 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2202      	movs	r2, #2
 8004534:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8004538:	4b2b      	ldr	r3, [pc, #172]	; (80045e8 <USBD_SetConfig+0x150>)
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	461a      	mov	r2, r3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8004542:	4b29      	ldr	r3, [pc, #164]	; (80045e8 <USBD_SetConfig+0x150>)
 8004544:	781b      	ldrb	r3, [r3, #0]
 8004546:	4619      	mov	r1, r3
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f7ff f82c 	bl	80035a6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f000 f989 	bl	8004866 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8004554:	e042      	b.n	80045dc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8004556:	4b24      	ldr	r3, [pc, #144]	; (80045e8 <USBD_SetConfig+0x150>)
 8004558:	781b      	ldrb	r3, [r3, #0]
 800455a:	461a      	mov	r2, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	429a      	cmp	r2, r3
 8004562:	d02a      	beq.n	80045ba <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	b2db      	uxtb	r3, r3
 800456a:	4619      	mov	r1, r3
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f7ff f81a 	bl	80035a6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8004572:	4b1d      	ldr	r3, [pc, #116]	; (80045e8 <USBD_SetConfig+0x150>)
 8004574:	781b      	ldrb	r3, [r3, #0]
 8004576:	461a      	mov	r2, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800457c:	4b1a      	ldr	r3, [pc, #104]	; (80045e8 <USBD_SetConfig+0x150>)
 800457e:	781b      	ldrb	r3, [r3, #0]
 8004580:	4619      	mov	r1, r3
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f7fe fff3 	bl	800356e <USBD_SetClassConfig>
 8004588:	4603      	mov	r3, r0
 800458a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800458c:	7bfb      	ldrb	r3, [r7, #15]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d00f      	beq.n	80045b2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8004592:	6839      	ldr	r1, [r7, #0]
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f000 f918 	bl	80047ca <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	4619      	mov	r1, r3
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f7fe ffff 	bl	80035a6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2202      	movs	r2, #2
 80045ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80045b0:	e014      	b.n	80045dc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f000 f957 	bl	8004866 <USBD_CtlSendStatus>
      break;
 80045b8:	e010      	b.n	80045dc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f000 f953 	bl	8004866 <USBD_CtlSendStatus>
      break;
 80045c0:	e00c      	b.n	80045dc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80045c2:	6839      	ldr	r1, [r7, #0]
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f000 f900 	bl	80047ca <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80045ca:	4b07      	ldr	r3, [pc, #28]	; (80045e8 <USBD_SetConfig+0x150>)
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	4619      	mov	r1, r3
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f7fe ffe8 	bl	80035a6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80045d6:	2303      	movs	r3, #3
 80045d8:	73fb      	strb	r3, [r7, #15]
      break;
 80045da:	bf00      	nop
  }

  return ret;
 80045dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3710      	adds	r7, #16
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	bf00      	nop
 80045e8:	2000002c 	.word	0x2000002c

080045ec <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b082      	sub	sp, #8
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	88db      	ldrh	r3, [r3, #6]
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d004      	beq.n	8004608 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80045fe:	6839      	ldr	r1, [r7, #0]
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f000 f8e2 	bl	80047ca <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8004606:	e023      	b.n	8004650 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800460e:	b2db      	uxtb	r3, r3
 8004610:	2b02      	cmp	r3, #2
 8004612:	dc02      	bgt.n	800461a <USBD_GetConfig+0x2e>
 8004614:	2b00      	cmp	r3, #0
 8004616:	dc03      	bgt.n	8004620 <USBD_GetConfig+0x34>
 8004618:	e015      	b.n	8004646 <USBD_GetConfig+0x5a>
 800461a:	2b03      	cmp	r3, #3
 800461c:	d00b      	beq.n	8004636 <USBD_GetConfig+0x4a>
 800461e:	e012      	b.n	8004646 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2200      	movs	r2, #0
 8004624:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	3308      	adds	r3, #8
 800462a:	2201      	movs	r2, #1
 800462c:	4619      	mov	r1, r3
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f000 f8dc 	bl	80047ec <USBD_CtlSendData>
        break;
 8004634:	e00c      	b.n	8004650 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	3304      	adds	r3, #4
 800463a:	2201      	movs	r2, #1
 800463c:	4619      	mov	r1, r3
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f000 f8d4 	bl	80047ec <USBD_CtlSendData>
        break;
 8004644:	e004      	b.n	8004650 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8004646:	6839      	ldr	r1, [r7, #0]
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f000 f8be 	bl	80047ca <USBD_CtlError>
        break;
 800464e:	bf00      	nop
}
 8004650:	bf00      	nop
 8004652:	3708      	adds	r7, #8
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}

08004658 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b082      	sub	sp, #8
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004668:	b2db      	uxtb	r3, r3
 800466a:	3b01      	subs	r3, #1
 800466c:	2b02      	cmp	r3, #2
 800466e:	d81e      	bhi.n	80046ae <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	88db      	ldrh	r3, [r3, #6]
 8004674:	2b02      	cmp	r3, #2
 8004676:	d004      	beq.n	8004682 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8004678:	6839      	ldr	r1, [r7, #0]
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f000 f8a5 	bl	80047ca <USBD_CtlError>
        break;
 8004680:	e01a      	b.n	80046b8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2201      	movs	r2, #1
 8004686:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800468e:	2b00      	cmp	r3, #0
 8004690:	d005      	beq.n	800469e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	f043 0202 	orr.w	r2, r3, #2
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	330c      	adds	r3, #12
 80046a2:	2202      	movs	r2, #2
 80046a4:	4619      	mov	r1, r3
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f000 f8a0 	bl	80047ec <USBD_CtlSendData>
      break;
 80046ac:	e004      	b.n	80046b8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80046ae:	6839      	ldr	r1, [r7, #0]
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f000 f88a 	bl	80047ca <USBD_CtlError>
      break;
 80046b6:	bf00      	nop
  }
}
 80046b8:	bf00      	nop
 80046ba:	3708      	adds	r7, #8
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	885b      	ldrh	r3, [r3, #2]
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d107      	bne.n	80046e2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2201      	movs	r2, #1
 80046d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f000 f8c3 	bl	8004866 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80046e0:	e013      	b.n	800470a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	885b      	ldrh	r3, [r3, #2]
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d10b      	bne.n	8004702 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	889b      	ldrh	r3, [r3, #4]
 80046ee:	0a1b      	lsrs	r3, r3, #8
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	b2da      	uxtb	r2, r3
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f000 f8b3 	bl	8004866 <USBD_CtlSendStatus>
}
 8004700:	e003      	b.n	800470a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8004702:	6839      	ldr	r1, [r7, #0]
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f000 f860 	bl	80047ca <USBD_CtlError>
}
 800470a:	bf00      	nop
 800470c:	3708      	adds	r7, #8
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}

08004712 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004712:	b580      	push	{r7, lr}
 8004714:	b082      	sub	sp, #8
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]
 800471a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004722:	b2db      	uxtb	r3, r3
 8004724:	3b01      	subs	r3, #1
 8004726:	2b02      	cmp	r3, #2
 8004728:	d80b      	bhi.n	8004742 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	885b      	ldrh	r3, [r3, #2]
 800472e:	2b01      	cmp	r3, #1
 8004730:	d10c      	bne.n	800474c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 f893 	bl	8004866 <USBD_CtlSendStatus>
      }
      break;
 8004740:	e004      	b.n	800474c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8004742:	6839      	ldr	r1, [r7, #0]
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f000 f840 	bl	80047ca <USBD_CtlError>
      break;
 800474a:	e000      	b.n	800474e <USBD_ClrFeature+0x3c>
      break;
 800474c:	bf00      	nop
  }
}
 800474e:	bf00      	nop
 8004750:	3708      	adds	r7, #8
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}

08004756 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8004756:	b580      	push	{r7, lr}
 8004758:	b084      	sub	sp, #16
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]
 800475e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	781a      	ldrb	r2, [r3, #0]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	3301      	adds	r3, #1
 8004770:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	781a      	ldrb	r2, [r3, #0]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	3301      	adds	r3, #1
 800477e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8004780:	68f8      	ldr	r0, [r7, #12]
 8004782:	f7ff fa40 	bl	8003c06 <SWAPBYTE>
 8004786:	4603      	mov	r3, r0
 8004788:	461a      	mov	r2, r3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	3301      	adds	r3, #1
 8004792:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	3301      	adds	r3, #1
 8004798:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800479a:	68f8      	ldr	r0, [r7, #12]
 800479c:	f7ff fa33 	bl	8003c06 <SWAPBYTE>
 80047a0:	4603      	mov	r3, r0
 80047a2:	461a      	mov	r2, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	3301      	adds	r3, #1
 80047ac:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	3301      	adds	r3, #1
 80047b2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80047b4:	68f8      	ldr	r0, [r7, #12]
 80047b6:	f7ff fa26 	bl	8003c06 <SWAPBYTE>
 80047ba:	4603      	mov	r3, r0
 80047bc:	461a      	mov	r2, r3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	80da      	strh	r2, [r3, #6]
}
 80047c2:	bf00      	nop
 80047c4:	3710      	adds	r7, #16
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}

080047ca <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80047ca:	b580      	push	{r7, lr}
 80047cc:	b082      	sub	sp, #8
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	6078      	str	r0, [r7, #4]
 80047d2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80047d4:	2180      	movs	r1, #128	; 0x80
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f000 f982 	bl	8004ae0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80047dc:	2100      	movs	r1, #0
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f000 f97e 	bl	8004ae0 <USBD_LL_StallEP>
}
 80047e4:	bf00      	nop
 80047e6:	3708      	adds	r7, #8
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}

080047ec <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b084      	sub	sp, #16
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	60f8      	str	r0, [r7, #12]
 80047f4:	60b9      	str	r1, [r7, #8]
 80047f6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2202      	movs	r2, #2
 80047fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	68ba      	ldr	r2, [r7, #8]
 8004810:	2100      	movs	r1, #0
 8004812:	68f8      	ldr	r0, [r7, #12]
 8004814:	f000 f9ed 	bl	8004bf2 <USBD_LL_Transmit>

  return USBD_OK;
 8004818:	2300      	movs	r3, #0
}
 800481a:	4618      	mov	r0, r3
 800481c:	3710      	adds	r7, #16
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}

08004822 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8004822:	b580      	push	{r7, lr}
 8004824:	b084      	sub	sp, #16
 8004826:	af00      	add	r7, sp, #0
 8004828:	60f8      	str	r0, [r7, #12]
 800482a:	60b9      	str	r1, [r7, #8]
 800482c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	68ba      	ldr	r2, [r7, #8]
 8004832:	2100      	movs	r1, #0
 8004834:	68f8      	ldr	r0, [r7, #12]
 8004836:	f000 f9dc 	bl	8004bf2 <USBD_LL_Transmit>

  return USBD_OK;
 800483a:	2300      	movs	r3, #0
}
 800483c:	4618      	mov	r0, r3
 800483e:	3710      	adds	r7, #16
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}

08004844 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b084      	sub	sp, #16
 8004848:	af00      	add	r7, sp, #0
 800484a:	60f8      	str	r0, [r7, #12]
 800484c:	60b9      	str	r1, [r7, #8]
 800484e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	68ba      	ldr	r2, [r7, #8]
 8004854:	2100      	movs	r1, #0
 8004856:	68f8      	ldr	r0, [r7, #12]
 8004858:	f000 f9ec 	bl	8004c34 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800485c:	2300      	movs	r3, #0
}
 800485e:	4618      	mov	r0, r3
 8004860:	3710      	adds	r7, #16
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}

08004866 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8004866:	b580      	push	{r7, lr}
 8004868:	b082      	sub	sp, #8
 800486a:	af00      	add	r7, sp, #0
 800486c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2204      	movs	r2, #4
 8004872:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8004876:	2300      	movs	r3, #0
 8004878:	2200      	movs	r2, #0
 800487a:	2100      	movs	r1, #0
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f000 f9b8 	bl	8004bf2 <USBD_LL_Transmit>

  return USBD_OK;
 8004882:	2300      	movs	r3, #0
}
 8004884:	4618      	mov	r0, r3
 8004886:	3708      	adds	r7, #8
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2205      	movs	r2, #5
 8004898:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800489c:	2300      	movs	r3, #0
 800489e:	2200      	movs	r2, #0
 80048a0:	2100      	movs	r1, #0
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 f9c6 	bl	8004c34 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80048a8:	2300      	movs	r3, #0
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3708      	adds	r7, #8
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}

080048b2 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80048b2:	b580      	push	{r7, lr}
 80048b4:	b082      	sub	sp, #8
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80048c6:	4619      	mov	r1, r3
 80048c8:	4610      	mov	r0, r2
 80048ca:	f7fe fe86 	bl	80035da <USBD_LL_SetupStage>
}
 80048ce:	bf00      	nop
 80048d0:	3708      	adds	r7, #8
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}

080048d6 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80048d6:	b580      	push	{r7, lr}
 80048d8:	b082      	sub	sp, #8
 80048da:	af00      	add	r7, sp, #0
 80048dc:	6078      	str	r0, [r7, #4]
 80048de:	460b      	mov	r3, r1
 80048e0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80048e8:	78fa      	ldrb	r2, [r7, #3]
 80048ea:	6879      	ldr	r1, [r7, #4]
 80048ec:	4613      	mov	r3, r2
 80048ee:	00db      	lsls	r3, r3, #3
 80048f0:	4413      	add	r3, r2
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	440b      	add	r3, r1
 80048f6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	78fb      	ldrb	r3, [r7, #3]
 80048fe:	4619      	mov	r1, r3
 8004900:	f7fe fec0 	bl	8003684 <USBD_LL_DataOutStage>
}
 8004904:	bf00      	nop
 8004906:	3708      	adds	r7, #8
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}

0800490c <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b082      	sub	sp, #8
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	460b      	mov	r3, r1
 8004916:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800491e:	78fa      	ldrb	r2, [r7, #3]
 8004920:	6879      	ldr	r1, [r7, #4]
 8004922:	4613      	mov	r3, r2
 8004924:	00db      	lsls	r3, r3, #3
 8004926:	4413      	add	r3, r2
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	440b      	add	r3, r1
 800492c:	334c      	adds	r3, #76	; 0x4c
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	78fb      	ldrb	r3, [r7, #3]
 8004932:	4619      	mov	r1, r3
 8004934:	f7fe ff59 	bl	80037ea <USBD_LL_DataInStage>
}
 8004938:	bf00      	nop
 800493a:	3708      	adds	r7, #8
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}

08004940 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b082      	sub	sp, #8
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800494e:	4618      	mov	r0, r3
 8004950:	f7ff f88d 	bl	8003a6e <USBD_LL_SOF>
}
 8004954:	bf00      	nop
 8004956:	3708      	adds	r7, #8
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}

0800495c <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b084      	sub	sp, #16
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8004964:	2301      	movs	r3, #1
 8004966:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d102      	bne.n	8004976 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8004970:	2300      	movs	r3, #0
 8004972:	73fb      	strb	r3, [r7, #15]
 8004974:	e008      	b.n	8004988 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	2b02      	cmp	r3, #2
 800497c:	d102      	bne.n	8004984 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800497e:	2301      	movs	r3, #1
 8004980:	73fb      	strb	r3, [r7, #15]
 8004982:	e001      	b.n	8004988 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8004984:	f7fb fe92 	bl	80006ac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800498e:	7bfa      	ldrb	r2, [r7, #15]
 8004990:	4611      	mov	r1, r2
 8004992:	4618      	mov	r0, r3
 8004994:	f7ff f82d 	bl	80039f2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800499e:	4618      	mov	r0, r3
 80049a0:	f7fe ffd5 	bl	800394e <USBD_LL_Reset>
}
 80049a4:	bf00      	nop
 80049a6:	3710      	adds	r7, #16
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}

080049ac <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b082      	sub	sp, #8
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7ff f829 	bl	8003a12 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	6812      	ldr	r2, [r2, #0]
 80049ce:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80049d2:	f043 0301 	orr.w	r3, r3, #1
 80049d6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6a1b      	ldr	r3, [r3, #32]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d005      	beq.n	80049ec <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80049e0:	4b04      	ldr	r3, [pc, #16]	; (80049f4 <HAL_PCD_SuspendCallback+0x48>)
 80049e2:	691b      	ldr	r3, [r3, #16]
 80049e4:	4a03      	ldr	r2, [pc, #12]	; (80049f4 <HAL_PCD_SuspendCallback+0x48>)
 80049e6:	f043 0306 	orr.w	r3, r3, #6
 80049ea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80049ec:	bf00      	nop
 80049ee:	3708      	adds	r7, #8
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	e000ed00 	.word	0xe000ed00

080049f8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8004a06:	4618      	mov	r0, r3
 8004a08:	f7ff f819 	bl	8003a3e <USBD_LL_Resume>
}
 8004a0c:	bf00      	nop
 8004a0e:	3708      	adds	r7, #8
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}

08004a14 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b082      	sub	sp, #8
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	460b      	mov	r3, r1
 8004a1e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8004a26:	78fa      	ldrb	r2, [r7, #3]
 8004a28:	4611      	mov	r1, r2
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f7ff f871 	bl	8003b12 <USBD_LL_IsoOUTIncomplete>
}
 8004a30:	bf00      	nop
 8004a32:	3708      	adds	r7, #8
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}

08004a38 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b082      	sub	sp, #8
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	460b      	mov	r3, r1
 8004a42:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8004a4a:	78fa      	ldrb	r2, [r7, #3]
 8004a4c:	4611      	mov	r1, r2
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f7ff f82d 	bl	8003aae <USBD_LL_IsoINIncomplete>
}
 8004a54:	bf00      	nop
 8004a56:	3708      	adds	r7, #8
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}

08004a5c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b082      	sub	sp, #8
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f7ff f883 	bl	8003b76 <USBD_LL_DevConnected>
}
 8004a70:	bf00      	nop
 8004a72:	3708      	adds	r7, #8
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}

08004a78 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b082      	sub	sp, #8
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8004a86:	4618      	mov	r0, r3
 8004a88:	f7ff f880 	bl	8003b8c <USBD_LL_DevDisconnected>
}
 8004a8c:	bf00      	nop
 8004a8e:	3708      	adds	r7, #8
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	4608      	mov	r0, r1
 8004a9e:	4611      	mov	r1, r2
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	70fb      	strb	r3, [r7, #3]
 8004aa6:	460b      	mov	r3, r1
 8004aa8:	70bb      	strb	r3, [r7, #2]
 8004aaa:	4613      	mov	r3, r2
 8004aac:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8004abc:	78bb      	ldrb	r3, [r7, #2]
 8004abe:	883a      	ldrh	r2, [r7, #0]
 8004ac0:	78f9      	ldrb	r1, [r7, #3]
 8004ac2:	f7fc fcac 	bl	800141e <HAL_PCD_EP_Open>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8004aca:	7bfb      	ldrb	r3, [r7, #15]
 8004acc:	4618      	mov	r0, r3
 8004ace:	f000 f8d3 	bl	8004c78 <USBD_Get_USB_Status>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8004ad6:	7bbb      	ldrb	r3, [r7, #14]
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3710      	adds	r7, #16
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}

08004ae0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b084      	sub	sp, #16
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	460b      	mov	r3, r1
 8004aea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004aec:	2300      	movs	r3, #0
 8004aee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8004af0:	2300      	movs	r3, #0
 8004af2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8004afa:	78fa      	ldrb	r2, [r7, #3]
 8004afc:	4611      	mov	r1, r2
 8004afe:	4618      	mov	r0, r3
 8004b00:	f7fc fd8a 	bl	8001618 <HAL_PCD_EP_SetStall>
 8004b04:	4603      	mov	r3, r0
 8004b06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8004b08:	7bfb      	ldrb	r3, [r7, #15]
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f000 f8b4 	bl	8004c78 <USBD_Get_USB_Status>
 8004b10:	4603      	mov	r3, r0
 8004b12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8004b14:	7bbb      	ldrb	r3, [r7, #14]
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3710      	adds	r7, #16
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}

08004b1e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004b1e:	b580      	push	{r7, lr}
 8004b20:	b084      	sub	sp, #16
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
 8004b26:	460b      	mov	r3, r1
 8004b28:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8004b38:	78fa      	ldrb	r2, [r7, #3]
 8004b3a:	4611      	mov	r1, r2
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f7fc fdcf 	bl	80016e0 <HAL_PCD_EP_ClrStall>
 8004b42:	4603      	mov	r3, r0
 8004b44:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8004b46:	7bfb      	ldrb	r3, [r7, #15]
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f000 f895 	bl	8004c78 <USBD_Get_USB_Status>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8004b52:	7bbb      	ldrb	r3, [r7, #14]
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3710      	adds	r7, #16
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}

08004b5c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b085      	sub	sp, #20
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	460b      	mov	r3, r1
 8004b66:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8004b6e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8004b70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	da0b      	bge.n	8004b90 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8004b78:	78fb      	ldrb	r3, [r7, #3]
 8004b7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004b7e:	68f9      	ldr	r1, [r7, #12]
 8004b80:	4613      	mov	r3, r2
 8004b82:	00db      	lsls	r3, r3, #3
 8004b84:	4413      	add	r3, r2
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	440b      	add	r3, r1
 8004b8a:	333e      	adds	r3, #62	; 0x3e
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	e00b      	b.n	8004ba8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8004b90:	78fb      	ldrb	r3, [r7, #3]
 8004b92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004b96:	68f9      	ldr	r1, [r7, #12]
 8004b98:	4613      	mov	r3, r2
 8004b9a:	00db      	lsls	r3, r3, #3
 8004b9c:	4413      	add	r3, r2
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	440b      	add	r3, r1
 8004ba2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8004ba6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3714      	adds	r7, #20
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr

08004bb4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b084      	sub	sp, #16
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8004bce:	78fa      	ldrb	r2, [r7, #3]
 8004bd0:	4611      	mov	r1, r2
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f7fc fbfe 	bl	80013d4 <HAL_PCD_SetAddress>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8004bdc:	7bfb      	ldrb	r3, [r7, #15]
 8004bde:	4618      	mov	r0, r3
 8004be0:	f000 f84a 	bl	8004c78 <USBD_Get_USB_Status>
 8004be4:	4603      	mov	r3, r0
 8004be6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8004be8:	7bbb      	ldrb	r3, [r7, #14]
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3710      	adds	r7, #16
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}

08004bf2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8004bf2:	b580      	push	{r7, lr}
 8004bf4:	b086      	sub	sp, #24
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	60f8      	str	r0, [r7, #12]
 8004bfa:	607a      	str	r2, [r7, #4]
 8004bfc:	603b      	str	r3, [r7, #0]
 8004bfe:	460b      	mov	r3, r1
 8004c00:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004c02:	2300      	movs	r3, #0
 8004c04:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8004c06:	2300      	movs	r3, #0
 8004c08:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8004c10:	7af9      	ldrb	r1, [r7, #11]
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	f7fc fcb5 	bl	8001584 <HAL_PCD_EP_Transmit>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8004c1e:	7dfb      	ldrb	r3, [r7, #23]
 8004c20:	4618      	mov	r0, r3
 8004c22:	f000 f829 	bl	8004c78 <USBD_Get_USB_Status>
 8004c26:	4603      	mov	r3, r0
 8004c28:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8004c2a:	7dbb      	ldrb	r3, [r7, #22]
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3718      	adds	r7, #24
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b086      	sub	sp, #24
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	607a      	str	r2, [r7, #4]
 8004c3e:	603b      	str	r3, [r7, #0]
 8004c40:	460b      	mov	r3, r1
 8004c42:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004c44:	2300      	movs	r3, #0
 8004c46:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8004c52:	7af9      	ldrb	r1, [r7, #11]
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	f7fc fc49 	bl	80014ee <HAL_PCD_EP_Receive>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8004c60:	7dfb      	ldrb	r3, [r7, #23]
 8004c62:	4618      	mov	r0, r3
 8004c64:	f000 f808 	bl	8004c78 <USBD_Get_USB_Status>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8004c6c:	7dbb      	ldrb	r3, [r7, #22]
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3718      	adds	r7, #24
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
	...

08004c78 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b085      	sub	sp, #20
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	4603      	mov	r3, r0
 8004c80:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8004c82:	2300      	movs	r3, #0
 8004c84:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8004c86:	79fb      	ldrb	r3, [r7, #7]
 8004c88:	2b03      	cmp	r3, #3
 8004c8a:	d817      	bhi.n	8004cbc <USBD_Get_USB_Status+0x44>
 8004c8c:	a201      	add	r2, pc, #4	; (adr r2, 8004c94 <USBD_Get_USB_Status+0x1c>)
 8004c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c92:	bf00      	nop
 8004c94:	08004ca5 	.word	0x08004ca5
 8004c98:	08004cab 	.word	0x08004cab
 8004c9c:	08004cb1 	.word	0x08004cb1
 8004ca0:	08004cb7 	.word	0x08004cb7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	73fb      	strb	r3, [r7, #15]
    break;
 8004ca8:	e00b      	b.n	8004cc2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8004caa:	2303      	movs	r3, #3
 8004cac:	73fb      	strb	r3, [r7, #15]
    break;
 8004cae:	e008      	b.n	8004cc2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	73fb      	strb	r3, [r7, #15]
    break;
 8004cb4:	e005      	b.n	8004cc2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	73fb      	strb	r3, [r7, #15]
    break;
 8004cba:	e002      	b.n	8004cc2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8004cbc:	2303      	movs	r3, #3
 8004cbe:	73fb      	strb	r3, [r7, #15]
    break;
 8004cc0:	bf00      	nop
  }
  return usb_status;
 8004cc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3714      	adds	r7, #20
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr

08004cd0 <__libc_init_array>:
 8004cd0:	b570      	push	{r4, r5, r6, lr}
 8004cd2:	4d0d      	ldr	r5, [pc, #52]	; (8004d08 <__libc_init_array+0x38>)
 8004cd4:	4c0d      	ldr	r4, [pc, #52]	; (8004d0c <__libc_init_array+0x3c>)
 8004cd6:	1b64      	subs	r4, r4, r5
 8004cd8:	10a4      	asrs	r4, r4, #2
 8004cda:	2600      	movs	r6, #0
 8004cdc:	42a6      	cmp	r6, r4
 8004cde:	d109      	bne.n	8004cf4 <__libc_init_array+0x24>
 8004ce0:	4d0b      	ldr	r5, [pc, #44]	; (8004d10 <__libc_init_array+0x40>)
 8004ce2:	4c0c      	ldr	r4, [pc, #48]	; (8004d14 <__libc_init_array+0x44>)
 8004ce4:	f000 f820 	bl	8004d28 <_init>
 8004ce8:	1b64      	subs	r4, r4, r5
 8004cea:	10a4      	asrs	r4, r4, #2
 8004cec:	2600      	movs	r6, #0
 8004cee:	42a6      	cmp	r6, r4
 8004cf0:	d105      	bne.n	8004cfe <__libc_init_array+0x2e>
 8004cf2:	bd70      	pop	{r4, r5, r6, pc}
 8004cf4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cf8:	4798      	blx	r3
 8004cfa:	3601      	adds	r6, #1
 8004cfc:	e7ee      	b.n	8004cdc <__libc_init_array+0xc>
 8004cfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d02:	4798      	blx	r3
 8004d04:	3601      	adds	r6, #1
 8004d06:	e7f2      	b.n	8004cee <__libc_init_array+0x1e>
 8004d08:	08004d58 	.word	0x08004d58
 8004d0c:	08004d58 	.word	0x08004d58
 8004d10:	08004d58 	.word	0x08004d58
 8004d14:	08004d5c 	.word	0x08004d5c

08004d18 <memset>:
 8004d18:	4402      	add	r2, r0
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d100      	bne.n	8004d22 <memset+0xa>
 8004d20:	4770      	bx	lr
 8004d22:	f803 1b01 	strb.w	r1, [r3], #1
 8004d26:	e7f9      	b.n	8004d1c <memset+0x4>

08004d28 <_init>:
 8004d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d2a:	bf00      	nop
 8004d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d2e:	bc08      	pop	{r3}
 8004d30:	469e      	mov	lr, r3
 8004d32:	4770      	bx	lr

08004d34 <_fini>:
 8004d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d36:	bf00      	nop
 8004d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d3a:	bc08      	pop	{r3}
 8004d3c:	469e      	mov	lr, r3
 8004d3e:	4770      	bx	lr
