
BattleLabRobotics.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000992c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b0  08009abc  08009abc  00019abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c6c  08009c6c  00020160  2**0
                  CONTENTS
  4 .ARM          00000008  08009c6c  08009c6c  00019c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009c74  08009c74  00020160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c74  08009c74  00019c74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009c78  08009c78  00019c78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000160  20000000  08009c7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020160  2**0
                  CONTENTS
 10 .bss          00001e74  20000160  20000160  00020160  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001fd4  20001fd4  00020160  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001702c  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000039c6  00000000  00000000  000371bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001190  00000000  00000000  0003ab88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001018  00000000  00000000  0003bd18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025c31  00000000  00000000  0003cd30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017ed0  00000000  00000000  00062961  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5afa  00000000  00000000  0007a831  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015032b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004b9c  00000000  00000000  0015037c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000160 	.word	0x20000160
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009aa4 	.word	0x08009aa4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000164 	.word	0x20000164
 80001cc:	08009aa4 	.word	0x08009aa4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058a:	f001 f9c3 	bl	8001914 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058e:	f000 f817 	bl	80005c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000592:	f000 f9e5 	bl	8000960 <MX_GPIO_Init>
  MX_DMA_Init();
 8000596:	f000 f9bb 	bl	8000910 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 800059a:	f008 f8c9 	bl	8008730 <MX_USB_DEVICE_Init>
  MX_ADC2_Init();
 800059e:	f000 f8d9 	bl	8000754 <MX_ADC2_Init>
  MX_SPI2_Init();
 80005a2:	f000 f955 	bl	8000850 <MX_SPI2_Init>
  MX_USART3_UART_Init();
 80005a6:	f000 f989 	bl	80008bc <MX_USART3_UART_Init>
  MX_ADC1_Init();
 80005aa:	f000 f873 	bl	8000694 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */


  Communication_Driver_Init();
 80005ae:	f000 fd0f 	bl	8000fd0 <Communication_Driver_Init>
  Enemy_Sensors_Test(Communication_Driver_Log_To_Pc);
 80005b2:	4802      	ldr	r0, [pc, #8]	; (80005bc <main+0x38>)
 80005b4:	f001 f882 	bl	80016bc <Enemy_Sensors_Test>
  uint8_t d[4];




  while (1)
 80005b8:	e7fe      	b.n	80005b8 <main+0x34>
 80005ba:	bf00      	nop
 80005bc:	08000fe1 	.word	0x08000fe1

080005c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b094      	sub	sp, #80	; 0x50
 80005c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c6:	f107 0320 	add.w	r3, r7, #32
 80005ca:	2230      	movs	r2, #48	; 0x30
 80005cc:	2100      	movs	r1, #0
 80005ce:	4618      	mov	r0, r3
 80005d0:	f008 fdf2 	bl	80091b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d4:	f107 030c 	add.w	r3, r7, #12
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
 80005e0:	60da      	str	r2, [r3, #12]
 80005e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e4:	2300      	movs	r3, #0
 80005e6:	60bb      	str	r3, [r7, #8]
 80005e8:	4b28      	ldr	r3, [pc, #160]	; (800068c <SystemClock_Config+0xcc>)
 80005ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ec:	4a27      	ldr	r2, [pc, #156]	; (800068c <SystemClock_Config+0xcc>)
 80005ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005f2:	6413      	str	r3, [r2, #64]	; 0x40
 80005f4:	4b25      	ldr	r3, [pc, #148]	; (800068c <SystemClock_Config+0xcc>)
 80005f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005fc:	60bb      	str	r3, [r7, #8]
 80005fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000600:	2300      	movs	r3, #0
 8000602:	607b      	str	r3, [r7, #4]
 8000604:	4b22      	ldr	r3, [pc, #136]	; (8000690 <SystemClock_Config+0xd0>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a21      	ldr	r2, [pc, #132]	; (8000690 <SystemClock_Config+0xd0>)
 800060a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800060e:	6013      	str	r3, [r2, #0]
 8000610:	4b1f      	ldr	r3, [pc, #124]	; (8000690 <SystemClock_Config+0xd0>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000618:	607b      	str	r3, [r7, #4]
 800061a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800061c:	2301      	movs	r3, #1
 800061e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000620:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000624:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000626:	2302      	movs	r3, #2
 8000628:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800062a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800062e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000630:	2308      	movs	r3, #8
 8000632:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000634:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000638:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800063a:	2302      	movs	r3, #2
 800063c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800063e:	2307      	movs	r3, #7
 8000640:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000642:	f107 0320 	add.w	r3, r7, #32
 8000646:	4618      	mov	r0, r3
 8000648:	f003 fc72 	bl	8003f30 <HAL_RCC_OscConfig>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000652:	f000 fa17 	bl	8000a84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000656:	230f      	movs	r3, #15
 8000658:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800065a:	2302      	movs	r3, #2
 800065c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800065e:	2300      	movs	r3, #0
 8000660:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000662:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000666:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000668:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800066c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800066e:	f107 030c 	add.w	r3, r7, #12
 8000672:	2105      	movs	r1, #5
 8000674:	4618      	mov	r0, r3
 8000676:	f003 fed3 	bl	8004420 <HAL_RCC_ClockConfig>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000680:	f000 fa00 	bl	8000a84 <Error_Handler>
  }
}
 8000684:	bf00      	nop
 8000686:	3750      	adds	r7, #80	; 0x50
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40023800 	.word	0x40023800
 8000690:	40007000 	.word	0x40007000

08000694 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800069a:	463b      	mov	r3, r7
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006a6:	4b28      	ldr	r3, [pc, #160]	; (8000748 <MX_ADC1_Init+0xb4>)
 80006a8:	4a28      	ldr	r2, [pc, #160]	; (800074c <MX_ADC1_Init+0xb8>)
 80006aa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006ac:	4b26      	ldr	r3, [pc, #152]	; (8000748 <MX_ADC1_Init+0xb4>)
 80006ae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006b2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006b4:	4b24      	ldr	r3, [pc, #144]	; (8000748 <MX_ADC1_Init+0xb4>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80006ba:	4b23      	ldr	r3, [pc, #140]	; (8000748 <MX_ADC1_Init+0xb4>)
 80006bc:	2201      	movs	r2, #1
 80006be:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80006c0:	4b21      	ldr	r3, [pc, #132]	; (8000748 <MX_ADC1_Init+0xb4>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006c6:	4b20      	ldr	r3, [pc, #128]	; (8000748 <MX_ADC1_Init+0xb4>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006ce:	4b1e      	ldr	r3, [pc, #120]	; (8000748 <MX_ADC1_Init+0xb4>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006d4:	4b1c      	ldr	r3, [pc, #112]	; (8000748 <MX_ADC1_Init+0xb4>)
 80006d6:	4a1e      	ldr	r2, [pc, #120]	; (8000750 <MX_ADC1_Init+0xbc>)
 80006d8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006da:	4b1b      	ldr	r3, [pc, #108]	; (8000748 <MX_ADC1_Init+0xb4>)
 80006dc:	2200      	movs	r2, #0
 80006de:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80006e0:	4b19      	ldr	r3, [pc, #100]	; (8000748 <MX_ADC1_Init+0xb4>)
 80006e2:	2202      	movs	r2, #2
 80006e4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80006e6:	4b18      	ldr	r3, [pc, #96]	; (8000748 <MX_ADC1_Init+0xb4>)
 80006e8:	2201      	movs	r2, #1
 80006ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006ee:	4b16      	ldr	r3, [pc, #88]	; (8000748 <MX_ADC1_Init+0xb4>)
 80006f0:	2201      	movs	r2, #1
 80006f2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006f4:	4814      	ldr	r0, [pc, #80]	; (8000748 <MX_ADC1_Init+0xb4>)
 80006f6:	f001 f9a3 	bl	8001a40 <HAL_ADC_Init>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000700:	f000 f9c0 	bl	8000a84 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000704:	230e      	movs	r3, #14
 8000706:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000708:	2301      	movs	r3, #1
 800070a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800070c:	2300      	movs	r3, #0
 800070e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000710:	463b      	mov	r3, r7
 8000712:	4619      	mov	r1, r3
 8000714:	480c      	ldr	r0, [pc, #48]	; (8000748 <MX_ADC1_Init+0xb4>)
 8000716:	f001 f9d7 	bl	8001ac8 <HAL_ADC_ConfigChannel>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000720:	f000 f9b0 	bl	8000a84 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000724:	230f      	movs	r3, #15
 8000726:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000728:	2302      	movs	r3, #2
 800072a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800072c:	463b      	mov	r3, r7
 800072e:	4619      	mov	r1, r3
 8000730:	4805      	ldr	r0, [pc, #20]	; (8000748 <MX_ADC1_Init+0xb4>)
 8000732:	f001 f9c9 	bl	8001ac8 <HAL_ADC_ConfigChannel>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800073c:	f000 f9a2 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000740:	bf00      	nop
 8000742:	3710      	adds	r7, #16
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	2000017c 	.word	0x2000017c
 800074c:	40012000 	.word	0x40012000
 8000750:	0f000001 	.word	0x0f000001

08000754 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800075a:	463b      	mov	r3, r7
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]
 8000764:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000766:	4b37      	ldr	r3, [pc, #220]	; (8000844 <MX_ADC2_Init+0xf0>)
 8000768:	4a37      	ldr	r2, [pc, #220]	; (8000848 <MX_ADC2_Init+0xf4>)
 800076a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800076c:	4b35      	ldr	r3, [pc, #212]	; (8000844 <MX_ADC2_Init+0xf0>)
 800076e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000772:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_8B;
 8000774:	4b33      	ldr	r3, [pc, #204]	; (8000844 <MX_ADC2_Init+0xf0>)
 8000776:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800077a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800077c:	4b31      	ldr	r3, [pc, #196]	; (8000844 <MX_ADC2_Init+0xf0>)
 800077e:	2201      	movs	r2, #1
 8000780:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000782:	4b30      	ldr	r3, [pc, #192]	; (8000844 <MX_ADC2_Init+0xf0>)
 8000784:	2201      	movs	r2, #1
 8000786:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000788:	4b2e      	ldr	r3, [pc, #184]	; (8000844 <MX_ADC2_Init+0xf0>)
 800078a:	2200      	movs	r2, #0
 800078c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000790:	4b2c      	ldr	r3, [pc, #176]	; (8000844 <MX_ADC2_Init+0xf0>)
 8000792:	2200      	movs	r2, #0
 8000794:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000796:	4b2b      	ldr	r3, [pc, #172]	; (8000844 <MX_ADC2_Init+0xf0>)
 8000798:	4a2c      	ldr	r2, [pc, #176]	; (800084c <MX_ADC2_Init+0xf8>)
 800079a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800079c:	4b29      	ldr	r3, [pc, #164]	; (8000844 <MX_ADC2_Init+0xf0>)
 800079e:	2200      	movs	r2, #0
 80007a0:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 4;
 80007a2:	4b28      	ldr	r3, [pc, #160]	; (8000844 <MX_ADC2_Init+0xf0>)
 80007a4:	2204      	movs	r2, #4
 80007a6:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80007a8:	4b26      	ldr	r3, [pc, #152]	; (8000844 <MX_ADC2_Init+0xf0>)
 80007aa:	2201      	movs	r2, #1
 80007ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007b0:	4b24      	ldr	r3, [pc, #144]	; (8000844 <MX_ADC2_Init+0xf0>)
 80007b2:	2201      	movs	r2, #1
 80007b4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80007b6:	4823      	ldr	r0, [pc, #140]	; (8000844 <MX_ADC2_Init+0xf0>)
 80007b8:	f001 f942 	bl	8001a40 <HAL_ADC_Init>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_ADC2_Init+0x72>
  {
    Error_Handler();
 80007c2:	f000 f95f 	bl	8000a84 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007c6:	2301      	movs	r3, #1
 80007c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007ca:	2301      	movs	r3, #1
 80007cc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007ce:	2300      	movs	r3, #0
 80007d0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80007d2:	463b      	mov	r3, r7
 80007d4:	4619      	mov	r1, r3
 80007d6:	481b      	ldr	r0, [pc, #108]	; (8000844 <MX_ADC2_Init+0xf0>)
 80007d8:	f001 f976 	bl	8001ac8 <HAL_ADC_ConfigChannel>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_ADC2_Init+0x92>
  {
    Error_Handler();
 80007e2:	f000 f94f 	bl	8000a84 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80007e6:	2302      	movs	r3, #2
 80007e8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80007ea:	2302      	movs	r3, #2
 80007ec:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80007ee:	463b      	mov	r3, r7
 80007f0:	4619      	mov	r1, r3
 80007f2:	4814      	ldr	r0, [pc, #80]	; (8000844 <MX_ADC2_Init+0xf0>)
 80007f4:	f001 f968 	bl	8001ac8 <HAL_ADC_ConfigChannel>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_ADC2_Init+0xae>
  {
    Error_Handler();
 80007fe:	f000 f941 	bl	8000a84 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000802:	2303      	movs	r3, #3
 8000804:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000806:	2303      	movs	r3, #3
 8000808:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800080a:	463b      	mov	r3, r7
 800080c:	4619      	mov	r1, r3
 800080e:	480d      	ldr	r0, [pc, #52]	; (8000844 <MX_ADC2_Init+0xf0>)
 8000810:	f001 f95a 	bl	8001ac8 <HAL_ADC_ConfigChannel>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_ADC2_Init+0xca>
  {
    Error_Handler();
 800081a:	f000 f933 	bl	8000a84 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800081e:	2306      	movs	r3, #6
 8000820:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000822:	2304      	movs	r3, #4
 8000824:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000826:	463b      	mov	r3, r7
 8000828:	4619      	mov	r1, r3
 800082a:	4806      	ldr	r0, [pc, #24]	; (8000844 <MX_ADC2_Init+0xf0>)
 800082c:	f001 f94c 	bl	8001ac8 <HAL_ADC_ConfigChannel>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_ADC2_Init+0xe6>
  {
    Error_Handler();
 8000836:	f000 f925 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800083a:	bf00      	nop
 800083c:	3710      	adds	r7, #16
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	200001c4 	.word	0x200001c4
 8000848:	40012100 	.word	0x40012100
 800084c:	0f000001 	.word	0x0f000001

08000850 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000854:	4b17      	ldr	r3, [pc, #92]	; (80008b4 <MX_SPI2_Init+0x64>)
 8000856:	4a18      	ldr	r2, [pc, #96]	; (80008b8 <MX_SPI2_Init+0x68>)
 8000858:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800085a:	4b16      	ldr	r3, [pc, #88]	; (80008b4 <MX_SPI2_Init+0x64>)
 800085c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000860:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000862:	4b14      	ldr	r3, [pc, #80]	; (80008b4 <MX_SPI2_Init+0x64>)
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000868:	4b12      	ldr	r3, [pc, #72]	; (80008b4 <MX_SPI2_Init+0x64>)
 800086a:	2200      	movs	r2, #0
 800086c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800086e:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <MX_SPI2_Init+0x64>)
 8000870:	2200      	movs	r2, #0
 8000872:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000874:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <MX_SPI2_Init+0x64>)
 8000876:	2200      	movs	r2, #0
 8000878:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800087a:	4b0e      	ldr	r3, [pc, #56]	; (80008b4 <MX_SPI2_Init+0x64>)
 800087c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000880:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000882:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <MX_SPI2_Init+0x64>)
 8000884:	2200      	movs	r2, #0
 8000886:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000888:	4b0a      	ldr	r3, [pc, #40]	; (80008b4 <MX_SPI2_Init+0x64>)
 800088a:	2200      	movs	r2, #0
 800088c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800088e:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <MX_SPI2_Init+0x64>)
 8000890:	2200      	movs	r2, #0
 8000892:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000894:	4b07      	ldr	r3, [pc, #28]	; (80008b4 <MX_SPI2_Init+0x64>)
 8000896:	2200      	movs	r2, #0
 8000898:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800089a:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <MX_SPI2_Init+0x64>)
 800089c:	220a      	movs	r2, #10
 800089e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80008a0:	4804      	ldr	r0, [pc, #16]	; (80008b4 <MX_SPI2_Init+0x64>)
 80008a2:	f003 ffdd 	bl	8004860 <HAL_SPI_Init>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80008ac:	f000 f8ea 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80008b0:	bf00      	nop
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	200002cc 	.word	0x200002cc
 80008b8:	40003800 	.word	0x40003800

080008bc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008c0:	4b11      	ldr	r3, [pc, #68]	; (8000908 <MX_USART3_UART_Init+0x4c>)
 80008c2:	4a12      	ldr	r2, [pc, #72]	; (800090c <MX_USART3_UART_Init+0x50>)
 80008c4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008c6:	4b10      	ldr	r3, [pc, #64]	; (8000908 <MX_USART3_UART_Init+0x4c>)
 80008c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008cc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008ce:	4b0e      	ldr	r3, [pc, #56]	; (8000908 <MX_USART3_UART_Init+0x4c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008d4:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <MX_USART3_UART_Init+0x4c>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008da:	4b0b      	ldr	r3, [pc, #44]	; (8000908 <MX_USART3_UART_Init+0x4c>)
 80008dc:	2200      	movs	r2, #0
 80008de:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008e0:	4b09      	ldr	r3, [pc, #36]	; (8000908 <MX_USART3_UART_Init+0x4c>)
 80008e2:	220c      	movs	r2, #12
 80008e4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008e6:	4b08      	ldr	r3, [pc, #32]	; (8000908 <MX_USART3_UART_Init+0x4c>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008ec:	4b06      	ldr	r3, [pc, #24]	; (8000908 <MX_USART3_UART_Init+0x4c>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart3) != HAL_OK)
 80008f2:	4805      	ldr	r0, [pc, #20]	; (8000908 <MX_USART3_UART_Init+0x4c>)
 80008f4:	f004 f83d 	bl	8004972 <HAL_HalfDuplex_Init>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80008fe:	f000 f8c1 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	20000324 	.word	0x20000324
 800090c:	40004800 	.word	0x40004800

08000910 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	607b      	str	r3, [r7, #4]
 800091a:	4b10      	ldr	r3, [pc, #64]	; (800095c <MX_DMA_Init+0x4c>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	4a0f      	ldr	r2, [pc, #60]	; (800095c <MX_DMA_Init+0x4c>)
 8000920:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000924:	6313      	str	r3, [r2, #48]	; 0x30
 8000926:	4b0d      	ldr	r3, [pc, #52]	; (800095c <MX_DMA_Init+0x4c>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800092e:	607b      	str	r3, [r7, #4]
 8000930:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000932:	2200      	movs	r2, #0
 8000934:	2100      	movs	r1, #0
 8000936:	2038      	movs	r0, #56	; 0x38
 8000938:	f001 fbbf 	bl	80020ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800093c:	2038      	movs	r0, #56	; 0x38
 800093e:	f001 fbd8 	bl	80020f2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000942:	2200      	movs	r2, #0
 8000944:	2100      	movs	r1, #0
 8000946:	203a      	movs	r0, #58	; 0x3a
 8000948:	f001 fbb7 	bl	80020ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800094c:	203a      	movs	r0, #58	; 0x3a
 800094e:	f001 fbd0 	bl	80020f2 <HAL_NVIC_EnableIRQ>

}
 8000952:	bf00      	nop
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40023800 	.word	0x40023800

08000960 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b08a      	sub	sp, #40	; 0x28
 8000964:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000966:	f107 0314 	add.w	r3, r7, #20
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	605a      	str	r2, [r3, #4]
 8000970:	609a      	str	r2, [r3, #8]
 8000972:	60da      	str	r2, [r3, #12]
 8000974:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	613b      	str	r3, [r7, #16]
 800097a:	4b3e      	ldr	r3, [pc, #248]	; (8000a74 <MX_GPIO_Init+0x114>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	4a3d      	ldr	r2, [pc, #244]	; (8000a74 <MX_GPIO_Init+0x114>)
 8000980:	f043 0304 	orr.w	r3, r3, #4
 8000984:	6313      	str	r3, [r2, #48]	; 0x30
 8000986:	4b3b      	ldr	r3, [pc, #236]	; (8000a74 <MX_GPIO_Init+0x114>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	f003 0304 	and.w	r3, r3, #4
 800098e:	613b      	str	r3, [r7, #16]
 8000990:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	60fb      	str	r3, [r7, #12]
 8000996:	4b37      	ldr	r3, [pc, #220]	; (8000a74 <MX_GPIO_Init+0x114>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	4a36      	ldr	r2, [pc, #216]	; (8000a74 <MX_GPIO_Init+0x114>)
 800099c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009a0:	6313      	str	r3, [r2, #48]	; 0x30
 80009a2:	4b34      	ldr	r3, [pc, #208]	; (8000a74 <MX_GPIO_Init+0x114>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	60bb      	str	r3, [r7, #8]
 80009b2:	4b30      	ldr	r3, [pc, #192]	; (8000a74 <MX_GPIO_Init+0x114>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	4a2f      	ldr	r2, [pc, #188]	; (8000a74 <MX_GPIO_Init+0x114>)
 80009b8:	f043 0301 	orr.w	r3, r3, #1
 80009bc:	6313      	str	r3, [r2, #48]	; 0x30
 80009be:	4b2d      	ldr	r3, [pc, #180]	; (8000a74 <MX_GPIO_Init+0x114>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	60bb      	str	r3, [r7, #8]
 80009c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	607b      	str	r3, [r7, #4]
 80009ce:	4b29      	ldr	r3, [pc, #164]	; (8000a74 <MX_GPIO_Init+0x114>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	4a28      	ldr	r2, [pc, #160]	; (8000a74 <MX_GPIO_Init+0x114>)
 80009d4:	f043 0302 	orr.w	r3, r3, #2
 80009d8:	6313      	str	r3, [r2, #48]	; 0x30
 80009da:	4b26      	ldr	r3, [pc, #152]	; (8000a74 <MX_GPIO_Init+0x114>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	f003 0302 	and.w	r3, r3, #2
 80009e2:	607b      	str	r3, [r7, #4]
 80009e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	603b      	str	r3, [r7, #0]
 80009ea:	4b22      	ldr	r3, [pc, #136]	; (8000a74 <MX_GPIO_Init+0x114>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a21      	ldr	r2, [pc, #132]	; (8000a74 <MX_GPIO_Init+0x114>)
 80009f0:	f043 0308 	orr.w	r3, r3, #8
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
 80009f6:	4b1f      	ldr	r3, [pc, #124]	; (8000a74 <MX_GPIO_Init+0x114>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	f003 0308 	and.w	r3, r3, #8
 80009fe:	603b      	str	r3, [r7, #0]
 8000a00:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a10:	f107 0314 	add.w	r3, r7, #20
 8000a14:	4619      	mov	r1, r3
 8000a16:	4818      	ldr	r0, [pc, #96]	; (8000a78 <MX_GPIO_Init+0x118>)
 8000a18:	f001 fe70 	bl	80026fc <HAL_GPIO_Init>

  /*Configure GPIO pins : ENEMY_SENSOR_9_Pin ENEMY_SENSOR_8_Pin PD13 ENEMY_SENSOR_0_Pin
                           ENEMY_SENSOR_1_Pin ENEMY_SENSOR_2_Pin ENEMY_SENSOR_3_Pin ENEMY_SENSOR_4_Pin
                           ENEMY_SENSOR_5_Pin ENEMY_SENSOR_6_Pin ENEMY_SENSOR_7_Pin */
  GPIO_InitStruct.Pin = ENEMY_SENSOR_9_Pin|ENEMY_SENSOR_8_Pin|GPIO_PIN_13|ENEMY_SENSOR_0_Pin
 8000a1c:	f242 63ff 	movw	r3, #9983	; 0x26ff
 8000a20:	617b      	str	r3, [r7, #20]
                          |ENEMY_SENSOR_1_Pin|ENEMY_SENSOR_2_Pin|ENEMY_SENSOR_3_Pin|ENEMY_SENSOR_4_Pin
                          |ENEMY_SENSOR_5_Pin|ENEMY_SENSOR_6_Pin|ENEMY_SENSOR_7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a22:	2300      	movs	r3, #0
 8000a24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a2a:	f107 0314 	add.w	r3, r7, #20
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4812      	ldr	r0, [pc, #72]	; (8000a7c <MX_GPIO_Init+0x11c>)
 8000a32:	f001 fe63 	bl	80026fc <HAL_GPIO_Init>

  /*Configure GPIO pin : DIP_SWITCH_3_Pin */
  GPIO_InitStruct.Pin = DIP_SWITCH_3_Pin;
 8000a36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a40:	2301      	movs	r3, #1
 8000a42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIP_SWITCH_3_GPIO_Port, &GPIO_InitStruct);
 8000a44:	f107 0314 	add.w	r3, r7, #20
 8000a48:	4619      	mov	r1, r3
 8000a4a:	480c      	ldr	r0, [pc, #48]	; (8000a7c <MX_GPIO_Init+0x11c>)
 8000a4c:	f001 fe56 	bl	80026fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 DIP_SEITCH_1_Pin DIP_SWITCH_2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_10|DIP_SEITCH_1_Pin|DIP_SWITCH_2_Pin;
 8000a50:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000a54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a56:	2300      	movs	r3, #0
 8000a58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a5e:	f107 0314 	add.w	r3, r7, #20
 8000a62:	4619      	mov	r1, r3
 8000a64:	4806      	ldr	r0, [pc, #24]	; (8000a80 <MX_GPIO_Init+0x120>)
 8000a66:	f001 fe49 	bl	80026fc <HAL_GPIO_Init>

}
 8000a6a:	bf00      	nop
 8000a6c:	3728      	adds	r7, #40	; 0x28
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40023800 	.word	0x40023800
 8000a78:	40020400 	.word	0x40020400
 8000a7c:	40020c00 	.word	0x40020c00
 8000a80:	40020800 	.word	0x40020800

08000a84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a88:	b672      	cpsid	i
}
 8000a8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <Error_Handler+0x8>
	...

08000a90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	607b      	str	r3, [r7, #4]
 8000a9a:	4b10      	ldr	r3, [pc, #64]	; (8000adc <HAL_MspInit+0x4c>)
 8000a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a9e:	4a0f      	ldr	r2, [pc, #60]	; (8000adc <HAL_MspInit+0x4c>)
 8000aa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aa4:	6453      	str	r3, [r2, #68]	; 0x44
 8000aa6:	4b0d      	ldr	r3, [pc, #52]	; (8000adc <HAL_MspInit+0x4c>)
 8000aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aae:	607b      	str	r3, [r7, #4]
 8000ab0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	603b      	str	r3, [r7, #0]
 8000ab6:	4b09      	ldr	r3, [pc, #36]	; (8000adc <HAL_MspInit+0x4c>)
 8000ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aba:	4a08      	ldr	r2, [pc, #32]	; (8000adc <HAL_MspInit+0x4c>)
 8000abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac2:	4b06      	ldr	r3, [pc, #24]	; (8000adc <HAL_MspInit+0x4c>)
 8000ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aca:	603b      	str	r3, [r7, #0]
 8000acc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ace:	2007      	movs	r0, #7
 8000ad0:	f001 fae8 	bl	80020a4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ad4:	bf00      	nop
 8000ad6:	3708      	adds	r7, #8
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	40023800 	.word	0x40023800

08000ae0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08c      	sub	sp, #48	; 0x30
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae8:	f107 031c 	add.w	r3, r7, #28
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]
 8000af6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a5d      	ldr	r2, [pc, #372]	; (8000c74 <HAL_ADC_MspInit+0x194>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d157      	bne.n	8000bb2 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	61bb      	str	r3, [r7, #24]
 8000b06:	4b5c      	ldr	r3, [pc, #368]	; (8000c78 <HAL_ADC_MspInit+0x198>)
 8000b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0a:	4a5b      	ldr	r2, [pc, #364]	; (8000c78 <HAL_ADC_MspInit+0x198>)
 8000b0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b10:	6453      	str	r3, [r2, #68]	; 0x44
 8000b12:	4b59      	ldr	r3, [pc, #356]	; (8000c78 <HAL_ADC_MspInit+0x198>)
 8000b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b1a:	61bb      	str	r3, [r7, #24]
 8000b1c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	617b      	str	r3, [r7, #20]
 8000b22:	4b55      	ldr	r3, [pc, #340]	; (8000c78 <HAL_ADC_MspInit+0x198>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	4a54      	ldr	r2, [pc, #336]	; (8000c78 <HAL_ADC_MspInit+0x198>)
 8000b28:	f043 0304 	orr.w	r3, r3, #4
 8000b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2e:	4b52      	ldr	r3, [pc, #328]	; (8000c78 <HAL_ADC_MspInit+0x198>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	f003 0304 	and.w	r3, r3, #4
 8000b36:	617b      	str	r3, [r7, #20]
 8000b38:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = Trimpot_0_Pin|Trimpot_1_Pin;
 8000b3a:	2330      	movs	r3, #48	; 0x30
 8000b3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b3e:	2303      	movs	r3, #3
 8000b40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b46:	f107 031c 	add.w	r3, r7, #28
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	484b      	ldr	r0, [pc, #300]	; (8000c7c <HAL_ADC_MspInit+0x19c>)
 8000b4e:	f001 fdd5 	bl	80026fc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000b52:	4b4b      	ldr	r3, [pc, #300]	; (8000c80 <HAL_ADC_MspInit+0x1a0>)
 8000b54:	4a4b      	ldr	r2, [pc, #300]	; (8000c84 <HAL_ADC_MspInit+0x1a4>)
 8000b56:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000b58:	4b49      	ldr	r3, [pc, #292]	; (8000c80 <HAL_ADC_MspInit+0x1a0>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b5e:	4b48      	ldr	r3, [pc, #288]	; (8000c80 <HAL_ADC_MspInit+0x1a0>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b64:	4b46      	ldr	r3, [pc, #280]	; (8000c80 <HAL_ADC_MspInit+0x1a0>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b6a:	4b45      	ldr	r3, [pc, #276]	; (8000c80 <HAL_ADC_MspInit+0x1a0>)
 8000b6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b70:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b72:	4b43      	ldr	r3, [pc, #268]	; (8000c80 <HAL_ADC_MspInit+0x1a0>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b78:	4b41      	ldr	r3, [pc, #260]	; (8000c80 <HAL_ADC_MspInit+0x1a0>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000b7e:	4b40      	ldr	r3, [pc, #256]	; (8000c80 <HAL_ADC_MspInit+0x1a0>)
 8000b80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b84:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000b86:	4b3e      	ldr	r3, [pc, #248]	; (8000c80 <HAL_ADC_MspInit+0x1a0>)
 8000b88:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000b8c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b8e:	4b3c      	ldr	r3, [pc, #240]	; (8000c80 <HAL_ADC_MspInit+0x1a0>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b94:	483a      	ldr	r0, [pc, #232]	; (8000c80 <HAL_ADC_MspInit+0x1a0>)
 8000b96:	f001 fac7 	bl	8002128 <HAL_DMA_Init>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8000ba0:	f7ff ff70 	bl	8000a84 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	4a36      	ldr	r2, [pc, #216]	; (8000c80 <HAL_ADC_MspInit+0x1a0>)
 8000ba8:	639a      	str	r2, [r3, #56]	; 0x38
 8000baa:	4a35      	ldr	r2, [pc, #212]	; (8000c80 <HAL_ADC_MspInit+0x1a0>)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000bb0:	e05c      	b.n	8000c6c <HAL_ADC_MspInit+0x18c>
  else if(hadc->Instance==ADC2)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4a34      	ldr	r2, [pc, #208]	; (8000c88 <HAL_ADC_MspInit+0x1a8>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d157      	bne.n	8000c6c <HAL_ADC_MspInit+0x18c>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	613b      	str	r3, [r7, #16]
 8000bc0:	4b2d      	ldr	r3, [pc, #180]	; (8000c78 <HAL_ADC_MspInit+0x198>)
 8000bc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc4:	4a2c      	ldr	r2, [pc, #176]	; (8000c78 <HAL_ADC_MspInit+0x198>)
 8000bc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bca:	6453      	str	r3, [r2, #68]	; 0x44
 8000bcc:	4b2a      	ldr	r3, [pc, #168]	; (8000c78 <HAL_ADC_MspInit+0x198>)
 8000bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000bd4:	613b      	str	r3, [r7, #16]
 8000bd6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd8:	2300      	movs	r3, #0
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	4b26      	ldr	r3, [pc, #152]	; (8000c78 <HAL_ADC_MspInit+0x198>)
 8000bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be0:	4a25      	ldr	r2, [pc, #148]	; (8000c78 <HAL_ADC_MspInit+0x198>)
 8000be2:	f043 0301 	orr.w	r3, r3, #1
 8000be6:	6313      	str	r3, [r2, #48]	; 0x30
 8000be8:	4b23      	ldr	r3, [pc, #140]	; (8000c78 <HAL_ADC_MspInit+0x198>)
 8000bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bec:	f003 0301 	and.w	r3, r3, #1
 8000bf0:	60fb      	str	r3, [r7, #12]
 8000bf2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6;
 8000bf4:	234e      	movs	r3, #78	; 0x4e
 8000bf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bf8:	2303      	movs	r3, #3
 8000bfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c00:	f107 031c 	add.w	r3, r7, #28
 8000c04:	4619      	mov	r1, r3
 8000c06:	4821      	ldr	r0, [pc, #132]	; (8000c8c <HAL_ADC_MspInit+0x1ac>)
 8000c08:	f001 fd78 	bl	80026fc <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8000c0c:	4b20      	ldr	r3, [pc, #128]	; (8000c90 <HAL_ADC_MspInit+0x1b0>)
 8000c0e:	4a21      	ldr	r2, [pc, #132]	; (8000c94 <HAL_ADC_MspInit+0x1b4>)
 8000c10:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8000c12:	4b1f      	ldr	r3, [pc, #124]	; (8000c90 <HAL_ADC_MspInit+0x1b0>)
 8000c14:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000c18:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c1a:	4b1d      	ldr	r3, [pc, #116]	; (8000c90 <HAL_ADC_MspInit+0x1b0>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c20:	4b1b      	ldr	r3, [pc, #108]	; (8000c90 <HAL_ADC_MspInit+0x1b0>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000c26:	4b1a      	ldr	r3, [pc, #104]	; (8000c90 <HAL_ADC_MspInit+0x1b0>)
 8000c28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c2c:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c2e:	4b18      	ldr	r3, [pc, #96]	; (8000c90 <HAL_ADC_MspInit+0x1b0>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c34:	4b16      	ldr	r3, [pc, #88]	; (8000c90 <HAL_ADC_MspInit+0x1b0>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000c3a:	4b15      	ldr	r3, [pc, #84]	; (8000c90 <HAL_ADC_MspInit+0x1b0>)
 8000c3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c40:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 8000c42:	4b13      	ldr	r3, [pc, #76]	; (8000c90 <HAL_ADC_MspInit+0x1b0>)
 8000c44:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c48:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c4a:	4b11      	ldr	r3, [pc, #68]	; (8000c90 <HAL_ADC_MspInit+0x1b0>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000c50:	480f      	ldr	r0, [pc, #60]	; (8000c90 <HAL_ADC_MspInit+0x1b0>)
 8000c52:	f001 fa69 	bl	8002128 <HAL_DMA_Init>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <HAL_ADC_MspInit+0x180>
      Error_Handler();
 8000c5c:	f7ff ff12 	bl	8000a84 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	4a0b      	ldr	r2, [pc, #44]	; (8000c90 <HAL_ADC_MspInit+0x1b0>)
 8000c64:	639a      	str	r2, [r3, #56]	; 0x38
 8000c66:	4a0a      	ldr	r2, [pc, #40]	; (8000c90 <HAL_ADC_MspInit+0x1b0>)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000c6c:	bf00      	nop
 8000c6e:	3730      	adds	r7, #48	; 0x30
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	40012000 	.word	0x40012000
 8000c78:	40023800 	.word	0x40023800
 8000c7c:	40020800 	.word	0x40020800
 8000c80:	2000020c 	.word	0x2000020c
 8000c84:	40026410 	.word	0x40026410
 8000c88:	40012100 	.word	0x40012100
 8000c8c:	40020000 	.word	0x40020000
 8000c90:	2000026c 	.word	0x2000026c
 8000c94:	40026440 	.word	0x40026440

08000c98 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b08a      	sub	sp, #40	; 0x28
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca0:	f107 0314 	add.w	r3, r7, #20
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	605a      	str	r2, [r3, #4]
 8000caa:	609a      	str	r2, [r3, #8]
 8000cac:	60da      	str	r2, [r3, #12]
 8000cae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a19      	ldr	r2, [pc, #100]	; (8000d1c <HAL_SPI_MspInit+0x84>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d12c      	bne.n	8000d14 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	613b      	str	r3, [r7, #16]
 8000cbe:	4b18      	ldr	r3, [pc, #96]	; (8000d20 <HAL_SPI_MspInit+0x88>)
 8000cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc2:	4a17      	ldr	r2, [pc, #92]	; (8000d20 <HAL_SPI_MspInit+0x88>)
 8000cc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cca:	4b15      	ldr	r3, [pc, #84]	; (8000d20 <HAL_SPI_MspInit+0x88>)
 8000ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cd2:	613b      	str	r3, [r7, #16]
 8000cd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60fb      	str	r3, [r7, #12]
 8000cda:	4b11      	ldr	r3, [pc, #68]	; (8000d20 <HAL_SPI_MspInit+0x88>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	4a10      	ldr	r2, [pc, #64]	; (8000d20 <HAL_SPI_MspInit+0x88>)
 8000ce0:	f043 0302 	orr.w	r3, r3, #2
 8000ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce6:	4b0e      	ldr	r3, [pc, #56]	; (8000d20 <HAL_SPI_MspInit+0x88>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	f003 0302 	and.w	r3, r3, #2
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000cf2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000cf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d00:	2303      	movs	r3, #3
 8000d02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d04:	2305      	movs	r3, #5
 8000d06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d08:	f107 0314 	add.w	r3, r7, #20
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4805      	ldr	r0, [pc, #20]	; (8000d24 <HAL_SPI_MspInit+0x8c>)
 8000d10:	f001 fcf4 	bl	80026fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000d14:	bf00      	nop
 8000d16:	3728      	adds	r7, #40	; 0x28
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	40003800 	.word	0x40003800
 8000d20:	40023800 	.word	0x40023800
 8000d24:	40020400 	.word	0x40020400

08000d28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b08a      	sub	sp, #40	; 0x28
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d30:	f107 0314 	add.w	r3, r7, #20
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
 8000d3e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a19      	ldr	r2, [pc, #100]	; (8000dac <HAL_UART_MspInit+0x84>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d12c      	bne.n	8000da4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	613b      	str	r3, [r7, #16]
 8000d4e:	4b18      	ldr	r3, [pc, #96]	; (8000db0 <HAL_UART_MspInit+0x88>)
 8000d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d52:	4a17      	ldr	r2, [pc, #92]	; (8000db0 <HAL_UART_MspInit+0x88>)
 8000d54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d58:	6413      	str	r3, [r2, #64]	; 0x40
 8000d5a:	4b15      	ldr	r3, [pc, #84]	; (8000db0 <HAL_UART_MspInit+0x88>)
 8000d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d62:	613b      	str	r3, [r7, #16]
 8000d64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	60fb      	str	r3, [r7, #12]
 8000d6a:	4b11      	ldr	r3, [pc, #68]	; (8000db0 <HAL_UART_MspInit+0x88>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	4a10      	ldr	r2, [pc, #64]	; (8000db0 <HAL_UART_MspInit+0x88>)
 8000d70:	f043 0308 	orr.w	r3, r3, #8
 8000d74:	6313      	str	r3, [r2, #48]	; 0x30
 8000d76:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <HAL_UART_MspInit+0x88>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	f003 0308 	and.w	r3, r3, #8
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d88:	2312      	movs	r3, #18
 8000d8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d90:	2303      	movs	r3, #3
 8000d92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d94:	2307      	movs	r3, #7
 8000d96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d98:	f107 0314 	add.w	r3, r7, #20
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4805      	ldr	r0, [pc, #20]	; (8000db4 <HAL_UART_MspInit+0x8c>)
 8000da0:	f001 fcac 	bl	80026fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000da4:	bf00      	nop
 8000da6:	3728      	adds	r7, #40	; 0x28
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	40004800 	.word	0x40004800
 8000db0:	40023800 	.word	0x40023800
 8000db4:	40020c00 	.word	0x40020c00

08000db8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dbc:	e7fe      	b.n	8000dbc <NMI_Handler+0x4>

08000dbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dc2:	e7fe      	b.n	8000dc2 <HardFault_Handler+0x4>

08000dc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dc8:	e7fe      	b.n	8000dc8 <MemManage_Handler+0x4>

08000dca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dce:	e7fe      	b.n	8000dce <BusFault_Handler+0x4>

08000dd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dd4:	e7fe      	b.n	8000dd4 <UsageFault_Handler+0x4>

08000dd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dda:	bf00      	nop
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr

08000de4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr

08000df2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000df2:	b480      	push	{r7}
 8000df4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000df6:	bf00      	nop
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr

08000e00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e04:	f000 fdd8 	bl	80019b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e08:	bf00      	nop
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000e10:	4802      	ldr	r0, [pc, #8]	; (8000e1c <DMA2_Stream0_IRQHandler+0x10>)
 8000e12:	f001 fa37 	bl	8002284 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000e16:	bf00      	nop
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	2000020c 	.word	0x2000020c

08000e20 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8000e24:	4802      	ldr	r0, [pc, #8]	; (8000e30 <DMA2_Stream2_IRQHandler+0x10>)
 8000e26:	f001 fa2d 	bl	8002284 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	2000026c 	.word	0x2000026c

08000e34 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000e38:	4802      	ldr	r0, [pc, #8]	; (8000e44 <OTG_FS_IRQHandler+0x10>)
 8000e3a:	f001 ff4b 	bl	8002cd4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e3e:	bf00      	nop
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	20001898 	.word	0x20001898

08000e48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b086      	sub	sp, #24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e50:	4a14      	ldr	r2, [pc, #80]	; (8000ea4 <_sbrk+0x5c>)
 8000e52:	4b15      	ldr	r3, [pc, #84]	; (8000ea8 <_sbrk+0x60>)
 8000e54:	1ad3      	subs	r3, r2, r3
 8000e56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e5c:	4b13      	ldr	r3, [pc, #76]	; (8000eac <_sbrk+0x64>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d102      	bne.n	8000e6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e64:	4b11      	ldr	r3, [pc, #68]	; (8000eac <_sbrk+0x64>)
 8000e66:	4a12      	ldr	r2, [pc, #72]	; (8000eb0 <_sbrk+0x68>)
 8000e68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e6a:	4b10      	ldr	r3, [pc, #64]	; (8000eac <_sbrk+0x64>)
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4413      	add	r3, r2
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	d207      	bcs.n	8000e88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e78:	f008 f974 	bl	8009164 <__errno>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	220c      	movs	r2, #12
 8000e80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e82:	f04f 33ff 	mov.w	r3, #4294967295
 8000e86:	e009      	b.n	8000e9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e88:	4b08      	ldr	r3, [pc, #32]	; (8000eac <_sbrk+0x64>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e8e:	4b07      	ldr	r3, [pc, #28]	; (8000eac <_sbrk+0x64>)
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4413      	add	r3, r2
 8000e96:	4a05      	ldr	r2, [pc, #20]	; (8000eac <_sbrk+0x64>)
 8000e98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e9a:	68fb      	ldr	r3, [r7, #12]
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3718      	adds	r7, #24
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	20020000 	.word	0x20020000
 8000ea8:	00000400 	.word	0x00000400
 8000eac:	20000368 	.word	0x20000368
 8000eb0:	20001fd8 	.word	0x20001fd8

08000eb4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000eb8:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <SystemInit+0x20>)
 8000eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ebe:	4a05      	ldr	r2, [pc, #20]	; (8000ed4 <SystemInit+0x20>)
 8000ec0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ec4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	e000ed00 	.word	0xe000ed00

08000ed8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ed8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f10 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000edc:	480d      	ldr	r0, [pc, #52]	; (8000f14 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ede:	490e      	ldr	r1, [pc, #56]	; (8000f18 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ee0:	4a0e      	ldr	r2, [pc, #56]	; (8000f1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ee2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ee4:	e002      	b.n	8000eec <LoopCopyDataInit>

08000ee6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ee6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ee8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eea:	3304      	adds	r3, #4

08000eec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ef0:	d3f9      	bcc.n	8000ee6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ef2:	4a0b      	ldr	r2, [pc, #44]	; (8000f20 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ef4:	4c0b      	ldr	r4, [pc, #44]	; (8000f24 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ef6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ef8:	e001      	b.n	8000efe <LoopFillZerobss>

08000efa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000efa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000efc:	3204      	adds	r2, #4

08000efe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000efe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f00:	d3fb      	bcc.n	8000efa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f02:	f7ff ffd7 	bl	8000eb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f06:	f008 f933 	bl	8009170 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f0a:	f7ff fb3b 	bl	8000584 <main>
  bx  lr    
 8000f0e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f10:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f18:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 8000f1c:	08009c7c 	.word	0x08009c7c
  ldr r2, =_sbss
 8000f20:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 8000f24:	20001fd4 	.word	0x20001fd4

08000f28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f28:	e7fe      	b.n	8000f28 <ADC_IRQHandler>
	...

08000f2c <Trimpots_ADC_INIT>:
	UART_Handler.Init.OverSampling = UART_OVERSAMPLING_16;
	HAL_UART_Init(&UART_Handler);
}

void Trimpots_ADC_INIT()
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0

	 ADC_ChannelConfTypeDef sConfig = {0};
 8000f32:	463b      	mov	r3, r7
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	605a      	str	r2, [r3, #4]
 8000f3a:	609a      	str	r2, [r3, #8]
 8000f3c:	60da      	str	r2, [r3, #12]

	  /* USER CODE END ADC1_Init 1 */

	  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	  */
	  hTrimpots_adc.Instance = ADC1;
 8000f3e:	4b21      	ldr	r3, [pc, #132]	; (8000fc4 <Trimpots_ADC_INIT+0x98>)
 8000f40:	4a21      	ldr	r2, [pc, #132]	; (8000fc8 <Trimpots_ADC_INIT+0x9c>)
 8000f42:	601a      	str	r2, [r3, #0]
	  hTrimpots_adc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f44:	4b1f      	ldr	r3, [pc, #124]	; (8000fc4 <Trimpots_ADC_INIT+0x98>)
 8000f46:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f4a:	605a      	str	r2, [r3, #4]
	  hTrimpots_adc.Init.Resolution = ADC_RESOLUTION_12B;
 8000f4c:	4b1d      	ldr	r3, [pc, #116]	; (8000fc4 <Trimpots_ADC_INIT+0x98>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	609a      	str	r2, [r3, #8]
	  hTrimpots_adc.Init.ScanConvMode = ENABLE;
 8000f52:	4b1c      	ldr	r3, [pc, #112]	; (8000fc4 <Trimpots_ADC_INIT+0x98>)
 8000f54:	2201      	movs	r2, #1
 8000f56:	611a      	str	r2, [r3, #16]
	  hTrimpots_adc.Init.ContinuousConvMode = ENABLE;
 8000f58:	4b1a      	ldr	r3, [pc, #104]	; (8000fc4 <Trimpots_ADC_INIT+0x98>)
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	761a      	strb	r2, [r3, #24]
	  hTrimpots_adc.Init.DiscontinuousConvMode = DISABLE;
 8000f5e:	4b19      	ldr	r3, [pc, #100]	; (8000fc4 <Trimpots_ADC_INIT+0x98>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	f883 2020 	strb.w	r2, [r3, #32]
	  hTrimpots_adc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f66:	4b17      	ldr	r3, [pc, #92]	; (8000fc4 <Trimpots_ADC_INIT+0x98>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	62da      	str	r2, [r3, #44]	; 0x2c
	  hTrimpots_adc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f6c:	4b15      	ldr	r3, [pc, #84]	; (8000fc4 <Trimpots_ADC_INIT+0x98>)
 8000f6e:	4a17      	ldr	r2, [pc, #92]	; (8000fcc <Trimpots_ADC_INIT+0xa0>)
 8000f70:	629a      	str	r2, [r3, #40]	; 0x28
	  hTrimpots_adc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f72:	4b14      	ldr	r3, [pc, #80]	; (8000fc4 <Trimpots_ADC_INIT+0x98>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	60da      	str	r2, [r3, #12]
	  hTrimpots_adc.Init.NbrOfConversion = 2;
 8000f78:	4b12      	ldr	r3, [pc, #72]	; (8000fc4 <Trimpots_ADC_INIT+0x98>)
 8000f7a:	2202      	movs	r2, #2
 8000f7c:	61da      	str	r2, [r3, #28]
	  hTrimpots_adc.Init.DMAContinuousRequests = ENABLE;
 8000f7e:	4b11      	ldr	r3, [pc, #68]	; (8000fc4 <Trimpots_ADC_INIT+0x98>)
 8000f80:	2201      	movs	r2, #1
 8000f82:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	  hTrimpots_adc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f86:	4b0f      	ldr	r3, [pc, #60]	; (8000fc4 <Trimpots_ADC_INIT+0x98>)
 8000f88:	2201      	movs	r2, #1
 8000f8a:	615a      	str	r2, [r3, #20]
	  if (HAL_ADC_Init(&hTrimpots_adc) != HAL_OK)
 8000f8c:	480d      	ldr	r0, [pc, #52]	; (8000fc4 <Trimpots_ADC_INIT+0x98>)
 8000f8e:	f000 fd57 	bl	8001a40 <HAL_ADC_Init>

	  }

	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_14;
 8000f92:	230e      	movs	r3, #14
 8000f94:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 8000f96:	2301      	movs	r3, #1
 8000f98:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hTrimpots_adc, &sConfig) != HAL_OK)
 8000f9e:	463b      	mov	r3, r7
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4808      	ldr	r0, [pc, #32]	; (8000fc4 <Trimpots_ADC_INIT+0x98>)
 8000fa4:	f000 fd90 	bl	8001ac8 <HAL_ADC_ConfigChannel>

	  }

	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_15;
 8000fa8:	230f      	movs	r3, #15
 8000faa:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 2;
 8000fac:	2302      	movs	r3, #2
 8000fae:	607b      	str	r3, [r7, #4]
	  if (HAL_ADC_ConfigChannel(&hTrimpots_adc, &sConfig) != HAL_OK)
 8000fb0:	463b      	mov	r3, r7
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4803      	ldr	r0, [pc, #12]	; (8000fc4 <Trimpots_ADC_INIT+0x98>)
 8000fb6:	f000 fd87 	bl	8001ac8 <HAL_ADC_ConfigChannel>
	  {

	  }
}
 8000fba:	bf00      	nop
 8000fbc:	3710      	adds	r7, #16
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	2000036c 	.word	0x2000036c
 8000fc8:	40012000 	.word	0x40012000
 8000fcc:	0f000001 	.word	0x0f000001

08000fd0 <Communication_Driver_Init>:

//---------------------------------------------------</Communication Driver PRIVATE>---------------------------------------------------------

void Communication_Driver_Init(void){
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
	MX_USB_DEVICE_Init();
 8000fd4:	f007 fbac 	bl	8008730 <MX_USB_DEVICE_Init>
	Trimpots_ADC_INIT();
 8000fd8:	f7ff ffa8 	bl	8000f2c <Trimpots_ADC_INIT>
}
 8000fdc:	bf00      	nop
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <Communication_Driver_Log_To_Pc>:
	HAL_Delay(1);
    HAL_ADC_Stop(&hTrimpots_adc);
}

uint8_t Communication_Driver_Log_To_Pc(char *message)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
//	uint8_t status;
//	do{
//		status = CDC_Transmit_FS((uint8_t*)message, strlen(message) );
//	}while(status == USBD_BUSY);
	while(CDC_Transmit_FS((uint8_t*)message, strlen(message) ) == USBD_BUSY);
 8000fe8:	bf00      	nop
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f7ff f8f0 	bl	80001d0 <strlen>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	b29b      	uxth	r3, r3
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f007 fc58 	bl	80088ac <CDC_Transmit_FS>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d0f3      	beq.n	8000fea <Communication_Driver_Log_To_Pc+0xa>

	return 1;
 8001002:	2301      	movs	r3, #1
}
 8001004:	4618      	mov	r0, r3
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <readSensors>:

/**
 * Bit i is the value corresponding to sensor i
 * @return for each sensor 1 if detects something and 0 else
 */
uint32_t readSensors(void){
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
	return (1 << 2) | (1 << 3) | (1 << 4);
 8001010:	231c      	movs	r3, #28
}
 8001012:	4618      	mov	r0, r3
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <getSensorsVotes>:

uint8_t getSensorsVotes(uint32_t semsorsOutput, int8_t lu8_frequency[]){
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i <= ENEMY_POSITIONS_STATES_NO;i++){
 8001026:	2300      	movs	r3, #0
 8001028:	73fb      	strb	r3, [r7, #15]
 800102a:	e007      	b.n	800103c <getSensorsVotes+0x20>
			lu8_frequency[i] = 0;
 800102c:	7bfb      	ldrb	r3, [r7, #15]
 800102e:	683a      	ldr	r2, [r7, #0]
 8001030:	4413      	add	r3, r2
 8001032:	2200      	movs	r2, #0
 8001034:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i <= ENEMY_POSITIONS_STATES_NO;i++){
 8001036:	7bfb      	ldrb	r3, [r7, #15]
 8001038:	3301      	adds	r3, #1
 800103a:	73fb      	strb	r3, [r7, #15]
 800103c:	7bfb      	ldrb	r3, [r7, #15]
 800103e:	2b21      	cmp	r3, #33	; 0x21
 8001040:	d9f4      	bls.n	800102c <getSensorsVotes+0x10>
		}
		uint32_t sensors_values = readSensors();
 8001042:	f7ff ffe3 	bl	800100c <readSensors>
 8001046:	60b8      	str	r0, [r7, #8]
		uint8_t number_of_active_sensors = 0;
 8001048:	2300      	movs	r3, #0
 800104a:	73bb      	strb	r3, [r7, #14]

		///Sensor 0
		if(sensors_values & 0x01){
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	2b00      	cmp	r3, #0
 8001054:	d042      	beq.n	80010dc <getSensorsVotes+0xc0>
			number_of_active_sensors++;
 8001056:	7bbb      	ldrb	r3, [r7, #14]
 8001058:	3301      	adds	r3, #1
 800105a:	73bb      	strb	r3, [r7, #14]
			lu8_frequency[0] += FIRST_VOTE;       ///
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	f993 3000 	ldrsb.w	r3, [r3]
 8001062:	b2db      	uxtb	r3, r3
 8001064:	3307      	adds	r3, #7
 8001066:	b2db      	uxtb	r3, r3
 8001068:	b25a      	sxtb	r2, r3
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	701a      	strb	r2, [r3, #0]
			lu8_frequency[13] += FIRST_VOTE;       /// center line
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	330d      	adds	r3, #13
 8001072:	f993 3000 	ldrsb.w	r3, [r3]
 8001076:	b2db      	uxtb	r3, r3
 8001078:	3307      	adds	r3, #7
 800107a:	b2da      	uxtb	r2, r3
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	330d      	adds	r3, #13
 8001080:	b252      	sxtb	r2, r2
 8001082:	701a      	strb	r2, [r3, #0]
			lu8_frequency[26] += FIRST_VOTE;       ///
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	331a      	adds	r3, #26
 8001088:	f993 3000 	ldrsb.w	r3, [r3]
 800108c:	b2db      	uxtb	r3, r3
 800108e:	3307      	adds	r3, #7
 8001090:	b2da      	uxtb	r2, r3
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	331a      	adds	r3, #26
 8001096:	b252      	sxtb	r2, r2
 8001098:	701a      	strb	r2, [r3, #0]

			lu8_frequency[1] += SECOND_VOTE;       ///
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	3301      	adds	r3, #1
 800109e:	f993 3000 	ldrsb.w	r3, [r3]
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	3306      	adds	r3, #6
 80010a6:	b2da      	uxtb	r2, r3
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	3301      	adds	r3, #1
 80010ac:	b252      	sxtb	r2, r2
 80010ae:	701a      	strb	r2, [r3, #0]
			lu8_frequency[14] += SECOND_VOTE;       ///
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	330e      	adds	r3, #14
 80010b4:	f993 3000 	ldrsb.w	r3, [r3]
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	3306      	adds	r3, #6
 80010bc:	b2da      	uxtb	r2, r3
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	330e      	adds	r3, #14
 80010c2:	b252      	sxtb	r2, r2
 80010c4:	701a      	strb	r2, [r3, #0]

			lu8_frequency[2] += THIRD_VOTE;       ///
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	3302      	adds	r3, #2
 80010ca:	f993 3000 	ldrsb.w	r3, [r3]
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	3304      	adds	r3, #4
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	3302      	adds	r3, #2
 80010d8:	b252      	sxtb	r2, r2
 80010da:	701a      	strb	r2, [r3, #0]

		}
		///Sensor 1
		if(sensors_values & 0x02){
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	f003 0302 	and.w	r3, r3, #2
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d05a      	beq.n	800119c <getSensorsVotes+0x180>
			number_of_active_sensors++;
 80010e6:	7bbb      	ldrb	r3, [r7, #14]
 80010e8:	3301      	adds	r3, #1
 80010ea:	73bb      	strb	r3, [r7, #14]

			lu8_frequency[1] += SECOND_VOTE;       ///
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	3301      	adds	r3, #1
 80010f0:	f993 3000 	ldrsb.w	r3, [r3]
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	3306      	adds	r3, #6
 80010f8:	b2da      	uxtb	r2, r3
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	3301      	adds	r3, #1
 80010fe:	b252      	sxtb	r2, r2
 8001100:	701a      	strb	r2, [r3, #0]
			lu8_frequency[14] += SECOND_VOTE;       ///
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	330e      	adds	r3, #14
 8001106:	f993 3000 	ldrsb.w	r3, [r3]
 800110a:	b2db      	uxtb	r3, r3
 800110c:	3306      	adds	r3, #6
 800110e:	b2da      	uxtb	r2, r3
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	330e      	adds	r3, #14
 8001114:	b252      	sxtb	r2, r2
 8001116:	701a      	strb	r2, [r3, #0]

			lu8_frequency[2] += FIRST_VOTE;       ///
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	3302      	adds	r3, #2
 800111c:	f993 3000 	ldrsb.w	r3, [r3]
 8001120:	b2db      	uxtb	r3, r3
 8001122:	3307      	adds	r3, #7
 8001124:	b2da      	uxtb	r2, r3
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	3302      	adds	r3, #2
 800112a:	b252      	sxtb	r2, r2
 800112c:	701a      	strb	r2, [r3, #0]
			lu8_frequency[15] += FIRST_VOTE;       /// center line
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	330f      	adds	r3, #15
 8001132:	f993 3000 	ldrsb.w	r3, [r3]
 8001136:	b2db      	uxtb	r3, r3
 8001138:	3307      	adds	r3, #7
 800113a:	b2da      	uxtb	r2, r3
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	330f      	adds	r3, #15
 8001140:	b252      	sxtb	r2, r2
 8001142:	701a      	strb	r2, [r3, #0]
			lu8_frequency[27] += FIRST_VOTE;       ///
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	331b      	adds	r3, #27
 8001148:	f993 3000 	ldrsb.w	r3, [r3]
 800114c:	b2db      	uxtb	r3, r3
 800114e:	3307      	adds	r3, #7
 8001150:	b2da      	uxtb	r2, r3
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	331b      	adds	r3, #27
 8001156:	b252      	sxtb	r2, r2
 8001158:	701a      	strb	r2, [r3, #0]

			lu8_frequency[3] += SECOND_VOTE;       ///
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	3303      	adds	r3, #3
 800115e:	f993 3000 	ldrsb.w	r3, [r3]
 8001162:	b2db      	uxtb	r3, r3
 8001164:	3306      	adds	r3, #6
 8001166:	b2da      	uxtb	r2, r3
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	3303      	adds	r3, #3
 800116c:	b252      	sxtb	r2, r2
 800116e:	701a      	strb	r2, [r3, #0]
			lu8_frequency[16] += SECOND_VOTE;       ///
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	3310      	adds	r3, #16
 8001174:	f993 3000 	ldrsb.w	r3, [r3]
 8001178:	b2db      	uxtb	r3, r3
 800117a:	3306      	adds	r3, #6
 800117c:	b2da      	uxtb	r2, r3
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	3310      	adds	r3, #16
 8001182:	b252      	sxtb	r2, r2
 8001184:	701a      	strb	r2, [r3, #0]

			lu8_frequency[4] += THIRD_VOTE;       ///
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	3304      	adds	r3, #4
 800118a:	f993 3000 	ldrsb.w	r3, [r3]
 800118e:	b2db      	uxtb	r3, r3
 8001190:	3304      	adds	r3, #4
 8001192:	b2da      	uxtb	r2, r3
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	3304      	adds	r3, #4
 8001198:	b252      	sxtb	r2, r2
 800119a:	701a      	strb	r2, [r3, #0]

		}
		///Sensor 2
		if(sensors_values & 0x04){
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	f003 0304 	and.w	r3, r3, #4
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d065      	beq.n	8001272 <getSensorsVotes+0x256>
			number_of_active_sensors++;
 80011a6:	7bbb      	ldrb	r3, [r7, #14]
 80011a8:	3301      	adds	r3, #1
 80011aa:	73bb      	strb	r3, [r7, #14]

			lu8_frequency[2] += THIRD_VOTE;       ///
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	3302      	adds	r3, #2
 80011b0:	f993 3000 	ldrsb.w	r3, [r3]
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	3304      	adds	r3, #4
 80011b8:	b2da      	uxtb	r2, r3
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	3302      	adds	r3, #2
 80011be:	b252      	sxtb	r2, r2
 80011c0:	701a      	strb	r2, [r3, #0]

			lu8_frequency[3] += SECOND_VOTE;       ///
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	3303      	adds	r3, #3
 80011c6:	f993 3000 	ldrsb.w	r3, [r3]
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	3306      	adds	r3, #6
 80011ce:	b2da      	uxtb	r2, r3
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	3303      	adds	r3, #3
 80011d4:	b252      	sxtb	r2, r2
 80011d6:	701a      	strb	r2, [r3, #0]
			lu8_frequency[16] += SECOND_VOTE;       ///
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	3310      	adds	r3, #16
 80011dc:	f993 3000 	ldrsb.w	r3, [r3]
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	3306      	adds	r3, #6
 80011e4:	b2da      	uxtb	r2, r3
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	3310      	adds	r3, #16
 80011ea:	b252      	sxtb	r2, r2
 80011ec:	701a      	strb	r2, [r3, #0]

			lu8_frequency[4] += FIRST_VOTE;       ///
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	3304      	adds	r3, #4
 80011f2:	f993 3000 	ldrsb.w	r3, [r3]
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	3307      	adds	r3, #7
 80011fa:	b2da      	uxtb	r2, r3
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	3304      	adds	r3, #4
 8001200:	b252      	sxtb	r2, r2
 8001202:	701a      	strb	r2, [r3, #0]
			lu8_frequency[17] += FIRST_VOTE;       /// center line
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	3311      	adds	r3, #17
 8001208:	f993 3000 	ldrsb.w	r3, [r3]
 800120c:	b2db      	uxtb	r3, r3
 800120e:	3307      	adds	r3, #7
 8001210:	b2da      	uxtb	r2, r3
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	3311      	adds	r3, #17
 8001216:	b252      	sxtb	r2, r2
 8001218:	701a      	strb	r2, [r3, #0]
			lu8_frequency[28] += FIRST_VOTE;       ///
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	331c      	adds	r3, #28
 800121e:	f993 3000 	ldrsb.w	r3, [r3]
 8001222:	b2db      	uxtb	r3, r3
 8001224:	3307      	adds	r3, #7
 8001226:	b2da      	uxtb	r2, r3
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	331c      	adds	r3, #28
 800122c:	b252      	sxtb	r2, r2
 800122e:	701a      	strb	r2, [r3, #0]

			lu8_frequency[5] += SECOND_VOTE;       ///
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	3305      	adds	r3, #5
 8001234:	f993 3000 	ldrsb.w	r3, [r3]
 8001238:	b2db      	uxtb	r3, r3
 800123a:	3306      	adds	r3, #6
 800123c:	b2da      	uxtb	r2, r3
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	3305      	adds	r3, #5
 8001242:	b252      	sxtb	r2, r2
 8001244:	701a      	strb	r2, [r3, #0]
			lu8_frequency[18] += SECOND_VOTE;       ///
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	3312      	adds	r3, #18
 800124a:	f993 3000 	ldrsb.w	r3, [r3]
 800124e:	b2db      	uxtb	r3, r3
 8001250:	3306      	adds	r3, #6
 8001252:	b2da      	uxtb	r2, r3
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	3312      	adds	r3, #18
 8001258:	b252      	sxtb	r2, r2
 800125a:	701a      	strb	r2, [r3, #0]

			lu8_frequency[6] += THIRD_VOTE;       ///
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	3306      	adds	r3, #6
 8001260:	f993 3000 	ldrsb.w	r3, [r3]
 8001264:	b2db      	uxtb	r3, r3
 8001266:	3304      	adds	r3, #4
 8001268:	b2da      	uxtb	r2, r3
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	3306      	adds	r3, #6
 800126e:	b252      	sxtb	r2, r2
 8001270:	701a      	strb	r2, [r3, #0]
		}
		///Sensor 3
		if(sensors_values & 0x08){
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	f003 0308 	and.w	r3, r3, #8
 8001278:	2b00      	cmp	r3, #0
 800127a:	d070      	beq.n	800135e <getSensorsVotes+0x342>
			number_of_active_sensors++;
 800127c:	7bbb      	ldrb	r3, [r7, #14]
 800127e:	3301      	adds	r3, #1
 8001280:	73bb      	strb	r3, [r7, #14]

			lu8_frequency[3] += THIRD_VOTE;       ///
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	3303      	adds	r3, #3
 8001286:	f993 3000 	ldrsb.w	r3, [r3]
 800128a:	b2db      	uxtb	r3, r3
 800128c:	3304      	adds	r3, #4
 800128e:	b2da      	uxtb	r2, r3
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	3303      	adds	r3, #3
 8001294:	b252      	sxtb	r2, r2
 8001296:	701a      	strb	r2, [r3, #0]
			lu8_frequency[18] += THIRD_VOTE;       ///
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	3312      	adds	r3, #18
 800129c:	f993 3000 	ldrsb.w	r3, [r3]
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	3304      	adds	r3, #4
 80012a4:	b2da      	uxtb	r2, r3
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	3312      	adds	r3, #18
 80012aa:	b252      	sxtb	r2, r2
 80012ac:	701a      	strb	r2, [r3, #0]

			lu8_frequency[4] += SECOND_VOTE;       ///
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	3304      	adds	r3, #4
 80012b2:	f993 3000 	ldrsb.w	r3, [r3]
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	3306      	adds	r3, #6
 80012ba:	b2da      	uxtb	r2, r3
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	3304      	adds	r3, #4
 80012c0:	b252      	sxtb	r2, r2
 80012c2:	701a      	strb	r2, [r3, #0]
			lu8_frequency[19] += SECOND_VOTE;       ///
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	3313      	adds	r3, #19
 80012c8:	f993 3000 	ldrsb.w	r3, [r3]
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	3306      	adds	r3, #6
 80012d0:	b2da      	uxtb	r2, r3
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	3313      	adds	r3, #19
 80012d6:	b252      	sxtb	r2, r2
 80012d8:	701a      	strb	r2, [r3, #0]

			lu8_frequency[5] += FIRST_VOTE;       ///
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	3305      	adds	r3, #5
 80012de:	f993 3000 	ldrsb.w	r3, [r3]
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	3307      	adds	r3, #7
 80012e6:	b2da      	uxtb	r2, r3
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	3305      	adds	r3, #5
 80012ec:	b252      	sxtb	r2, r2
 80012ee:	701a      	strb	r2, [r3, #0]
			lu8_frequency[20] += FIRST_VOTE;       /// center line
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	3314      	adds	r3, #20
 80012f4:	f993 3000 	ldrsb.w	r3, [r3]
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	3307      	adds	r3, #7
 80012fc:	b2da      	uxtb	r2, r3
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	3314      	adds	r3, #20
 8001302:	b252      	sxtb	r2, r2
 8001304:	701a      	strb	r2, [r3, #0]


			lu8_frequency[6] +=  SECOND_VOTE;       ///
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	3306      	adds	r3, #6
 800130a:	f993 3000 	ldrsb.w	r3, [r3]
 800130e:	b2db      	uxtb	r3, r3
 8001310:	3306      	adds	r3, #6
 8001312:	b2da      	uxtb	r2, r3
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	3306      	adds	r3, #6
 8001318:	b252      	sxtb	r2, r2
 800131a:	701a      	strb	r2, [r3, #0]
			lu8_frequency[21] += SECOND_VOTE;       ///
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	3315      	adds	r3, #21
 8001320:	f993 3000 	ldrsb.w	r3, [r3]
 8001324:	b2db      	uxtb	r3, r3
 8001326:	3306      	adds	r3, #6
 8001328:	b2da      	uxtb	r2, r3
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	3315      	adds	r3, #21
 800132e:	b252      	sxtb	r2, r2
 8001330:	701a      	strb	r2, [r3, #0]
			lu8_frequency[29] += SECOND_VOTE;       ///
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	331d      	adds	r3, #29
 8001336:	f993 3000 	ldrsb.w	r3, [r3]
 800133a:	b2db      	uxtb	r3, r3
 800133c:	3306      	adds	r3, #6
 800133e:	b2da      	uxtb	r2, r3
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	331d      	adds	r3, #29
 8001344:	b252      	sxtb	r2, r2
 8001346:	701a      	strb	r2, [r3, #0]

			lu8_frequency[7] += THIRD_VOTE;       ///
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	3307      	adds	r3, #7
 800134c:	f993 3000 	ldrsb.w	r3, [r3]
 8001350:	b2db      	uxtb	r3, r3
 8001352:	3304      	adds	r3, #4
 8001354:	b2da      	uxtb	r2, r3
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	3307      	adds	r3, #7
 800135a:	b252      	sxtb	r2, r2
 800135c:	701a      	strb	r2, [r3, #0]

		}
		///Sensor 4
		if(sensors_values & 0x10){
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	f003 0310 	and.w	r3, r3, #16
 8001364:	2b00      	cmp	r3, #0
 8001366:	d070      	beq.n	800144a <getSensorsVotes+0x42e>
			number_of_active_sensors++;
 8001368:	7bbb      	ldrb	r3, [r7, #14]
 800136a:	3301      	adds	r3, #1
 800136c:	73bb      	strb	r3, [r7, #14]
			lu8_frequency[5] += THIRD_VOTE;        ///
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	3305      	adds	r3, #5
 8001372:	f993 3000 	ldrsb.w	r3, [r3]
 8001376:	b2db      	uxtb	r3, r3
 8001378:	3304      	adds	r3, #4
 800137a:	b2da      	uxtb	r2, r3
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	3305      	adds	r3, #5
 8001380:	b252      	sxtb	r2, r2
 8001382:	701a      	strb	r2, [r3, #0]

			lu8_frequency[6] += SECOND_VOTE;       ///
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	3306      	adds	r3, #6
 8001388:	f993 3000 	ldrsb.w	r3, [r3]
 800138c:	b2db      	uxtb	r3, r3
 800138e:	3306      	adds	r3, #6
 8001390:	b2da      	uxtb	r2, r3
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	3306      	adds	r3, #6
 8001396:	b252      	sxtb	r2, r2
 8001398:	701a      	strb	r2, [r3, #0]
			lu8_frequency[17] += SECOND_VOTE;      ///
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	3311      	adds	r3, #17
 800139e:	f993 3000 	ldrsb.w	r3, [r3]
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	3306      	adds	r3, #6
 80013a6:	b2da      	uxtb	r2, r3
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	3311      	adds	r3, #17
 80013ac:	b252      	sxtb	r2, r2
 80013ae:	701a      	strb	r2, [r3, #0]
			lu8_frequency[28] += SECOND_VOTE;      ///
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	331c      	adds	r3, #28
 80013b4:	f993 3000 	ldrsb.w	r3, [r3]
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	3306      	adds	r3, #6
 80013bc:	b2da      	uxtb	r2, r3
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	331c      	adds	r3, #28
 80013c2:	b252      	sxtb	r2, r2
 80013c4:	701a      	strb	r2, [r3, #0]

			lu8_frequency[7] += FIRST_VOTE;        ///
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	3307      	adds	r3, #7
 80013ca:	f993 3000 	ldrsb.w	r3, [r3]
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	3307      	adds	r3, #7
 80013d2:	b2da      	uxtb	r2, r3
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	3307      	adds	r3, #7
 80013d8:	b252      	sxtb	r2, r2
 80013da:	701a      	strb	r2, [r3, #0]
			lu8_frequency[18] += FIRST_VOTE;       /// center line
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	3312      	adds	r3, #18
 80013e0:	f993 3000 	ldrsb.w	r3, [r3]
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	3307      	adds	r3, #7
 80013e8:	b2da      	uxtb	r2, r3
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	3312      	adds	r3, #18
 80013ee:	b252      	sxtb	r2, r2
 80013f0:	701a      	strb	r2, [r3, #0]


			lu8_frequency[8] += SECOND_VOTE;       ///
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	3308      	adds	r3, #8
 80013f6:	f993 3000 	ldrsb.w	r3, [r3]
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	3306      	adds	r3, #6
 80013fe:	b2da      	uxtb	r2, r3
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	3308      	adds	r3, #8
 8001404:	b252      	sxtb	r2, r2
 8001406:	701a      	strb	r2, [r3, #0]
			lu8_frequency[19] += SECOND_VOTE;      ///
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	3313      	adds	r3, #19
 800140c:	f993 3000 	ldrsb.w	r3, [r3]
 8001410:	b2db      	uxtb	r3, r3
 8001412:	3306      	adds	r3, #6
 8001414:	b2da      	uxtb	r2, r3
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	3313      	adds	r3, #19
 800141a:	b252      	sxtb	r2, r2
 800141c:	701a      	strb	r2, [r3, #0]

			lu8_frequency[9] += THIRD_VOTE;        ///
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	3309      	adds	r3, #9
 8001422:	f993 3000 	ldrsb.w	r3, [r3]
 8001426:	b2db      	uxtb	r3, r3
 8001428:	3304      	adds	r3, #4
 800142a:	b2da      	uxtb	r2, r3
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	3309      	adds	r3, #9
 8001430:	b252      	sxtb	r2, r2
 8001432:	701a      	strb	r2, [r3, #0]
			lu8_frequency[20] += THIRD_VOTE;        ///
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	3314      	adds	r3, #20
 8001438:	f993 3000 	ldrsb.w	r3, [r3]
 800143c:	b2db      	uxtb	r3, r3
 800143e:	3304      	adds	r3, #4
 8001440:	b2da      	uxtb	r2, r3
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	3314      	adds	r3, #20
 8001446:	b252      	sxtb	r2, r2
 8001448:	701a      	strb	r2, [r3, #0]
		}
		///Sensor 5
		if(sensors_values & 0x20){
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	f003 0320 	and.w	r3, r3, #32
 8001450:	2b00      	cmp	r3, #0
 8001452:	d065      	beq.n	8001520 <getSensorsVotes+0x504>
			number_of_active_sensors++;
 8001454:	7bbb      	ldrb	r3, [r7, #14]
 8001456:	3301      	adds	r3, #1
 8001458:	73bb      	strb	r3, [r7, #14]
			lu8_frequency[6] += THIRD_VOTE;       ///
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	3306      	adds	r3, #6
 800145e:	f993 3000 	ldrsb.w	r3, [r3]
 8001462:	b2db      	uxtb	r3, r3
 8001464:	3304      	adds	r3, #4
 8001466:	b2da      	uxtb	r2, r3
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	3306      	adds	r3, #6
 800146c:	b252      	sxtb	r2, r2
 800146e:	701a      	strb	r2, [r3, #0]

			lu8_frequency[7] += SECOND_VOTE;       ///
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	3307      	adds	r3, #7
 8001474:	f993 3000 	ldrsb.w	r3, [r3]
 8001478:	b2db      	uxtb	r3, r3
 800147a:	3306      	adds	r3, #6
 800147c:	b2da      	uxtb	r2, r3
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	3307      	adds	r3, #7
 8001482:	b252      	sxtb	r2, r2
 8001484:	701a      	strb	r2, [r3, #0]
			lu8_frequency[20] += SECOND_VOTE;       ///
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	3314      	adds	r3, #20
 800148a:	f993 3000 	ldrsb.w	r3, [r3]
 800148e:	b2db      	uxtb	r3, r3
 8001490:	3306      	adds	r3, #6
 8001492:	b2da      	uxtb	r2, r3
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	3314      	adds	r3, #20
 8001498:	b252      	sxtb	r2, r2
 800149a:	701a      	strb	r2, [r3, #0]

			lu8_frequency[8] += FIRST_VOTE;       ///
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	3308      	adds	r3, #8
 80014a0:	f993 3000 	ldrsb.w	r3, [r3]
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	3307      	adds	r3, #7
 80014a8:	b2da      	uxtb	r2, r3
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	3308      	adds	r3, #8
 80014ae:	b252      	sxtb	r2, r2
 80014b0:	701a      	strb	r2, [r3, #0]
			lu8_frequency[21] += FIRST_VOTE;       /// center line
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	3315      	adds	r3, #21
 80014b6:	f993 3000 	ldrsb.w	r3, [r3]
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	3307      	adds	r3, #7
 80014be:	b2da      	uxtb	r2, r3
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	3315      	adds	r3, #21
 80014c4:	b252      	sxtb	r2, r2
 80014c6:	701a      	strb	r2, [r3, #0]
			lu8_frequency[29] += FIRST_VOTE;       ///
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	331d      	adds	r3, #29
 80014cc:	f993 3000 	ldrsb.w	r3, [r3]
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	3307      	adds	r3, #7
 80014d4:	b2da      	uxtb	r2, r3
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	331d      	adds	r3, #29
 80014da:	b252      	sxtb	r2, r2
 80014dc:	701a      	strb	r2, [r3, #0]

			lu8_frequency[9] += SECOND_VOTE;       ///
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	3309      	adds	r3, #9
 80014e2:	f993 3000 	ldrsb.w	r3, [r3]
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	3306      	adds	r3, #6
 80014ea:	b2da      	uxtb	r2, r3
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	3309      	adds	r3, #9
 80014f0:	b252      	sxtb	r2, r2
 80014f2:	701a      	strb	r2, [r3, #0]
			lu8_frequency[22] += SECOND_VOTE;       ///
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	3316      	adds	r3, #22
 80014f8:	f993 3000 	ldrsb.w	r3, [r3]
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	3306      	adds	r3, #6
 8001500:	b2da      	uxtb	r2, r3
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	3316      	adds	r3, #22
 8001506:	b252      	sxtb	r2, r2
 8001508:	701a      	strb	r2, [r3, #0]

			lu8_frequency[10] += THIRD_VOTE;       ///
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	330a      	adds	r3, #10
 800150e:	f993 3000 	ldrsb.w	r3, [r3]
 8001512:	b2db      	uxtb	r3, r3
 8001514:	3304      	adds	r3, #4
 8001516:	b2da      	uxtb	r2, r3
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	330a      	adds	r3, #10
 800151c:	b252      	sxtb	r2, r2
 800151e:	701a      	strb	r2, [r3, #0]
		}
		///Sensor 6
		if(sensors_values & 0x40){
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001526:	2b00      	cmp	r3, #0
 8001528:	d05a      	beq.n	80015e0 <getSensorsVotes+0x5c4>
			number_of_active_sensors++;
 800152a:	7bbb      	ldrb	r3, [r7, #14]
 800152c:	3301      	adds	r3, #1
 800152e:	73bb      	strb	r3, [r7, #14]

			lu8_frequency[8] += THIRD_VOTE;       ///
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	3308      	adds	r3, #8
 8001534:	f993 3000 	ldrsb.w	r3, [r3]
 8001538:	b2db      	uxtb	r3, r3
 800153a:	3304      	adds	r3, #4
 800153c:	b2da      	uxtb	r2, r3
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	3308      	adds	r3, #8
 8001542:	b252      	sxtb	r2, r2
 8001544:	701a      	strb	r2, [r3, #0]

			lu8_frequency[9] += SECOND_VOTE;       ///
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	3309      	adds	r3, #9
 800154a:	f993 3000 	ldrsb.w	r3, [r3]
 800154e:	b2db      	uxtb	r3, r3
 8001550:	3306      	adds	r3, #6
 8001552:	b2da      	uxtb	r2, r3
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	3309      	adds	r3, #9
 8001558:	b252      	sxtb	r2, r2
 800155a:	701a      	strb	r2, [r3, #0]
			lu8_frequency[22] += SECOND_VOTE;       ///
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	3316      	adds	r3, #22
 8001560:	f993 3000 	ldrsb.w	r3, [r3]
 8001564:	b2db      	uxtb	r3, r3
 8001566:	3306      	adds	r3, #6
 8001568:	b2da      	uxtb	r2, r3
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	3316      	adds	r3, #22
 800156e:	b252      	sxtb	r2, r2
 8001570:	701a      	strb	r2, [r3, #0]

			lu8_frequency[10] += FIRST_VOTE;       ///
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	330a      	adds	r3, #10
 8001576:	f993 3000 	ldrsb.w	r3, [r3]
 800157a:	b2db      	uxtb	r3, r3
 800157c:	3307      	adds	r3, #7
 800157e:	b2da      	uxtb	r2, r3
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	330a      	adds	r3, #10
 8001584:	b252      	sxtb	r2, r2
 8001586:	701a      	strb	r2, [r3, #0]
			lu8_frequency[23] += FIRST_VOTE;       /// center line
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	3317      	adds	r3, #23
 800158c:	f993 3000 	ldrsb.w	r3, [r3]
 8001590:	b2db      	uxtb	r3, r3
 8001592:	3307      	adds	r3, #7
 8001594:	b2da      	uxtb	r2, r3
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	3317      	adds	r3, #23
 800159a:	b252      	sxtb	r2, r2
 800159c:	701a      	strb	r2, [r3, #0]
			lu8_frequency[30] += FIRST_VOTE;       ///
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	331e      	adds	r3, #30
 80015a2:	f993 3000 	ldrsb.w	r3, [r3]
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	3307      	adds	r3, #7
 80015aa:	b2da      	uxtb	r2, r3
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	331e      	adds	r3, #30
 80015b0:	b252      	sxtb	r2, r2
 80015b2:	701a      	strb	r2, [r3, #0]

			lu8_frequency[11] += SECOND_VOTE;       ///
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	330b      	adds	r3, #11
 80015b8:	f993 3000 	ldrsb.w	r3, [r3]
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	3306      	adds	r3, #6
 80015c0:	b2da      	uxtb	r2, r3
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	330b      	adds	r3, #11
 80015c6:	b252      	sxtb	r2, r2
 80015c8:	701a      	strb	r2, [r3, #0]
			lu8_frequency[24] += SECOND_VOTE;       ///
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	3318      	adds	r3, #24
 80015ce:	f993 3000 	ldrsb.w	r3, [r3]
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	3306      	adds	r3, #6
 80015d6:	b2da      	uxtb	r2, r3
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	3318      	adds	r3, #24
 80015dc:	b252      	sxtb	r2, r2
 80015de:	701a      	strb	r2, [r3, #0]
		}
		///Sensor 7
		if(sensors_values & 0x80){
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d044      	beq.n	8001674 <getSensorsVotes+0x658>
			number_of_active_sensors++;
 80015ea:	7bbb      	ldrb	r3, [r7, #14]
 80015ec:	3301      	adds	r3, #1
 80015ee:	73bb      	strb	r3, [r7, #14]

			lu8_frequency[10] += THIRD_VOTE;       ///
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	330a      	adds	r3, #10
 80015f4:	f993 3000 	ldrsb.w	r3, [r3]
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	3304      	adds	r3, #4
 80015fc:	b2da      	uxtb	r2, r3
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	330a      	adds	r3, #10
 8001602:	b252      	sxtb	r2, r2
 8001604:	701a      	strb	r2, [r3, #0]

			lu8_frequency[11] += SECOND_VOTE;       ///
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	330b      	adds	r3, #11
 800160a:	f993 3000 	ldrsb.w	r3, [r3]
 800160e:	b2db      	uxtb	r3, r3
 8001610:	3306      	adds	r3, #6
 8001612:	b2da      	uxtb	r2, r3
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	330b      	adds	r3, #11
 8001618:	b252      	sxtb	r2, r2
 800161a:	701a      	strb	r2, [r3, #0]
			lu8_frequency[24] += SECOND_VOTE;       ///
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	3318      	adds	r3, #24
 8001620:	f993 3000 	ldrsb.w	r3, [r3]
 8001624:	b2db      	uxtb	r3, r3
 8001626:	3306      	adds	r3, #6
 8001628:	b2da      	uxtb	r2, r3
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	3318      	adds	r3, #24
 800162e:	b252      	sxtb	r2, r2
 8001630:	701a      	strb	r2, [r3, #0]

			lu8_frequency[12] += FIRST_VOTE;       ///
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	330c      	adds	r3, #12
 8001636:	f993 3000 	ldrsb.w	r3, [r3]
 800163a:	b2db      	uxtb	r3, r3
 800163c:	3307      	adds	r3, #7
 800163e:	b2da      	uxtb	r2, r3
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	330c      	adds	r3, #12
 8001644:	b252      	sxtb	r2, r2
 8001646:	701a      	strb	r2, [r3, #0]
			lu8_frequency[25] += FIRST_VOTE;       /// center line
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	3319      	adds	r3, #25
 800164c:	f993 3000 	ldrsb.w	r3, [r3]
 8001650:	b2db      	uxtb	r3, r3
 8001652:	3307      	adds	r3, #7
 8001654:	b2da      	uxtb	r2, r3
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	3319      	adds	r3, #25
 800165a:	b252      	sxtb	r2, r2
 800165c:	701a      	strb	r2, [r3, #0]
			lu8_frequency[31] += FIRST_VOTE;       ///
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	331f      	adds	r3, #31
 8001662:	f993 3000 	ldrsb.w	r3, [r3]
 8001666:	b2db      	uxtb	r3, r3
 8001668:	3307      	adds	r3, #7
 800166a:	b2da      	uxtb	r2, r3
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	331f      	adds	r3, #31
 8001670:	b252      	sxtb	r2, r2
 8001672:	701a      	strb	r2, [r3, #0]
		}
		return number_of_active_sensors;
 8001674:	7bbb      	ldrb	r3, [r7, #14]

}
 8001676:	4618      	mov	r0, r3
 8001678:	3710      	adds	r7, #16
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
	...

08001680 <Enemy_Sensors_Init>:

///---------------------------------------------------</Enemy Sensors PRIVATE>---------------------------------------------------------


void Enemy_Sensors_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b086      	sub	sp, #24
 8001684:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef sensor_initTypeDef = {0};
 8001686:	1d3b      	adds	r3, r7, #4
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	605a      	str	r2, [r3, #4]
 800168e:	609a      	str	r2, [r3, #8]
 8001690:	60da      	str	r2, [r3, #12]
 8001692:	611a      	str	r2, [r3, #16]
	sensor_initTypeDef.Mode = GPIO_MODE_INPUT;
 8001694:	2300      	movs	r3, #0
 8001696:	60bb      	str	r3, [r7, #8]
	sensor_initTypeDef.Speed = GPIO_SPEED_LOW;
 8001698:	2300      	movs	r3, #0
 800169a:	613b      	str	r3, [r7, #16]
	sensor_initTypeDef.Pull = GPIO_NOPULL;
 800169c:	2300      	movs	r3, #0
 800169e:	60fb      	str	r3, [r7, #12]

	// initializa sensors 0 and 1
	sensor_initTypeDef.Pin = SENSOR_0_PIN | SENSOR_1_PIN;
 80016a0:	2303      	movs	r3, #3
 80016a2:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(SENSOR_0_1_GPIO, &sensor_initTypeDef);
 80016a4:	1d3b      	adds	r3, r7, #4
 80016a6:	4619      	mov	r1, r3
 80016a8:	4803      	ldr	r0, [pc, #12]	; (80016b8 <Enemy_Sensors_Init+0x38>)
 80016aa:	f001 f827 	bl	80026fc <HAL_GPIO_Init>

}
 80016ae:	bf00      	nop
 80016b0:	3718      	adds	r7, #24
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	40020000 	.word	0x40020000

080016bc <Enemy_Sensors_Test>:




void Enemy_Sensors_Test(uint8_t (*log_function)(char *))
{
 80016bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016be:	b0b1      	sub	sp, #196	; 0xc4
 80016c0:	af06      	add	r7, sp, #24
 80016c2:	6078      	str	r0, [r7, #4]

	Enemy_Sensors_Init();
 80016c4:	f7ff ffdc 	bl	8001680 <Enemy_Sensors_Init>

	uint32_t semsorsOutput = readSensors();
 80016c8:	f7ff fca0 	bl	800100c <readSensors>
 80016cc:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

	int8_t data[ENEMY_POSITIONS_STATES_NO];
	getSensorsVotes(semsorsOutput, data);
 80016d0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80016d4:	4619      	mov	r1, r3
 80016d6:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80016da:	f7ff fc9f 	bl	800101c <getSensorsVotes>

	char s[100];
	sprintf(s,"s0 = %d, s1 = %d, s2 = %d, s3 = %d, s4 = %d, s5 = %d, s6 = %d, s7 = %d\r\n\r\n",
 80016de:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80016e2:	f003 0c01 	and.w	ip, r3, #1
 80016e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80016ea:	f003 0e02 	and.w	lr, r3, #2
 80016ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80016f2:	f003 0304 	and.w	r3, r3, #4
 80016f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80016fa:	f002 0208 	and.w	r2, r2, #8
 80016fe:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8001702:	f001 0110 	and.w	r1, r1, #16
 8001706:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800170a:	f000 0020 	and.w	r0, r0, #32
 800170e:	f8d7 4094 	ldr.w	r4, [r7, #148]	; 0x94
 8001712:	f004 0440 	and.w	r4, r4, #64	; 0x40
 8001716:	f8d7 5094 	ldr.w	r5, [r7, #148]	; 0x94
 800171a:	f005 0580 	and.w	r5, r5, #128	; 0x80
 800171e:	f107 0608 	add.w	r6, r7, #8
 8001722:	9505      	str	r5, [sp, #20]
 8001724:	9404      	str	r4, [sp, #16]
 8001726:	9003      	str	r0, [sp, #12]
 8001728:	9102      	str	r1, [sp, #8]
 800172a:	9201      	str	r2, [sp, #4]
 800172c:	9300      	str	r3, [sp, #0]
 800172e:	4673      	mov	r3, lr
 8001730:	4662      	mov	r2, ip
 8001732:	496f      	ldr	r1, [pc, #444]	; (80018f0 <Enemy_Sensors_Test+0x234>)
 8001734:	4630      	mov	r0, r6
 8001736:	f007 fd47 	bl	80091c8 <siprintf>
			semsorsOutput & 0x08,
			semsorsOutput & 0x10,
			semsorsOutput & 0x20,
			semsorsOutput & 0x40,
			semsorsOutput & 0x80);
	(*log_function)(s);
 800173a:	f107 0208 	add.w	r2, r7, #8
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4610      	mov	r0, r2
 8001742:	4798      	blx	r3





	(*log_function)(" 0  | 1  | 2  | 3  | 4  | 5  | 6  | 7  | 8  | 9  | 10 | 11 | 12 |\r\n");
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	486b      	ldr	r0, [pc, #428]	; (80018f4 <Enemy_Sensors_Test+0x238>)
 8001748:	4798      	blx	r3
	//layer 2
	for(int ep = 26 ; ep < 29; ep++){
 800174a:	231a      	movs	r3, #26
 800174c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001750:	e026      	b.n	80017a0 <Enemy_Sensors_Test+0xe4>
		int8_t d = data[ep];
 8001752:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8001756:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800175a:	4413      	add	r3, r2
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
		if(d < 10)
 8001762:	f997 3090 	ldrsb.w	r3, [r7, #144]	; 0x90
 8001766:	2b09      	cmp	r3, #9
 8001768:	dc08      	bgt.n	800177c <Enemy_Sensors_Test+0xc0>
			sprintf(s," %d  |    |",d);
 800176a:	f997 2090 	ldrsb.w	r2, [r7, #144]	; 0x90
 800176e:	f107 0308 	add.w	r3, r7, #8
 8001772:	4961      	ldr	r1, [pc, #388]	; (80018f8 <Enemy_Sensors_Test+0x23c>)
 8001774:	4618      	mov	r0, r3
 8001776:	f007 fd27 	bl	80091c8 <siprintf>
 800177a:	e007      	b.n	800178c <Enemy_Sensors_Test+0xd0>
		else
			sprintf(s," %d |    |",d);
 800177c:	f997 2090 	ldrsb.w	r2, [r7, #144]	; 0x90
 8001780:	f107 0308 	add.w	r3, r7, #8
 8001784:	495d      	ldr	r1, [pc, #372]	; (80018fc <Enemy_Sensors_Test+0x240>)
 8001786:	4618      	mov	r0, r3
 8001788:	f007 fd1e 	bl	80091c8 <siprintf>
		(*log_function)(s);
 800178c:	f107 0208 	add.w	r2, r7, #8
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	4610      	mov	r0, r2
 8001794:	4798      	blx	r3
	for(int ep = 26 ; ep < 29; ep++){
 8001796:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800179a:	3301      	adds	r3, #1
 800179c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80017a0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80017a4:	2b1c      	cmp	r3, #28
 80017a6:	ddd4      	ble.n	8001752 <Enemy_Sensors_Test+0x96>
	}
	(*log_function)("    |    |");
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	4855      	ldr	r0, [pc, #340]	; (8001900 <Enemy_Sensors_Test+0x244>)
 80017ac:	4798      	blx	r3
	for(int ep = 29 ; ep < 32; ep++){
 80017ae:	231d      	movs	r3, #29
 80017b0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80017b4:	e026      	b.n	8001804 <Enemy_Sensors_Test+0x148>
		int8_t d = data[ep];
 80017b6:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80017ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80017be:	4413      	add	r3, r2
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
		if(d < 10)
 80017c6:	f997 3091 	ldrsb.w	r3, [r7, #145]	; 0x91
 80017ca:	2b09      	cmp	r3, #9
 80017cc:	dc08      	bgt.n	80017e0 <Enemy_Sensors_Test+0x124>
			sprintf(s," %d  |    |",d);
 80017ce:	f997 2091 	ldrsb.w	r2, [r7, #145]	; 0x91
 80017d2:	f107 0308 	add.w	r3, r7, #8
 80017d6:	4948      	ldr	r1, [pc, #288]	; (80018f8 <Enemy_Sensors_Test+0x23c>)
 80017d8:	4618      	mov	r0, r3
 80017da:	f007 fcf5 	bl	80091c8 <siprintf>
 80017de:	e007      	b.n	80017f0 <Enemy_Sensors_Test+0x134>
		else
			sprintf(s," %d |    |",d);
 80017e0:	f997 2091 	ldrsb.w	r2, [r7, #145]	; 0x91
 80017e4:	f107 0308 	add.w	r3, r7, #8
 80017e8:	4944      	ldr	r1, [pc, #272]	; (80018fc <Enemy_Sensors_Test+0x240>)
 80017ea:	4618      	mov	r0, r3
 80017ec:	f007 fcec 	bl	80091c8 <siprintf>
		(*log_function)(s);
 80017f0:	f107 0208 	add.w	r2, r7, #8
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	4610      	mov	r0, r2
 80017f8:	4798      	blx	r3
	for(int ep = 29 ; ep < 32; ep++){
 80017fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80017fe:	3301      	adds	r3, #1
 8001800:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001804:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001808:	2b1f      	cmp	r3, #31
 800180a:	ddd4      	ble.n	80017b6 <Enemy_Sensors_Test+0xfa>
	}
	(*log_function)("\r\n");
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	483d      	ldr	r0, [pc, #244]	; (8001904 <Enemy_Sensors_Test+0x248>)
 8001810:	4798      	blx	r3

	//layer 1
	for(int ep = 13 ; ep < 26; ep++){
 8001812:	230d      	movs	r3, #13
 8001814:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001818:	e026      	b.n	8001868 <Enemy_Sensors_Test+0x1ac>
		int8_t d = data[ep];
 800181a:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800181e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001822:	4413      	add	r3, r2
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
		if(d < 10)
 800182a:	f997 3092 	ldrsb.w	r3, [r7, #146]	; 0x92
 800182e:	2b09      	cmp	r3, #9
 8001830:	dc08      	bgt.n	8001844 <Enemy_Sensors_Test+0x188>
			sprintf(s," %d  |",d);
 8001832:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 8001836:	f107 0308 	add.w	r3, r7, #8
 800183a:	4933      	ldr	r1, [pc, #204]	; (8001908 <Enemy_Sensors_Test+0x24c>)
 800183c:	4618      	mov	r0, r3
 800183e:	f007 fcc3 	bl	80091c8 <siprintf>
 8001842:	e007      	b.n	8001854 <Enemy_Sensors_Test+0x198>
		else
			sprintf(s," %d |",d);
 8001844:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 8001848:	f107 0308 	add.w	r3, r7, #8
 800184c:	492f      	ldr	r1, [pc, #188]	; (800190c <Enemy_Sensors_Test+0x250>)
 800184e:	4618      	mov	r0, r3
 8001850:	f007 fcba 	bl	80091c8 <siprintf>
		(*log_function)(s);
 8001854:	f107 0208 	add.w	r2, r7, #8
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	4610      	mov	r0, r2
 800185c:	4798      	blx	r3
	for(int ep = 13 ; ep < 26; ep++){
 800185e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001862:	3301      	adds	r3, #1
 8001864:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001868:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800186c:	2b19      	cmp	r3, #25
 800186e:	ddd4      	ble.n	800181a <Enemy_Sensors_Test+0x15e>
	}
	(*log_function)("\r\n");
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	4824      	ldr	r0, [pc, #144]	; (8001904 <Enemy_Sensors_Test+0x248>)
 8001874:	4798      	blx	r3

	//layer 0
	for(int ep = 0 ; ep < 13; ep++){
 8001876:	2300      	movs	r3, #0
 8001878:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800187c:	e026      	b.n	80018cc <Enemy_Sensors_Test+0x210>
		int8_t d = data[ep];
 800187e:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8001882:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001886:	4413      	add	r3, r2
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
		if(d < 10)
 800188e:	f997 3093 	ldrsb.w	r3, [r7, #147]	; 0x93
 8001892:	2b09      	cmp	r3, #9
 8001894:	dc08      	bgt.n	80018a8 <Enemy_Sensors_Test+0x1ec>
			sprintf(s," %d  |",d);
 8001896:	f997 2093 	ldrsb.w	r2, [r7, #147]	; 0x93
 800189a:	f107 0308 	add.w	r3, r7, #8
 800189e:	491a      	ldr	r1, [pc, #104]	; (8001908 <Enemy_Sensors_Test+0x24c>)
 80018a0:	4618      	mov	r0, r3
 80018a2:	f007 fc91 	bl	80091c8 <siprintf>
 80018a6:	e007      	b.n	80018b8 <Enemy_Sensors_Test+0x1fc>
		else
			sprintf(s," %d |",d);
 80018a8:	f997 2093 	ldrsb.w	r2, [r7, #147]	; 0x93
 80018ac:	f107 0308 	add.w	r3, r7, #8
 80018b0:	4916      	ldr	r1, [pc, #88]	; (800190c <Enemy_Sensors_Test+0x250>)
 80018b2:	4618      	mov	r0, r3
 80018b4:	f007 fc88 	bl	80091c8 <siprintf>
		(*log_function)(s);
 80018b8:	f107 0208 	add.w	r2, r7, #8
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	4610      	mov	r0, r2
 80018c0:	4798      	blx	r3
	for(int ep = 0 ; ep < 13; ep++){
 80018c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80018c6:	3301      	adds	r3, #1
 80018c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80018cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80018d0:	2b0c      	cmp	r3, #12
 80018d2:	ddd4      	ble.n	800187e <Enemy_Sensors_Test+0x1c2>
	}
	(*log_function)("\r\n");
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	480b      	ldr	r0, [pc, #44]	; (8001904 <Enemy_Sensors_Test+0x248>)
 80018d8:	4798      	blx	r3


	(*log_function)("------------------------------------------------------------------\r\n\r\n\r\n");
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	480c      	ldr	r0, [pc, #48]	; (8001910 <Enemy_Sensors_Test+0x254>)
 80018de:	4798      	blx	r3
	HAL_Delay(1000);
 80018e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018e4:	f000 f888 	bl	80019f8 <HAL_Delay>



}
 80018e8:	bf00      	nop
 80018ea:	37ac      	adds	r7, #172	; 0xac
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018f0:	08009abc 	.word	0x08009abc
 80018f4:	08009b08 	.word	0x08009b08
 80018f8:	08009b4c 	.word	0x08009b4c
 80018fc:	08009b58 	.word	0x08009b58
 8001900:	08009b64 	.word	0x08009b64
 8001904:	08009b70 	.word	0x08009b70
 8001908:	08009b74 	.word	0x08009b74
 800190c:	08009b7c 	.word	0x08009b7c
 8001910:	08009b84 	.word	0x08009b84

08001914 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001918:	4b0e      	ldr	r3, [pc, #56]	; (8001954 <HAL_Init+0x40>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a0d      	ldr	r2, [pc, #52]	; (8001954 <HAL_Init+0x40>)
 800191e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001922:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001924:	4b0b      	ldr	r3, [pc, #44]	; (8001954 <HAL_Init+0x40>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a0a      	ldr	r2, [pc, #40]	; (8001954 <HAL_Init+0x40>)
 800192a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800192e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001930:	4b08      	ldr	r3, [pc, #32]	; (8001954 <HAL_Init+0x40>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a07      	ldr	r2, [pc, #28]	; (8001954 <HAL_Init+0x40>)
 8001936:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800193a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800193c:	2003      	movs	r0, #3
 800193e:	f000 fbb1 	bl	80020a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001942:	2000      	movs	r0, #0
 8001944:	f000 f808 	bl	8001958 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001948:	f7ff f8a2 	bl	8000a90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800194c:	2300      	movs	r3, #0
}
 800194e:	4618      	mov	r0, r3
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	40023c00 	.word	0x40023c00

08001958 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001960:	4b12      	ldr	r3, [pc, #72]	; (80019ac <HAL_InitTick+0x54>)
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	4b12      	ldr	r3, [pc, #72]	; (80019b0 <HAL_InitTick+0x58>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	4619      	mov	r1, r3
 800196a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800196e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001972:	fbb2 f3f3 	udiv	r3, r2, r3
 8001976:	4618      	mov	r0, r3
 8001978:	f000 fbc9 	bl	800210e <HAL_SYSTICK_Config>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e00e      	b.n	80019a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2b0f      	cmp	r3, #15
 800198a:	d80a      	bhi.n	80019a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800198c:	2200      	movs	r2, #0
 800198e:	6879      	ldr	r1, [r7, #4]
 8001990:	f04f 30ff 	mov.w	r0, #4294967295
 8001994:	f000 fb91 	bl	80020ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001998:	4a06      	ldr	r2, [pc, #24]	; (80019b4 <HAL_InitTick+0x5c>)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800199e:	2300      	movs	r3, #0
 80019a0:	e000      	b.n	80019a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3708      	adds	r7, #8
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	20000000 	.word	0x20000000
 80019b0:	20000008 	.word	0x20000008
 80019b4:	20000004 	.word	0x20000004

080019b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019bc:	4b06      	ldr	r3, [pc, #24]	; (80019d8 <HAL_IncTick+0x20>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	461a      	mov	r2, r3
 80019c2:	4b06      	ldr	r3, [pc, #24]	; (80019dc <HAL_IncTick+0x24>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4413      	add	r3, r2
 80019c8:	4a04      	ldr	r2, [pc, #16]	; (80019dc <HAL_IncTick+0x24>)
 80019ca:	6013      	str	r3, [r2, #0]
}
 80019cc:	bf00      	nop
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	20000008 	.word	0x20000008
 80019dc:	200003b4 	.word	0x200003b4

080019e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  return uwTick;
 80019e4:	4b03      	ldr	r3, [pc, #12]	; (80019f4 <HAL_GetTick+0x14>)
 80019e6:	681b      	ldr	r3, [r3, #0]
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	200003b4 	.word	0x200003b4

080019f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a00:	f7ff ffee 	bl	80019e0 <HAL_GetTick>
 8001a04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a10:	d005      	beq.n	8001a1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a12:	4b0a      	ldr	r3, [pc, #40]	; (8001a3c <HAL_Delay+0x44>)
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	461a      	mov	r2, r3
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a1e:	bf00      	nop
 8001a20:	f7ff ffde 	bl	80019e0 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	68fa      	ldr	r2, [r7, #12]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d8f7      	bhi.n	8001a20 <HAL_Delay+0x28>
  {
  }
}
 8001a30:	bf00      	nop
 8001a32:	bf00      	nop
 8001a34:	3710      	adds	r7, #16
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20000008 	.word	0x20000008

08001a40 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d101      	bne.n	8001a56 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e033      	b.n	8001abe <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d109      	bne.n	8001a72 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f7ff f83e 	bl	8000ae0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2200      	movs	r2, #0
 8001a68:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a76:	f003 0310 	and.w	r3, r3, #16
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d118      	bne.n	8001ab0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a82:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a86:	f023 0302 	bic.w	r3, r3, #2
 8001a8a:	f043 0202 	orr.w	r2, r3, #2
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f000 f93a 	bl	8001d0c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa2:	f023 0303 	bic.w	r3, r3, #3
 8001aa6:	f043 0201 	orr.w	r2, r3, #1
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	641a      	str	r2, [r3, #64]	; 0x40
 8001aae:	e001      	b.n	8001ab4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3710      	adds	r7, #16
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
	...

08001ac8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b085      	sub	sp, #20
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d101      	bne.n	8001ae4 <HAL_ADC_ConfigChannel+0x1c>
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	e105      	b.n	8001cf0 <HAL_ADC_ConfigChannel+0x228>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2b09      	cmp	r3, #9
 8001af2:	d925      	bls.n	8001b40 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	68d9      	ldr	r1, [r3, #12]
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	461a      	mov	r2, r3
 8001b02:	4613      	mov	r3, r2
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	4413      	add	r3, r2
 8001b08:	3b1e      	subs	r3, #30
 8001b0a:	2207      	movs	r2, #7
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	43da      	mvns	r2, r3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	400a      	ands	r2, r1
 8001b18:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	68d9      	ldr	r1, [r3, #12]
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	689a      	ldr	r2, [r3, #8]
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	4403      	add	r3, r0
 8001b32:	3b1e      	subs	r3, #30
 8001b34:	409a      	lsls	r2, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	430a      	orrs	r2, r1
 8001b3c:	60da      	str	r2, [r3, #12]
 8001b3e:	e022      	b.n	8001b86 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	6919      	ldr	r1, [r3, #16]
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	4613      	mov	r3, r2
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	4413      	add	r3, r2
 8001b54:	2207      	movs	r2, #7
 8001b56:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5a:	43da      	mvns	r2, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	400a      	ands	r2, r1
 8001b62:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	6919      	ldr	r1, [r3, #16]
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	689a      	ldr	r2, [r3, #8]
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	4618      	mov	r0, r3
 8001b76:	4603      	mov	r3, r0
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	4403      	add	r3, r0
 8001b7c:	409a      	lsls	r2, r3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	430a      	orrs	r2, r1
 8001b84:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	2b06      	cmp	r3, #6
 8001b8c:	d824      	bhi.n	8001bd8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685a      	ldr	r2, [r3, #4]
 8001b98:	4613      	mov	r3, r2
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	4413      	add	r3, r2
 8001b9e:	3b05      	subs	r3, #5
 8001ba0:	221f      	movs	r2, #31
 8001ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba6:	43da      	mvns	r2, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	400a      	ands	r2, r1
 8001bae:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	685a      	ldr	r2, [r3, #4]
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	4413      	add	r3, r2
 8001bc8:	3b05      	subs	r3, #5
 8001bca:	fa00 f203 	lsl.w	r2, r0, r3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	430a      	orrs	r2, r1
 8001bd4:	635a      	str	r2, [r3, #52]	; 0x34
 8001bd6:	e04c      	b.n	8001c72 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	2b0c      	cmp	r3, #12
 8001bde:	d824      	bhi.n	8001c2a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685a      	ldr	r2, [r3, #4]
 8001bea:	4613      	mov	r3, r2
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	4413      	add	r3, r2
 8001bf0:	3b23      	subs	r3, #35	; 0x23
 8001bf2:	221f      	movs	r2, #31
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	43da      	mvns	r2, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	400a      	ands	r2, r1
 8001c00:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	4618      	mov	r0, r3
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685a      	ldr	r2, [r3, #4]
 8001c14:	4613      	mov	r3, r2
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	4413      	add	r3, r2
 8001c1a:	3b23      	subs	r3, #35	; 0x23
 8001c1c:	fa00 f203 	lsl.w	r2, r0, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	430a      	orrs	r2, r1
 8001c26:	631a      	str	r2, [r3, #48]	; 0x30
 8001c28:	e023      	b.n	8001c72 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685a      	ldr	r2, [r3, #4]
 8001c34:	4613      	mov	r3, r2
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	4413      	add	r3, r2
 8001c3a:	3b41      	subs	r3, #65	; 0x41
 8001c3c:	221f      	movs	r2, #31
 8001c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c42:	43da      	mvns	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	400a      	ands	r2, r1
 8001c4a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	4618      	mov	r0, r3
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685a      	ldr	r2, [r3, #4]
 8001c5e:	4613      	mov	r3, r2
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	4413      	add	r3, r2
 8001c64:	3b41      	subs	r3, #65	; 0x41
 8001c66:	fa00 f203 	lsl.w	r2, r0, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c72:	4b22      	ldr	r3, [pc, #136]	; (8001cfc <HAL_ADC_ConfigChannel+0x234>)
 8001c74:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a21      	ldr	r2, [pc, #132]	; (8001d00 <HAL_ADC_ConfigChannel+0x238>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d109      	bne.n	8001c94 <HAL_ADC_ConfigChannel+0x1cc>
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2b12      	cmp	r3, #18
 8001c86:	d105      	bne.n	8001c94 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a19      	ldr	r2, [pc, #100]	; (8001d00 <HAL_ADC_ConfigChannel+0x238>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d123      	bne.n	8001ce6 <HAL_ADC_ConfigChannel+0x21e>
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	2b10      	cmp	r3, #16
 8001ca4:	d003      	beq.n	8001cae <HAL_ADC_ConfigChannel+0x1e6>
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2b11      	cmp	r3, #17
 8001cac:	d11b      	bne.n	8001ce6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2b10      	cmp	r3, #16
 8001cc0:	d111      	bne.n	8001ce6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001cc2:	4b10      	ldr	r3, [pc, #64]	; (8001d04 <HAL_ADC_ConfigChannel+0x23c>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a10      	ldr	r2, [pc, #64]	; (8001d08 <HAL_ADC_ConfigChannel+0x240>)
 8001cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8001ccc:	0c9a      	lsrs	r2, r3, #18
 8001cce:	4613      	mov	r3, r2
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	4413      	add	r3, r2
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001cd8:	e002      	b.n	8001ce0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	3b01      	subs	r3, #1
 8001cde:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d1f9      	bne.n	8001cda <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001cee:	2300      	movs	r3, #0
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3714      	adds	r7, #20
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr
 8001cfc:	40012300 	.word	0x40012300
 8001d00:	40012000 	.word	0x40012000
 8001d04:	20000000 	.word	0x20000000
 8001d08:	431bde83 	.word	0x431bde83

08001d0c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b085      	sub	sp, #20
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d14:	4b79      	ldr	r3, [pc, #484]	; (8001efc <ADC_Init+0x1f0>)
 8001d16:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	685a      	ldr	r2, [r3, #4]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	431a      	orrs	r2, r3
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	685a      	ldr	r2, [r3, #4]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d40:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	6859      	ldr	r1, [r3, #4]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	691b      	ldr	r3, [r3, #16]
 8001d4c:	021a      	lsls	r2, r3, #8
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	430a      	orrs	r2, r1
 8001d54:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	685a      	ldr	r2, [r3, #4]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001d64:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	6859      	ldr	r1, [r3, #4]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	689a      	ldr	r2, [r3, #8]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	430a      	orrs	r2, r1
 8001d76:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	689a      	ldr	r2, [r3, #8]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d86:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	6899      	ldr	r1, [r3, #8]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	68da      	ldr	r2, [r3, #12]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	430a      	orrs	r2, r1
 8001d98:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d9e:	4a58      	ldr	r2, [pc, #352]	; (8001f00 <ADC_Init+0x1f4>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d022      	beq.n	8001dea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	689a      	ldr	r2, [r3, #8]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001db2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	6899      	ldr	r1, [r3, #8]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	430a      	orrs	r2, r1
 8001dc4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	689a      	ldr	r2, [r3, #8]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001dd4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	6899      	ldr	r1, [r3, #8]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	430a      	orrs	r2, r1
 8001de6:	609a      	str	r2, [r3, #8]
 8001de8:	e00f      	b.n	8001e0a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	689a      	ldr	r2, [r3, #8]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001df8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	689a      	ldr	r2, [r3, #8]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e08:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	689a      	ldr	r2, [r3, #8]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f022 0202 	bic.w	r2, r2, #2
 8001e18:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	6899      	ldr	r1, [r3, #8]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	7e1b      	ldrb	r3, [r3, #24]
 8001e24:	005a      	lsls	r2, r3, #1
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d01b      	beq.n	8001e70 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	685a      	ldr	r2, [r3, #4]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e46:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	685a      	ldr	r2, [r3, #4]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001e56:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	6859      	ldr	r1, [r3, #4]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e62:	3b01      	subs	r3, #1
 8001e64:	035a      	lsls	r2, r3, #13
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	605a      	str	r2, [r3, #4]
 8001e6e:	e007      	b.n	8001e80 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	685a      	ldr	r2, [r3, #4]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e7e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001e8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	69db      	ldr	r3, [r3, #28]
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	051a      	lsls	r2, r3, #20
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	689a      	ldr	r2, [r3, #8]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001eb4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	6899      	ldr	r1, [r3, #8]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ec2:	025a      	lsls	r2, r3, #9
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	430a      	orrs	r2, r1
 8001eca:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	689a      	ldr	r2, [r3, #8]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001eda:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	6899      	ldr	r1, [r3, #8]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	695b      	ldr	r3, [r3, #20]
 8001ee6:	029a      	lsls	r2, r3, #10
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	430a      	orrs	r2, r1
 8001eee:	609a      	str	r2, [r3, #8]
}
 8001ef0:	bf00      	nop
 8001ef2:	3714      	adds	r7, #20
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr
 8001efc:	40012300 	.word	0x40012300
 8001f00:	0f000001 	.word	0x0f000001

08001f04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b085      	sub	sp, #20
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f003 0307 	and.w	r3, r3, #7
 8001f12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f14:	4b0c      	ldr	r3, [pc, #48]	; (8001f48 <__NVIC_SetPriorityGrouping+0x44>)
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f1a:	68ba      	ldr	r2, [r7, #8]
 8001f1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f20:	4013      	ands	r3, r2
 8001f22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f36:	4a04      	ldr	r2, [pc, #16]	; (8001f48 <__NVIC_SetPriorityGrouping+0x44>)
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	60d3      	str	r3, [r2, #12]
}
 8001f3c:	bf00      	nop
 8001f3e:	3714      	adds	r7, #20
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr
 8001f48:	e000ed00 	.word	0xe000ed00

08001f4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f50:	4b04      	ldr	r3, [pc, #16]	; (8001f64 <__NVIC_GetPriorityGrouping+0x18>)
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	0a1b      	lsrs	r3, r3, #8
 8001f56:	f003 0307 	and.w	r3, r3, #7
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr
 8001f64:	e000ed00 	.word	0xe000ed00

08001f68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	4603      	mov	r3, r0
 8001f70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	db0b      	blt.n	8001f92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f7a:	79fb      	ldrb	r3, [r7, #7]
 8001f7c:	f003 021f 	and.w	r2, r3, #31
 8001f80:	4907      	ldr	r1, [pc, #28]	; (8001fa0 <__NVIC_EnableIRQ+0x38>)
 8001f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f86:	095b      	lsrs	r3, r3, #5
 8001f88:	2001      	movs	r0, #1
 8001f8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f92:	bf00      	nop
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	e000e100 	.word	0xe000e100

08001fa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	4603      	mov	r3, r0
 8001fac:	6039      	str	r1, [r7, #0]
 8001fae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	db0a      	blt.n	8001fce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	b2da      	uxtb	r2, r3
 8001fbc:	490c      	ldr	r1, [pc, #48]	; (8001ff0 <__NVIC_SetPriority+0x4c>)
 8001fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc2:	0112      	lsls	r2, r2, #4
 8001fc4:	b2d2      	uxtb	r2, r2
 8001fc6:	440b      	add	r3, r1
 8001fc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fcc:	e00a      	b.n	8001fe4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	b2da      	uxtb	r2, r3
 8001fd2:	4908      	ldr	r1, [pc, #32]	; (8001ff4 <__NVIC_SetPriority+0x50>)
 8001fd4:	79fb      	ldrb	r3, [r7, #7]
 8001fd6:	f003 030f 	and.w	r3, r3, #15
 8001fda:	3b04      	subs	r3, #4
 8001fdc:	0112      	lsls	r2, r2, #4
 8001fde:	b2d2      	uxtb	r2, r2
 8001fe0:	440b      	add	r3, r1
 8001fe2:	761a      	strb	r2, [r3, #24]
}
 8001fe4:	bf00      	nop
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr
 8001ff0:	e000e100 	.word	0xe000e100
 8001ff4:	e000ed00 	.word	0xe000ed00

08001ff8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b089      	sub	sp, #36	; 0x24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f003 0307 	and.w	r3, r3, #7
 800200a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	f1c3 0307 	rsb	r3, r3, #7
 8002012:	2b04      	cmp	r3, #4
 8002014:	bf28      	it	cs
 8002016:	2304      	movcs	r3, #4
 8002018:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	3304      	adds	r3, #4
 800201e:	2b06      	cmp	r3, #6
 8002020:	d902      	bls.n	8002028 <NVIC_EncodePriority+0x30>
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	3b03      	subs	r3, #3
 8002026:	e000      	b.n	800202a <NVIC_EncodePriority+0x32>
 8002028:	2300      	movs	r3, #0
 800202a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800202c:	f04f 32ff 	mov.w	r2, #4294967295
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	43da      	mvns	r2, r3
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	401a      	ands	r2, r3
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002040:	f04f 31ff 	mov.w	r1, #4294967295
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	fa01 f303 	lsl.w	r3, r1, r3
 800204a:	43d9      	mvns	r1, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002050:	4313      	orrs	r3, r2
         );
}
 8002052:	4618      	mov	r0, r3
 8002054:	3724      	adds	r7, #36	; 0x24
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
	...

08002060 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	3b01      	subs	r3, #1
 800206c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002070:	d301      	bcc.n	8002076 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002072:	2301      	movs	r3, #1
 8002074:	e00f      	b.n	8002096 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002076:	4a0a      	ldr	r2, [pc, #40]	; (80020a0 <SysTick_Config+0x40>)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	3b01      	subs	r3, #1
 800207c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800207e:	210f      	movs	r1, #15
 8002080:	f04f 30ff 	mov.w	r0, #4294967295
 8002084:	f7ff ff8e 	bl	8001fa4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002088:	4b05      	ldr	r3, [pc, #20]	; (80020a0 <SysTick_Config+0x40>)
 800208a:	2200      	movs	r2, #0
 800208c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800208e:	4b04      	ldr	r3, [pc, #16]	; (80020a0 <SysTick_Config+0x40>)
 8002090:	2207      	movs	r2, #7
 8002092:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002094:	2300      	movs	r3, #0
}
 8002096:	4618      	mov	r0, r3
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	e000e010 	.word	0xe000e010

080020a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f7ff ff29 	bl	8001f04 <__NVIC_SetPriorityGrouping>
}
 80020b2:	bf00      	nop
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}

080020ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020ba:	b580      	push	{r7, lr}
 80020bc:	b086      	sub	sp, #24
 80020be:	af00      	add	r7, sp, #0
 80020c0:	4603      	mov	r3, r0
 80020c2:	60b9      	str	r1, [r7, #8]
 80020c4:	607a      	str	r2, [r7, #4]
 80020c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020c8:	2300      	movs	r3, #0
 80020ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020cc:	f7ff ff3e 	bl	8001f4c <__NVIC_GetPriorityGrouping>
 80020d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	68b9      	ldr	r1, [r7, #8]
 80020d6:	6978      	ldr	r0, [r7, #20]
 80020d8:	f7ff ff8e 	bl	8001ff8 <NVIC_EncodePriority>
 80020dc:	4602      	mov	r2, r0
 80020de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020e2:	4611      	mov	r1, r2
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7ff ff5d 	bl	8001fa4 <__NVIC_SetPriority>
}
 80020ea:	bf00      	nop
 80020ec:	3718      	adds	r7, #24
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b082      	sub	sp, #8
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	4603      	mov	r3, r0
 80020fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002100:	4618      	mov	r0, r3
 8002102:	f7ff ff31 	bl	8001f68 <__NVIC_EnableIRQ>
}
 8002106:	bf00      	nop
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}

0800210e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800210e:	b580      	push	{r7, lr}
 8002110:	b082      	sub	sp, #8
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f7ff ffa2 	bl	8002060 <SysTick_Config>
 800211c:	4603      	mov	r3, r0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
	...

08002128 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b086      	sub	sp, #24
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002130:	2300      	movs	r3, #0
 8002132:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002134:	f7ff fc54 	bl	80019e0 <HAL_GetTick>
 8002138:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d101      	bne.n	8002144 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e099      	b.n	8002278 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2202      	movs	r2, #2
 8002148:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f022 0201 	bic.w	r2, r2, #1
 8002162:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002164:	e00f      	b.n	8002186 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002166:	f7ff fc3b 	bl	80019e0 <HAL_GetTick>
 800216a:	4602      	mov	r2, r0
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	2b05      	cmp	r3, #5
 8002172:	d908      	bls.n	8002186 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2220      	movs	r2, #32
 8002178:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2203      	movs	r2, #3
 800217e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e078      	b.n	8002278 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0301 	and.w	r3, r3, #1
 8002190:	2b00      	cmp	r3, #0
 8002192:	d1e8      	bne.n	8002166 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800219c:	697a      	ldr	r2, [r7, #20]
 800219e:	4b38      	ldr	r3, [pc, #224]	; (8002280 <HAL_DMA_Init+0x158>)
 80021a0:	4013      	ands	r3, r2
 80021a2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685a      	ldr	r2, [r3, #4]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	691b      	ldr	r3, [r3, #16]
 80021b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	699b      	ldr	r3, [r3, #24]
 80021c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6a1b      	ldr	r3, [r3, #32]
 80021d0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021d2:	697a      	ldr	r2, [r7, #20]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021dc:	2b04      	cmp	r3, #4
 80021de:	d107      	bne.n	80021f0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e8:	4313      	orrs	r3, r2
 80021ea:	697a      	ldr	r2, [r7, #20]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	697a      	ldr	r2, [r7, #20]
 80021f6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	695b      	ldr	r3, [r3, #20]
 80021fe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	f023 0307 	bic.w	r3, r3, #7
 8002206:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220c:	697a      	ldr	r2, [r7, #20]
 800220e:	4313      	orrs	r3, r2
 8002210:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002216:	2b04      	cmp	r3, #4
 8002218:	d117      	bne.n	800224a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800221e:	697a      	ldr	r2, [r7, #20]
 8002220:	4313      	orrs	r3, r2
 8002222:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002228:	2b00      	cmp	r3, #0
 800222a:	d00e      	beq.n	800224a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f000 f9e9 	bl	8002604 <DMA_CheckFifoParam>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d008      	beq.n	800224a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2240      	movs	r2, #64	; 0x40
 800223c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2201      	movs	r2, #1
 8002242:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002246:	2301      	movs	r3, #1
 8002248:	e016      	b.n	8002278 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	697a      	ldr	r2, [r7, #20]
 8002250:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f000 f9a0 	bl	8002598 <DMA_CalcBaseAndBitshift>
 8002258:	4603      	mov	r3, r0
 800225a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002260:	223f      	movs	r2, #63	; 0x3f
 8002262:	409a      	lsls	r2, r3
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2200      	movs	r2, #0
 800226c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2201      	movs	r2, #1
 8002272:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002276:	2300      	movs	r3, #0
}
 8002278:	4618      	mov	r0, r3
 800227a:	3718      	adds	r7, #24
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	f010803f 	.word	0xf010803f

08002284 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b086      	sub	sp, #24
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800228c:	2300      	movs	r3, #0
 800228e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002290:	4b8e      	ldr	r3, [pc, #568]	; (80024cc <HAL_DMA_IRQHandler+0x248>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a8e      	ldr	r2, [pc, #568]	; (80024d0 <HAL_DMA_IRQHandler+0x24c>)
 8002296:	fba2 2303 	umull	r2, r3, r2, r3
 800229a:	0a9b      	lsrs	r3, r3, #10
 800229c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ae:	2208      	movs	r2, #8
 80022b0:	409a      	lsls	r2, r3
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	4013      	ands	r3, r2
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d01a      	beq.n	80022f0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0304 	and.w	r3, r3, #4
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d013      	beq.n	80022f0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f022 0204 	bic.w	r2, r2, #4
 80022d6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022dc:	2208      	movs	r2, #8
 80022de:	409a      	lsls	r2, r3
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022e8:	f043 0201 	orr.w	r2, r3, #1
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022f4:	2201      	movs	r2, #1
 80022f6:	409a      	lsls	r2, r3
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	4013      	ands	r3, r2
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d012      	beq.n	8002326 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	695b      	ldr	r3, [r3, #20]
 8002306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800230a:	2b00      	cmp	r3, #0
 800230c:	d00b      	beq.n	8002326 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002312:	2201      	movs	r2, #1
 8002314:	409a      	lsls	r2, r3
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800231e:	f043 0202 	orr.w	r2, r3, #2
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800232a:	2204      	movs	r2, #4
 800232c:	409a      	lsls	r2, r3
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	4013      	ands	r3, r2
 8002332:	2b00      	cmp	r3, #0
 8002334:	d012      	beq.n	800235c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0302 	and.w	r3, r3, #2
 8002340:	2b00      	cmp	r3, #0
 8002342:	d00b      	beq.n	800235c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002348:	2204      	movs	r2, #4
 800234a:	409a      	lsls	r2, r3
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002354:	f043 0204 	orr.w	r2, r3, #4
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002360:	2210      	movs	r2, #16
 8002362:	409a      	lsls	r2, r3
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	4013      	ands	r3, r2
 8002368:	2b00      	cmp	r3, #0
 800236a:	d043      	beq.n	80023f4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0308 	and.w	r3, r3, #8
 8002376:	2b00      	cmp	r3, #0
 8002378:	d03c      	beq.n	80023f4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800237e:	2210      	movs	r2, #16
 8002380:	409a      	lsls	r2, r3
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d018      	beq.n	80023c6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d108      	bne.n	80023b4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d024      	beq.n	80023f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	4798      	blx	r3
 80023b2:	e01f      	b.n	80023f4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d01b      	beq.n	80023f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	4798      	blx	r3
 80023c4:	e016      	b.n	80023f4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d107      	bne.n	80023e4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f022 0208 	bic.w	r2, r2, #8
 80023e2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d003      	beq.n	80023f4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023f8:	2220      	movs	r2, #32
 80023fa:	409a      	lsls	r2, r3
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	4013      	ands	r3, r2
 8002400:	2b00      	cmp	r3, #0
 8002402:	f000 808f 	beq.w	8002524 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0310 	and.w	r3, r3, #16
 8002410:	2b00      	cmp	r3, #0
 8002412:	f000 8087 	beq.w	8002524 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800241a:	2220      	movs	r2, #32
 800241c:	409a      	lsls	r2, r3
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002428:	b2db      	uxtb	r3, r3
 800242a:	2b05      	cmp	r3, #5
 800242c:	d136      	bne.n	800249c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f022 0216 	bic.w	r2, r2, #22
 800243c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	695a      	ldr	r2, [r3, #20]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800244c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002452:	2b00      	cmp	r3, #0
 8002454:	d103      	bne.n	800245e <HAL_DMA_IRQHandler+0x1da>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800245a:	2b00      	cmp	r3, #0
 800245c:	d007      	beq.n	800246e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f022 0208 	bic.w	r2, r2, #8
 800246c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002472:	223f      	movs	r2, #63	; 0x3f
 8002474:	409a      	lsls	r2, r3
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2201      	movs	r2, #1
 800247e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800248e:	2b00      	cmp	r3, #0
 8002490:	d07e      	beq.n	8002590 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	4798      	blx	r3
        }
        return;
 800249a:	e079      	b.n	8002590 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d01d      	beq.n	80024e6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d10d      	bne.n	80024d4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d031      	beq.n	8002524 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	4798      	blx	r3
 80024c8:	e02c      	b.n	8002524 <HAL_DMA_IRQHandler+0x2a0>
 80024ca:	bf00      	nop
 80024cc:	20000000 	.word	0x20000000
 80024d0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d023      	beq.n	8002524 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	4798      	blx	r3
 80024e4:	e01e      	b.n	8002524 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d10f      	bne.n	8002514 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f022 0210 	bic.w	r2, r2, #16
 8002502:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2201      	movs	r2, #1
 8002508:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002518:	2b00      	cmp	r3, #0
 800251a:	d003      	beq.n	8002524 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002528:	2b00      	cmp	r3, #0
 800252a:	d032      	beq.n	8002592 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002530:	f003 0301 	and.w	r3, r3, #1
 8002534:	2b00      	cmp	r3, #0
 8002536:	d022      	beq.n	800257e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2205      	movs	r2, #5
 800253c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f022 0201 	bic.w	r2, r2, #1
 800254e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	3301      	adds	r3, #1
 8002554:	60bb      	str	r3, [r7, #8]
 8002556:	697a      	ldr	r2, [r7, #20]
 8002558:	429a      	cmp	r2, r3
 800255a:	d307      	bcc.n	800256c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	2b00      	cmp	r3, #0
 8002568:	d1f2      	bne.n	8002550 <HAL_DMA_IRQHandler+0x2cc>
 800256a:	e000      	b.n	800256e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800256c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2201      	movs	r2, #1
 8002572:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002582:	2b00      	cmp	r3, #0
 8002584:	d005      	beq.n	8002592 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	4798      	blx	r3
 800258e:	e000      	b.n	8002592 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002590:	bf00      	nop
    }
  }
}
 8002592:	3718      	adds	r7, #24
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}

08002598 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002598:	b480      	push	{r7}
 800259a:	b085      	sub	sp, #20
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	3b10      	subs	r3, #16
 80025a8:	4a14      	ldr	r2, [pc, #80]	; (80025fc <DMA_CalcBaseAndBitshift+0x64>)
 80025aa:	fba2 2303 	umull	r2, r3, r2, r3
 80025ae:	091b      	lsrs	r3, r3, #4
 80025b0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80025b2:	4a13      	ldr	r2, [pc, #76]	; (8002600 <DMA_CalcBaseAndBitshift+0x68>)
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	4413      	add	r3, r2
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	461a      	mov	r2, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2b03      	cmp	r3, #3
 80025c4:	d909      	bls.n	80025da <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80025ce:	f023 0303 	bic.w	r3, r3, #3
 80025d2:	1d1a      	adds	r2, r3, #4
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	659a      	str	r2, [r3, #88]	; 0x58
 80025d8:	e007      	b.n	80025ea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80025e2:	f023 0303 	bic.w	r3, r3, #3
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3714      	adds	r7, #20
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	aaaaaaab 	.word	0xaaaaaaab
 8002600:	08009c30 	.word	0x08009c30

08002604 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002604:	b480      	push	{r7}
 8002606:	b085      	sub	sp, #20
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800260c:	2300      	movs	r3, #0
 800260e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002614:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d11f      	bne.n	800265e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	2b03      	cmp	r3, #3
 8002622:	d856      	bhi.n	80026d2 <DMA_CheckFifoParam+0xce>
 8002624:	a201      	add	r2, pc, #4	; (adr r2, 800262c <DMA_CheckFifoParam+0x28>)
 8002626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800262a:	bf00      	nop
 800262c:	0800263d 	.word	0x0800263d
 8002630:	0800264f 	.word	0x0800264f
 8002634:	0800263d 	.word	0x0800263d
 8002638:	080026d3 	.word	0x080026d3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002640:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d046      	beq.n	80026d6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800264c:	e043      	b.n	80026d6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002652:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002656:	d140      	bne.n	80026da <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800265c:	e03d      	b.n	80026da <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	699b      	ldr	r3, [r3, #24]
 8002662:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002666:	d121      	bne.n	80026ac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	2b03      	cmp	r3, #3
 800266c:	d837      	bhi.n	80026de <DMA_CheckFifoParam+0xda>
 800266e:	a201      	add	r2, pc, #4	; (adr r2, 8002674 <DMA_CheckFifoParam+0x70>)
 8002670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002674:	08002685 	.word	0x08002685
 8002678:	0800268b 	.word	0x0800268b
 800267c:	08002685 	.word	0x08002685
 8002680:	0800269d 	.word	0x0800269d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	73fb      	strb	r3, [r7, #15]
      break;
 8002688:	e030      	b.n	80026ec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800268e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d025      	beq.n	80026e2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800269a:	e022      	b.n	80026e2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80026a4:	d11f      	bne.n	80026e6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80026aa:	e01c      	b.n	80026e6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d903      	bls.n	80026ba <DMA_CheckFifoParam+0xb6>
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	2b03      	cmp	r3, #3
 80026b6:	d003      	beq.n	80026c0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80026b8:	e018      	b.n	80026ec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	73fb      	strb	r3, [r7, #15]
      break;
 80026be:	e015      	b.n	80026ec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d00e      	beq.n	80026ea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	73fb      	strb	r3, [r7, #15]
      break;
 80026d0:	e00b      	b.n	80026ea <DMA_CheckFifoParam+0xe6>
      break;
 80026d2:	bf00      	nop
 80026d4:	e00a      	b.n	80026ec <DMA_CheckFifoParam+0xe8>
      break;
 80026d6:	bf00      	nop
 80026d8:	e008      	b.n	80026ec <DMA_CheckFifoParam+0xe8>
      break;
 80026da:	bf00      	nop
 80026dc:	e006      	b.n	80026ec <DMA_CheckFifoParam+0xe8>
      break;
 80026de:	bf00      	nop
 80026e0:	e004      	b.n	80026ec <DMA_CheckFifoParam+0xe8>
      break;
 80026e2:	bf00      	nop
 80026e4:	e002      	b.n	80026ec <DMA_CheckFifoParam+0xe8>
      break;   
 80026e6:	bf00      	nop
 80026e8:	e000      	b.n	80026ec <DMA_CheckFifoParam+0xe8>
      break;
 80026ea:	bf00      	nop
    }
  } 
  
  return status; 
 80026ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3714      	adds	r7, #20
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop

080026fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b089      	sub	sp, #36	; 0x24
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002706:	2300      	movs	r3, #0
 8002708:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800270a:	2300      	movs	r3, #0
 800270c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800270e:	2300      	movs	r3, #0
 8002710:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002712:	2300      	movs	r3, #0
 8002714:	61fb      	str	r3, [r7, #28]
 8002716:	e16b      	b.n	80029f0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002718:	2201      	movs	r2, #1
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	fa02 f303 	lsl.w	r3, r2, r3
 8002720:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	697a      	ldr	r2, [r7, #20]
 8002728:	4013      	ands	r3, r2
 800272a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800272c:	693a      	ldr	r2, [r7, #16]
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	429a      	cmp	r2, r3
 8002732:	f040 815a 	bne.w	80029ea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f003 0303 	and.w	r3, r3, #3
 800273e:	2b01      	cmp	r3, #1
 8002740:	d005      	beq.n	800274e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800274a:	2b02      	cmp	r3, #2
 800274c:	d130      	bne.n	80027b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	005b      	lsls	r3, r3, #1
 8002758:	2203      	movs	r2, #3
 800275a:	fa02 f303 	lsl.w	r3, r2, r3
 800275e:	43db      	mvns	r3, r3
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	4013      	ands	r3, r2
 8002764:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	68da      	ldr	r2, [r3, #12]
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	005b      	lsls	r3, r3, #1
 800276e:	fa02 f303 	lsl.w	r3, r2, r3
 8002772:	69ba      	ldr	r2, [r7, #24]
 8002774:	4313      	orrs	r3, r2
 8002776:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	69ba      	ldr	r2, [r7, #24]
 800277c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002784:	2201      	movs	r2, #1
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	43db      	mvns	r3, r3
 800278e:	69ba      	ldr	r2, [r7, #24]
 8002790:	4013      	ands	r3, r2
 8002792:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	091b      	lsrs	r3, r3, #4
 800279a:	f003 0201 	and.w	r2, r3, #1
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	fa02 f303 	lsl.w	r3, r2, r3
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f003 0303 	and.w	r3, r3, #3
 80027b8:	2b03      	cmp	r3, #3
 80027ba:	d017      	beq.n	80027ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	2203      	movs	r2, #3
 80027c8:	fa02 f303 	lsl.w	r3, r2, r3
 80027cc:	43db      	mvns	r3, r3
 80027ce:	69ba      	ldr	r2, [r7, #24]
 80027d0:	4013      	ands	r3, r2
 80027d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	689a      	ldr	r2, [r3, #8]
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	005b      	lsls	r3, r3, #1
 80027dc:	fa02 f303 	lsl.w	r3, r2, r3
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	69ba      	ldr	r2, [r7, #24]
 80027ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f003 0303 	and.w	r3, r3, #3
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d123      	bne.n	8002840 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	08da      	lsrs	r2, r3, #3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	3208      	adds	r2, #8
 8002800:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002804:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	f003 0307 	and.w	r3, r3, #7
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	220f      	movs	r2, #15
 8002810:	fa02 f303 	lsl.w	r3, r2, r3
 8002814:	43db      	mvns	r3, r3
 8002816:	69ba      	ldr	r2, [r7, #24]
 8002818:	4013      	ands	r3, r2
 800281a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	691a      	ldr	r2, [r3, #16]
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	f003 0307 	and.w	r3, r3, #7
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	fa02 f303 	lsl.w	r3, r2, r3
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	4313      	orrs	r3, r2
 8002830:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	08da      	lsrs	r2, r3, #3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	3208      	adds	r2, #8
 800283a:	69b9      	ldr	r1, [r7, #24]
 800283c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	005b      	lsls	r3, r3, #1
 800284a:	2203      	movs	r2, #3
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	43db      	mvns	r3, r3
 8002852:	69ba      	ldr	r2, [r7, #24]
 8002854:	4013      	ands	r3, r2
 8002856:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f003 0203 	and.w	r2, r3, #3
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	005b      	lsls	r3, r3, #1
 8002864:	fa02 f303 	lsl.w	r3, r2, r3
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	4313      	orrs	r3, r2
 800286c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800287c:	2b00      	cmp	r3, #0
 800287e:	f000 80b4 	beq.w	80029ea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002882:	2300      	movs	r3, #0
 8002884:	60fb      	str	r3, [r7, #12]
 8002886:	4b60      	ldr	r3, [pc, #384]	; (8002a08 <HAL_GPIO_Init+0x30c>)
 8002888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800288a:	4a5f      	ldr	r2, [pc, #380]	; (8002a08 <HAL_GPIO_Init+0x30c>)
 800288c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002890:	6453      	str	r3, [r2, #68]	; 0x44
 8002892:	4b5d      	ldr	r3, [pc, #372]	; (8002a08 <HAL_GPIO_Init+0x30c>)
 8002894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002896:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800289a:	60fb      	str	r3, [r7, #12]
 800289c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800289e:	4a5b      	ldr	r2, [pc, #364]	; (8002a0c <HAL_GPIO_Init+0x310>)
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	089b      	lsrs	r3, r3, #2
 80028a4:	3302      	adds	r3, #2
 80028a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	f003 0303 	and.w	r3, r3, #3
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	220f      	movs	r2, #15
 80028b6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ba:	43db      	mvns	r3, r3
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	4013      	ands	r3, r2
 80028c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a52      	ldr	r2, [pc, #328]	; (8002a10 <HAL_GPIO_Init+0x314>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d02b      	beq.n	8002922 <HAL_GPIO_Init+0x226>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a51      	ldr	r2, [pc, #324]	; (8002a14 <HAL_GPIO_Init+0x318>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d025      	beq.n	800291e <HAL_GPIO_Init+0x222>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a50      	ldr	r2, [pc, #320]	; (8002a18 <HAL_GPIO_Init+0x31c>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d01f      	beq.n	800291a <HAL_GPIO_Init+0x21e>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a4f      	ldr	r2, [pc, #316]	; (8002a1c <HAL_GPIO_Init+0x320>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d019      	beq.n	8002916 <HAL_GPIO_Init+0x21a>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a4e      	ldr	r2, [pc, #312]	; (8002a20 <HAL_GPIO_Init+0x324>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d013      	beq.n	8002912 <HAL_GPIO_Init+0x216>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a4d      	ldr	r2, [pc, #308]	; (8002a24 <HAL_GPIO_Init+0x328>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d00d      	beq.n	800290e <HAL_GPIO_Init+0x212>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4a4c      	ldr	r2, [pc, #304]	; (8002a28 <HAL_GPIO_Init+0x32c>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d007      	beq.n	800290a <HAL_GPIO_Init+0x20e>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4a4b      	ldr	r2, [pc, #300]	; (8002a2c <HAL_GPIO_Init+0x330>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d101      	bne.n	8002906 <HAL_GPIO_Init+0x20a>
 8002902:	2307      	movs	r3, #7
 8002904:	e00e      	b.n	8002924 <HAL_GPIO_Init+0x228>
 8002906:	2308      	movs	r3, #8
 8002908:	e00c      	b.n	8002924 <HAL_GPIO_Init+0x228>
 800290a:	2306      	movs	r3, #6
 800290c:	e00a      	b.n	8002924 <HAL_GPIO_Init+0x228>
 800290e:	2305      	movs	r3, #5
 8002910:	e008      	b.n	8002924 <HAL_GPIO_Init+0x228>
 8002912:	2304      	movs	r3, #4
 8002914:	e006      	b.n	8002924 <HAL_GPIO_Init+0x228>
 8002916:	2303      	movs	r3, #3
 8002918:	e004      	b.n	8002924 <HAL_GPIO_Init+0x228>
 800291a:	2302      	movs	r3, #2
 800291c:	e002      	b.n	8002924 <HAL_GPIO_Init+0x228>
 800291e:	2301      	movs	r3, #1
 8002920:	e000      	b.n	8002924 <HAL_GPIO_Init+0x228>
 8002922:	2300      	movs	r3, #0
 8002924:	69fa      	ldr	r2, [r7, #28]
 8002926:	f002 0203 	and.w	r2, r2, #3
 800292a:	0092      	lsls	r2, r2, #2
 800292c:	4093      	lsls	r3, r2
 800292e:	69ba      	ldr	r2, [r7, #24]
 8002930:	4313      	orrs	r3, r2
 8002932:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002934:	4935      	ldr	r1, [pc, #212]	; (8002a0c <HAL_GPIO_Init+0x310>)
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	089b      	lsrs	r3, r3, #2
 800293a:	3302      	adds	r3, #2
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002942:	4b3b      	ldr	r3, [pc, #236]	; (8002a30 <HAL_GPIO_Init+0x334>)
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	43db      	mvns	r3, r3
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	4013      	ands	r3, r2
 8002950:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d003      	beq.n	8002966 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	4313      	orrs	r3, r2
 8002964:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002966:	4a32      	ldr	r2, [pc, #200]	; (8002a30 <HAL_GPIO_Init+0x334>)
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800296c:	4b30      	ldr	r3, [pc, #192]	; (8002a30 <HAL_GPIO_Init+0x334>)
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	43db      	mvns	r3, r3
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	4013      	ands	r3, r2
 800297a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d003      	beq.n	8002990 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	4313      	orrs	r3, r2
 800298e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002990:	4a27      	ldr	r2, [pc, #156]	; (8002a30 <HAL_GPIO_Init+0x334>)
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002996:	4b26      	ldr	r3, [pc, #152]	; (8002a30 <HAL_GPIO_Init+0x334>)
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	43db      	mvns	r3, r3
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	4013      	ands	r3, r2
 80029a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d003      	beq.n	80029ba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029ba:	4a1d      	ldr	r2, [pc, #116]	; (8002a30 <HAL_GPIO_Init+0x334>)
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029c0:	4b1b      	ldr	r3, [pc, #108]	; (8002a30 <HAL_GPIO_Init+0x334>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	43db      	mvns	r3, r3
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	4013      	ands	r3, r2
 80029ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d003      	beq.n	80029e4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029e4:	4a12      	ldr	r2, [pc, #72]	; (8002a30 <HAL_GPIO_Init+0x334>)
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	3301      	adds	r3, #1
 80029ee:	61fb      	str	r3, [r7, #28]
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	2b0f      	cmp	r3, #15
 80029f4:	f67f ae90 	bls.w	8002718 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029f8:	bf00      	nop
 80029fa:	bf00      	nop
 80029fc:	3724      	adds	r7, #36	; 0x24
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	40023800 	.word	0x40023800
 8002a0c:	40013800 	.word	0x40013800
 8002a10:	40020000 	.word	0x40020000
 8002a14:	40020400 	.word	0x40020400
 8002a18:	40020800 	.word	0x40020800
 8002a1c:	40020c00 	.word	0x40020c00
 8002a20:	40021000 	.word	0x40021000
 8002a24:	40021400 	.word	0x40021400
 8002a28:	40021800 	.word	0x40021800
 8002a2c:	40021c00 	.word	0x40021c00
 8002a30:	40013c00 	.word	0x40013c00

08002a34 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a36:	b08f      	sub	sp, #60	; 0x3c
 8002a38:	af0a      	add	r7, sp, #40	; 0x28
 8002a3a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d101      	bne.n	8002a46 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e10f      	b.n	8002c66 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d106      	bne.n	8002a66 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f006 f86b 	bl	8008b3c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2203      	movs	r2, #3
 8002a6a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d102      	bne.n	8002a80 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4618      	mov	r0, r3
 8002a86:	f002 fb52 	bl	800512e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	603b      	str	r3, [r7, #0]
 8002a90:	687e      	ldr	r6, [r7, #4]
 8002a92:	466d      	mov	r5, sp
 8002a94:	f106 0410 	add.w	r4, r6, #16
 8002a98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002aa0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002aa4:	e885 0003 	stmia.w	r5, {r0, r1}
 8002aa8:	1d33      	adds	r3, r6, #4
 8002aaa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002aac:	6838      	ldr	r0, [r7, #0]
 8002aae:	f002 fa29 	bl	8004f04 <USB_CoreInit>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d005      	beq.n	8002ac4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2202      	movs	r2, #2
 8002abc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e0d0      	b.n	8002c66 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2100      	movs	r1, #0
 8002aca:	4618      	mov	r0, r3
 8002acc:	f002 fb40 	bl	8005150 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	73fb      	strb	r3, [r7, #15]
 8002ad4:	e04a      	b.n	8002b6c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002ad6:	7bfa      	ldrb	r2, [r7, #15]
 8002ad8:	6879      	ldr	r1, [r7, #4]
 8002ada:	4613      	mov	r3, r2
 8002adc:	00db      	lsls	r3, r3, #3
 8002ade:	4413      	add	r3, r2
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	440b      	add	r3, r1
 8002ae4:	333d      	adds	r3, #61	; 0x3d
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002aea:	7bfa      	ldrb	r2, [r7, #15]
 8002aec:	6879      	ldr	r1, [r7, #4]
 8002aee:	4613      	mov	r3, r2
 8002af0:	00db      	lsls	r3, r3, #3
 8002af2:	4413      	add	r3, r2
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	440b      	add	r3, r1
 8002af8:	333c      	adds	r3, #60	; 0x3c
 8002afa:	7bfa      	ldrb	r2, [r7, #15]
 8002afc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002afe:	7bfa      	ldrb	r2, [r7, #15]
 8002b00:	7bfb      	ldrb	r3, [r7, #15]
 8002b02:	b298      	uxth	r0, r3
 8002b04:	6879      	ldr	r1, [r7, #4]
 8002b06:	4613      	mov	r3, r2
 8002b08:	00db      	lsls	r3, r3, #3
 8002b0a:	4413      	add	r3, r2
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	440b      	add	r3, r1
 8002b10:	3344      	adds	r3, #68	; 0x44
 8002b12:	4602      	mov	r2, r0
 8002b14:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b16:	7bfa      	ldrb	r2, [r7, #15]
 8002b18:	6879      	ldr	r1, [r7, #4]
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	00db      	lsls	r3, r3, #3
 8002b1e:	4413      	add	r3, r2
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	440b      	add	r3, r1
 8002b24:	3340      	adds	r3, #64	; 0x40
 8002b26:	2200      	movs	r2, #0
 8002b28:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b2a:	7bfa      	ldrb	r2, [r7, #15]
 8002b2c:	6879      	ldr	r1, [r7, #4]
 8002b2e:	4613      	mov	r3, r2
 8002b30:	00db      	lsls	r3, r3, #3
 8002b32:	4413      	add	r3, r2
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	440b      	add	r3, r1
 8002b38:	3348      	adds	r3, #72	; 0x48
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b3e:	7bfa      	ldrb	r2, [r7, #15]
 8002b40:	6879      	ldr	r1, [r7, #4]
 8002b42:	4613      	mov	r3, r2
 8002b44:	00db      	lsls	r3, r3, #3
 8002b46:	4413      	add	r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	440b      	add	r3, r1
 8002b4c:	334c      	adds	r3, #76	; 0x4c
 8002b4e:	2200      	movs	r2, #0
 8002b50:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b52:	7bfa      	ldrb	r2, [r7, #15]
 8002b54:	6879      	ldr	r1, [r7, #4]
 8002b56:	4613      	mov	r3, r2
 8002b58:	00db      	lsls	r3, r3, #3
 8002b5a:	4413      	add	r3, r2
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	440b      	add	r3, r1
 8002b60:	3354      	adds	r3, #84	; 0x54
 8002b62:	2200      	movs	r2, #0
 8002b64:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b66:	7bfb      	ldrb	r3, [r7, #15]
 8002b68:	3301      	adds	r3, #1
 8002b6a:	73fb      	strb	r3, [r7, #15]
 8002b6c:	7bfa      	ldrb	r2, [r7, #15]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d3af      	bcc.n	8002ad6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b76:	2300      	movs	r3, #0
 8002b78:	73fb      	strb	r3, [r7, #15]
 8002b7a:	e044      	b.n	8002c06 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002b7c:	7bfa      	ldrb	r2, [r7, #15]
 8002b7e:	6879      	ldr	r1, [r7, #4]
 8002b80:	4613      	mov	r3, r2
 8002b82:	00db      	lsls	r3, r3, #3
 8002b84:	4413      	add	r3, r2
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	440b      	add	r3, r1
 8002b8a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002b8e:	2200      	movs	r2, #0
 8002b90:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002b92:	7bfa      	ldrb	r2, [r7, #15]
 8002b94:	6879      	ldr	r1, [r7, #4]
 8002b96:	4613      	mov	r3, r2
 8002b98:	00db      	lsls	r3, r3, #3
 8002b9a:	4413      	add	r3, r2
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	440b      	add	r3, r1
 8002ba0:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002ba4:	7bfa      	ldrb	r2, [r7, #15]
 8002ba6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002ba8:	7bfa      	ldrb	r2, [r7, #15]
 8002baa:	6879      	ldr	r1, [r7, #4]
 8002bac:	4613      	mov	r3, r2
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	4413      	add	r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	440b      	add	r3, r1
 8002bb6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002bba:	2200      	movs	r2, #0
 8002bbc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002bbe:	7bfa      	ldrb	r2, [r7, #15]
 8002bc0:	6879      	ldr	r1, [r7, #4]
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	00db      	lsls	r3, r3, #3
 8002bc6:	4413      	add	r3, r2
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	440b      	add	r3, r1
 8002bcc:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002bd4:	7bfa      	ldrb	r2, [r7, #15]
 8002bd6:	6879      	ldr	r1, [r7, #4]
 8002bd8:	4613      	mov	r3, r2
 8002bda:	00db      	lsls	r3, r3, #3
 8002bdc:	4413      	add	r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	440b      	add	r3, r1
 8002be2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002be6:	2200      	movs	r2, #0
 8002be8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002bea:	7bfa      	ldrb	r2, [r7, #15]
 8002bec:	6879      	ldr	r1, [r7, #4]
 8002bee:	4613      	mov	r3, r2
 8002bf0:	00db      	lsls	r3, r3, #3
 8002bf2:	4413      	add	r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	440b      	add	r3, r1
 8002bf8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c00:	7bfb      	ldrb	r3, [r7, #15]
 8002c02:	3301      	adds	r3, #1
 8002c04:	73fb      	strb	r3, [r7, #15]
 8002c06:	7bfa      	ldrb	r2, [r7, #15]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d3b5      	bcc.n	8002b7c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	603b      	str	r3, [r7, #0]
 8002c16:	687e      	ldr	r6, [r7, #4]
 8002c18:	466d      	mov	r5, sp
 8002c1a:	f106 0410 	add.w	r4, r6, #16
 8002c1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c26:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c2a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c2e:	1d33      	adds	r3, r6, #4
 8002c30:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c32:	6838      	ldr	r0, [r7, #0]
 8002c34:	f002 fad8 	bl	80051e8 <USB_DevInit>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d005      	beq.n	8002c4a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2202      	movs	r2, #2
 8002c42:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e00d      	b.n	8002c66 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2201      	movs	r2, #1
 8002c56:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f003 fc27 	bl	80064b2 <USB_DevDisconnect>

  return HAL_OK;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3714      	adds	r7, #20
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c6e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b084      	sub	sp, #16
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d101      	bne.n	8002c8a <HAL_PCD_Start+0x1c>
 8002c86:	2302      	movs	r3, #2
 8002c88:	e020      	b.n	8002ccc <HAL_PCD_Start+0x5e>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d109      	bne.n	8002cae <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d005      	beq.n	8002cae <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f002 fa2a 	bl	800510c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f003 fbd7 	bl	8006470 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002cca:	2300      	movs	r3, #0
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3710      	adds	r7, #16
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002cd4:	b590      	push	{r4, r7, lr}
 8002cd6:	b08d      	sub	sp, #52	; 0x34
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ce2:	6a3b      	ldr	r3, [r7, #32]
 8002ce4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4618      	mov	r0, r3
 8002cec:	f003 fc95 	bl	800661a <USB_GetMode>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	f040 848a 	bne.w	800360c <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f003 fbf9 	bl	80064f4 <USB_ReadInterrupts>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	f000 8480 	beq.w	800360a <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	0a1b      	lsrs	r3, r3, #8
 8002d14:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f003 fbe6 	bl	80064f4 <USB_ReadInterrupts>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	f003 0302 	and.w	r3, r3, #2
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d107      	bne.n	8002d42 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	695a      	ldr	r2, [r3, #20]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f002 0202 	and.w	r2, r2, #2
 8002d40:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4618      	mov	r0, r3
 8002d48:	f003 fbd4 	bl	80064f4 <USB_ReadInterrupts>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	f003 0310 	and.w	r3, r3, #16
 8002d52:	2b10      	cmp	r3, #16
 8002d54:	d161      	bne.n	8002e1a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	699a      	ldr	r2, [r3, #24]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f022 0210 	bic.w	r2, r2, #16
 8002d64:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002d66:	6a3b      	ldr	r3, [r7, #32]
 8002d68:	6a1b      	ldr	r3, [r3, #32]
 8002d6a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	f003 020f 	and.w	r2, r3, #15
 8002d72:	4613      	mov	r3, r2
 8002d74:	00db      	lsls	r3, r3, #3
 8002d76:	4413      	add	r3, r2
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	4413      	add	r3, r2
 8002d82:	3304      	adds	r3, #4
 8002d84:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	0c5b      	lsrs	r3, r3, #17
 8002d8a:	f003 030f 	and.w	r3, r3, #15
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d124      	bne.n	8002ddc <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002d92:	69ba      	ldr	r2, [r7, #24]
 8002d94:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002d98:	4013      	ands	r3, r2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d035      	beq.n	8002e0a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	091b      	lsrs	r3, r3, #4
 8002da6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002da8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	461a      	mov	r2, r3
 8002db0:	6a38      	ldr	r0, [r7, #32]
 8002db2:	f003 fa0b 	bl	80061cc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	691a      	ldr	r2, [r3, #16]
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	091b      	lsrs	r3, r3, #4
 8002dbe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002dc2:	441a      	add	r2, r3
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	6a1a      	ldr	r2, [r3, #32]
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	091b      	lsrs	r3, r3, #4
 8002dd0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002dd4:	441a      	add	r2, r3
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	621a      	str	r2, [r3, #32]
 8002dda:	e016      	b.n	8002e0a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	0c5b      	lsrs	r3, r3, #17
 8002de0:	f003 030f 	and.w	r3, r3, #15
 8002de4:	2b06      	cmp	r3, #6
 8002de6:	d110      	bne.n	8002e0a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002dee:	2208      	movs	r2, #8
 8002df0:	4619      	mov	r1, r3
 8002df2:	6a38      	ldr	r0, [r7, #32]
 8002df4:	f003 f9ea 	bl	80061cc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	6a1a      	ldr	r2, [r3, #32]
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	091b      	lsrs	r3, r3, #4
 8002e00:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e04:	441a      	add	r2, r3
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	699a      	ldr	r2, [r3, #24]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f042 0210 	orr.w	r2, r2, #16
 8002e18:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f003 fb68 	bl	80064f4 <USB_ReadInterrupts>
 8002e24:	4603      	mov	r3, r0
 8002e26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e2a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002e2e:	f040 80a7 	bne.w	8002f80 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002e32:	2300      	movs	r3, #0
 8002e34:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f003 fb6d 	bl	800651a <USB_ReadDevAllOutEpInterrupt>
 8002e40:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002e42:	e099      	b.n	8002f78 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e46:	f003 0301 	and.w	r3, r3, #1
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	f000 808e 	beq.w	8002f6c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e56:	b2d2      	uxtb	r2, r2
 8002e58:	4611      	mov	r1, r2
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f003 fb91 	bl	8006582 <USB_ReadDevOutEPInterrupt>
 8002e60:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	f003 0301 	and.w	r3, r3, #1
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d00c      	beq.n	8002e86 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6e:	015a      	lsls	r2, r3, #5
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	4413      	add	r3, r2
 8002e74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e78:	461a      	mov	r2, r3
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002e7e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f000 fec3 	bl	8003c0c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	f003 0308 	and.w	r3, r3, #8
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d00c      	beq.n	8002eaa <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e92:	015a      	lsls	r2, r3, #5
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	4413      	add	r3, r2
 8002e98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	2308      	movs	r3, #8
 8002ea0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002ea2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f000 ff99 	bl	8003ddc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	f003 0310 	and.w	r3, r3, #16
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d008      	beq.n	8002ec6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb6:	015a      	lsls	r2, r3, #5
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	4413      	add	r3, r2
 8002ebc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	2310      	movs	r3, #16
 8002ec4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	f003 0302 	and.w	r3, r3, #2
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d030      	beq.n	8002f32 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002ed0:	6a3b      	ldr	r3, [r7, #32]
 8002ed2:	695b      	ldr	r3, [r3, #20]
 8002ed4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ed8:	2b80      	cmp	r3, #128	; 0x80
 8002eda:	d109      	bne.n	8002ef0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	69fa      	ldr	r2, [r7, #28]
 8002ee6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002eea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002eee:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002ef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	00db      	lsls	r3, r3, #3
 8002ef6:	4413      	add	r3, r2
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	4413      	add	r3, r2
 8002f02:	3304      	adds	r3, #4
 8002f04:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	78db      	ldrb	r3, [r3, #3]
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d108      	bne.n	8002f20 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	2200      	movs	r2, #0
 8002f12:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	4619      	mov	r1, r3
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f005 ff14 	bl	8008d48 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f22:	015a      	lsls	r2, r3, #5
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	4413      	add	r3, r2
 8002f28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	2302      	movs	r3, #2
 8002f30:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	f003 0320 	and.w	r3, r3, #32
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d008      	beq.n	8002f4e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3e:	015a      	lsls	r2, r3, #5
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	4413      	add	r3, r2
 8002f44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f48:	461a      	mov	r2, r3
 8002f4a:	2320      	movs	r3, #32
 8002f4c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d009      	beq.n	8002f6c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5a:	015a      	lsls	r2, r3, #5
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	4413      	add	r3, r2
 8002f60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f64:	461a      	mov	r2, r3
 8002f66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f6a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6e:	3301      	adds	r3, #1
 8002f70:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f74:	085b      	lsrs	r3, r3, #1
 8002f76:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	f47f af62 	bne.w	8002e44 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4618      	mov	r0, r3
 8002f86:	f003 fab5 	bl	80064f4 <USB_ReadInterrupts>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f90:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f94:	f040 80db 	bne.w	800314e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f003 fad6 	bl	800654e <USB_ReadDevAllInEpInterrupt>
 8002fa2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002fa8:	e0cd      	b.n	8003146 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fac:	f003 0301 	and.w	r3, r3, #1
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	f000 80c2 	beq.w	800313a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fbc:	b2d2      	uxtb	r2, r2
 8002fbe:	4611      	mov	r1, r2
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f003 fafc 	bl	80065be <USB_ReadDevInEPInterrupt>
 8002fc6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	f003 0301 	and.w	r3, r3, #1
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d057      	beq.n	8003082 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd4:	f003 030f 	and.w	r3, r3, #15
 8002fd8:	2201      	movs	r2, #1
 8002fda:	fa02 f303 	lsl.w	r3, r2, r3
 8002fde:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fe6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	43db      	mvns	r3, r3
 8002fec:	69f9      	ldr	r1, [r7, #28]
 8002fee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff8:	015a      	lsls	r2, r3, #5
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	4413      	add	r3, r2
 8002ffe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003002:	461a      	mov	r2, r3
 8003004:	2301      	movs	r3, #1
 8003006:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	691b      	ldr	r3, [r3, #16]
 800300c:	2b01      	cmp	r3, #1
 800300e:	d132      	bne.n	8003076 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003010:	6879      	ldr	r1, [r7, #4]
 8003012:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003014:	4613      	mov	r3, r2
 8003016:	00db      	lsls	r3, r3, #3
 8003018:	4413      	add	r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	440b      	add	r3, r1
 800301e:	334c      	adds	r3, #76	; 0x4c
 8003020:	6819      	ldr	r1, [r3, #0]
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003026:	4613      	mov	r3, r2
 8003028:	00db      	lsls	r3, r3, #3
 800302a:	4413      	add	r3, r2
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	4403      	add	r3, r0
 8003030:	3348      	adds	r3, #72	; 0x48
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4419      	add	r1, r3
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800303a:	4613      	mov	r3, r2
 800303c:	00db      	lsls	r3, r3, #3
 800303e:	4413      	add	r3, r2
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	4403      	add	r3, r0
 8003044:	334c      	adds	r3, #76	; 0x4c
 8003046:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304a:	2b00      	cmp	r3, #0
 800304c:	d113      	bne.n	8003076 <HAL_PCD_IRQHandler+0x3a2>
 800304e:	6879      	ldr	r1, [r7, #4]
 8003050:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003052:	4613      	mov	r3, r2
 8003054:	00db      	lsls	r3, r3, #3
 8003056:	4413      	add	r3, r2
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	440b      	add	r3, r1
 800305c:	3354      	adds	r3, #84	; 0x54
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d108      	bne.n	8003076 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6818      	ldr	r0, [r3, #0]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800306e:	461a      	mov	r2, r3
 8003070:	2101      	movs	r1, #1
 8003072:	f003 fb03 	bl	800667c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003078:	b2db      	uxtb	r3, r3
 800307a:	4619      	mov	r1, r3
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f005 fdde 	bl	8008c3e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	f003 0308 	and.w	r3, r3, #8
 8003088:	2b00      	cmp	r3, #0
 800308a:	d008      	beq.n	800309e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800308c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308e:	015a      	lsls	r2, r3, #5
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	4413      	add	r3, r2
 8003094:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003098:	461a      	mov	r2, r3
 800309a:	2308      	movs	r3, #8
 800309c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	f003 0310 	and.w	r3, r3, #16
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d008      	beq.n	80030ba <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80030a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030aa:	015a      	lsls	r2, r3, #5
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	4413      	add	r3, r2
 80030b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030b4:	461a      	mov	r2, r3
 80030b6:	2310      	movs	r3, #16
 80030b8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d008      	beq.n	80030d6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80030c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c6:	015a      	lsls	r2, r3, #5
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	4413      	add	r3, r2
 80030cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030d0:	461a      	mov	r2, r3
 80030d2:	2340      	movs	r3, #64	; 0x40
 80030d4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	f003 0302 	and.w	r3, r3, #2
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d023      	beq.n	8003128 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80030e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030e2:	6a38      	ldr	r0, [r7, #32]
 80030e4:	f002 f9e4 	bl	80054b0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80030e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030ea:	4613      	mov	r3, r2
 80030ec:	00db      	lsls	r3, r3, #3
 80030ee:	4413      	add	r3, r2
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	3338      	adds	r3, #56	; 0x38
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	4413      	add	r3, r2
 80030f8:	3304      	adds	r3, #4
 80030fa:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	78db      	ldrb	r3, [r3, #3]
 8003100:	2b01      	cmp	r3, #1
 8003102:	d108      	bne.n	8003116 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	2200      	movs	r2, #0
 8003108:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800310a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310c:	b2db      	uxtb	r3, r3
 800310e:	4619      	mov	r1, r3
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f005 fe2b 	bl	8008d6c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003118:	015a      	lsls	r2, r3, #5
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	4413      	add	r3, r2
 800311e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003122:	461a      	mov	r2, r3
 8003124:	2302      	movs	r3, #2
 8003126:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800312e:	2b00      	cmp	r3, #0
 8003130:	d003      	beq.n	800313a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003132:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f000 fcdb 	bl	8003af0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800313a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313c:	3301      	adds	r3, #1
 800313e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003142:	085b      	lsrs	r3, r3, #1
 8003144:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003148:	2b00      	cmp	r3, #0
 800314a:	f47f af2e 	bne.w	8002faa <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4618      	mov	r0, r3
 8003154:	f003 f9ce 	bl	80064f4 <USB_ReadInterrupts>
 8003158:	4603      	mov	r3, r0
 800315a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800315e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003162:	d122      	bne.n	80031aa <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	69fa      	ldr	r2, [r7, #28]
 800316e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003172:	f023 0301 	bic.w	r3, r3, #1
 8003176:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800317e:	2b01      	cmp	r3, #1
 8003180:	d108      	bne.n	8003194 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800318a:	2100      	movs	r1, #0
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f000 fec3 	bl	8003f18 <HAL_PCDEx_LPM_Callback>
 8003192:	e002      	b.n	800319a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f005 fdc9 	bl	8008d2c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	695a      	ldr	r2, [r3, #20]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80031a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4618      	mov	r0, r3
 80031b0:	f003 f9a0 	bl	80064f4 <USB_ReadInterrupts>
 80031b4:	4603      	mov	r3, r0
 80031b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031be:	d112      	bne.n	80031e6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	f003 0301 	and.w	r3, r3, #1
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d102      	bne.n	80031d6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f005 fd85 	bl	8008ce0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	695a      	ldr	r2, [r3, #20]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80031e4:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4618      	mov	r0, r3
 80031ec:	f003 f982 	bl	80064f4 <USB_ReadInterrupts>
 80031f0:	4603      	mov	r3, r0
 80031f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031fa:	f040 80b7 	bne.w	800336c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	69fa      	ldr	r2, [r7, #28]
 8003208:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800320c:	f023 0301 	bic.w	r3, r3, #1
 8003210:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2110      	movs	r1, #16
 8003218:	4618      	mov	r0, r3
 800321a:	f002 f949 	bl	80054b0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800321e:	2300      	movs	r3, #0
 8003220:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003222:	e046      	b.n	80032b2 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003226:	015a      	lsls	r2, r3, #5
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	4413      	add	r3, r2
 800322c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003230:	461a      	mov	r2, r3
 8003232:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003236:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800323a:	015a      	lsls	r2, r3, #5
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	4413      	add	r3, r2
 8003240:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003248:	0151      	lsls	r1, r2, #5
 800324a:	69fa      	ldr	r2, [r7, #28]
 800324c:	440a      	add	r2, r1
 800324e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003252:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003256:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800325a:	015a      	lsls	r2, r3, #5
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	4413      	add	r3, r2
 8003260:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003264:	461a      	mov	r2, r3
 8003266:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800326a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800326c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800326e:	015a      	lsls	r2, r3, #5
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	4413      	add	r3, r2
 8003274:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800327c:	0151      	lsls	r1, r2, #5
 800327e:	69fa      	ldr	r2, [r7, #28]
 8003280:	440a      	add	r2, r1
 8003282:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003286:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800328a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800328c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800328e:	015a      	lsls	r2, r3, #5
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	4413      	add	r3, r2
 8003294:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800329c:	0151      	lsls	r1, r2, #5
 800329e:	69fa      	ldr	r2, [r7, #28]
 80032a0:	440a      	add	r2, r1
 80032a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80032a6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80032aa:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ae:	3301      	adds	r3, #1
 80032b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d3b3      	bcc.n	8003224 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032c2:	69db      	ldr	r3, [r3, #28]
 80032c4:	69fa      	ldr	r2, [r7, #28]
 80032c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032ca:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80032ce:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d016      	beq.n	8003306 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032e2:	69fa      	ldr	r2, [r7, #28]
 80032e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032e8:	f043 030b 	orr.w	r3, r3, #11
 80032ec:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f8:	69fa      	ldr	r2, [r7, #28]
 80032fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032fe:	f043 030b 	orr.w	r3, r3, #11
 8003302:	6453      	str	r3, [r2, #68]	; 0x44
 8003304:	e015      	b.n	8003332 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800330c:	695b      	ldr	r3, [r3, #20]
 800330e:	69fa      	ldr	r2, [r7, #28]
 8003310:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003314:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003318:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800331c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003324:	691b      	ldr	r3, [r3, #16]
 8003326:	69fa      	ldr	r2, [r7, #28]
 8003328:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800332c:	f043 030b 	orr.w	r3, r3, #11
 8003330:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	69fa      	ldr	r2, [r7, #28]
 800333c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003340:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003344:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6818      	ldr	r0, [r3, #0]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003356:	461a      	mov	r2, r3
 8003358:	f003 f990 	bl	800667c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	695a      	ldr	r2, [r3, #20]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800336a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4618      	mov	r0, r3
 8003372:	f003 f8bf 	bl	80064f4 <USB_ReadInterrupts>
 8003376:	4603      	mov	r3, r0
 8003378:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800337c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003380:	d124      	bne.n	80033cc <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4618      	mov	r0, r3
 8003388:	f003 f955 	bl	8006636 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4618      	mov	r0, r3
 8003392:	f002 f90a 	bl	80055aa <USB_GetDevSpeed>
 8003396:	4603      	mov	r3, r0
 8003398:	461a      	mov	r2, r3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681c      	ldr	r4, [r3, #0]
 80033a2:	f001 fa29 	bl	80047f8 <HAL_RCC_GetHCLKFreq>
 80033a6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	461a      	mov	r2, r3
 80033b0:	4620      	mov	r0, r4
 80033b2:	f001 fe09 	bl	8004fc8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f005 fc69 	bl	8008c8e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	695a      	ldr	r2, [r3, #20]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80033ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4618      	mov	r0, r3
 80033d2:	f003 f88f 	bl	80064f4 <USB_ReadInterrupts>
 80033d6:	4603      	mov	r3, r0
 80033d8:	f003 0308 	and.w	r3, r3, #8
 80033dc:	2b08      	cmp	r3, #8
 80033de:	d10a      	bne.n	80033f6 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f005 fc46 	bl	8008c72 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	695a      	ldr	r2, [r3, #20]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f002 0208 	and.w	r2, r2, #8
 80033f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4618      	mov	r0, r3
 80033fc:	f003 f87a 	bl	80064f4 <USB_ReadInterrupts>
 8003400:	4603      	mov	r3, r0
 8003402:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003406:	2b80      	cmp	r3, #128	; 0x80
 8003408:	d122      	bne.n	8003450 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800340a:	6a3b      	ldr	r3, [r7, #32]
 800340c:	699b      	ldr	r3, [r3, #24]
 800340e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003412:	6a3b      	ldr	r3, [r7, #32]
 8003414:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003416:	2301      	movs	r3, #1
 8003418:	627b      	str	r3, [r7, #36]	; 0x24
 800341a:	e014      	b.n	8003446 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800341c:	6879      	ldr	r1, [r7, #4]
 800341e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003420:	4613      	mov	r3, r2
 8003422:	00db      	lsls	r3, r3, #3
 8003424:	4413      	add	r3, r2
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	440b      	add	r3, r1
 800342a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	2b01      	cmp	r3, #1
 8003432:	d105      	bne.n	8003440 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003436:	b2db      	uxtb	r3, r3
 8003438:	4619      	mov	r1, r3
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 fb27 	bl	8003a8e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003442:	3301      	adds	r3, #1
 8003444:	627b      	str	r3, [r7, #36]	; 0x24
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800344c:	429a      	cmp	r2, r3
 800344e:	d3e5      	bcc.n	800341c <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4618      	mov	r0, r3
 8003456:	f003 f84d 	bl	80064f4 <USB_ReadInterrupts>
 800345a:	4603      	mov	r3, r0
 800345c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003460:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003464:	d13b      	bne.n	80034de <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003466:	2301      	movs	r3, #1
 8003468:	627b      	str	r3, [r7, #36]	; 0x24
 800346a:	e02b      	b.n	80034c4 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800346c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346e:	015a      	lsls	r2, r3, #5
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	4413      	add	r3, r2
 8003474:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800347c:	6879      	ldr	r1, [r7, #4]
 800347e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003480:	4613      	mov	r3, r2
 8003482:	00db      	lsls	r3, r3, #3
 8003484:	4413      	add	r3, r2
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	440b      	add	r3, r1
 800348a:	3340      	adds	r3, #64	; 0x40
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d115      	bne.n	80034be <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003492:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003494:	2b00      	cmp	r3, #0
 8003496:	da12      	bge.n	80034be <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003498:	6879      	ldr	r1, [r7, #4]
 800349a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800349c:	4613      	mov	r3, r2
 800349e:	00db      	lsls	r3, r3, #3
 80034a0:	4413      	add	r3, r2
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	440b      	add	r3, r1
 80034a6:	333f      	adds	r3, #63	; 0x3f
 80034a8:	2201      	movs	r2, #1
 80034aa:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80034ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	4619      	mov	r1, r3
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f000 fae8 	bl	8003a8e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80034be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c0:	3301      	adds	r3, #1
 80034c2:	627b      	str	r3, [r7, #36]	; 0x24
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d3ce      	bcc.n	800346c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	695a      	ldr	r2, [r3, #20]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80034dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4618      	mov	r0, r3
 80034e4:	f003 f806 	bl	80064f4 <USB_ReadInterrupts>
 80034e8:	4603      	mov	r3, r0
 80034ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034f2:	d155      	bne.n	80035a0 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80034f4:	2301      	movs	r3, #1
 80034f6:	627b      	str	r3, [r7, #36]	; 0x24
 80034f8:	e045      	b.n	8003586 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80034fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fc:	015a      	lsls	r2, r3, #5
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	4413      	add	r3, r2
 8003502:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800350a:	6879      	ldr	r1, [r7, #4]
 800350c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800350e:	4613      	mov	r3, r2
 8003510:	00db      	lsls	r3, r3, #3
 8003512:	4413      	add	r3, r2
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	440b      	add	r3, r1
 8003518:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	2b01      	cmp	r3, #1
 8003520:	d12e      	bne.n	8003580 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003522:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003524:	2b00      	cmp	r3, #0
 8003526:	da2b      	bge.n	8003580 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003528:	69bb      	ldr	r3, [r7, #24]
 800352a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003534:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003538:	429a      	cmp	r2, r3
 800353a:	d121      	bne.n	8003580 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800353c:	6879      	ldr	r1, [r7, #4]
 800353e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003540:	4613      	mov	r3, r2
 8003542:	00db      	lsls	r3, r3, #3
 8003544:	4413      	add	r3, r2
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	440b      	add	r3, r1
 800354a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800354e:	2201      	movs	r2, #1
 8003550:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003552:	6a3b      	ldr	r3, [r7, #32]
 8003554:	699b      	ldr	r3, [r3, #24]
 8003556:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800355a:	6a3b      	ldr	r3, [r7, #32]
 800355c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800355e:	6a3b      	ldr	r3, [r7, #32]
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003566:	2b00      	cmp	r3, #0
 8003568:	d10a      	bne.n	8003580 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	69fa      	ldr	r2, [r7, #28]
 8003574:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003578:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800357c:	6053      	str	r3, [r2, #4]
            break;
 800357e:	e007      	b.n	8003590 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003582:	3301      	adds	r3, #1
 8003584:	627b      	str	r3, [r7, #36]	; 0x24
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800358c:	429a      	cmp	r2, r3
 800358e:	d3b4      	bcc.n	80034fa <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	695a      	ldr	r2, [r3, #20]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800359e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4618      	mov	r0, r3
 80035a6:	f002 ffa5 	bl	80064f4 <USB_ReadInterrupts>
 80035aa:	4603      	mov	r3, r0
 80035ac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80035b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035b4:	d10a      	bne.n	80035cc <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f005 fbea 	bl	8008d90 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	695a      	ldr	r2, [r3, #20]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80035ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4618      	mov	r0, r3
 80035d2:	f002 ff8f 	bl	80064f4 <USB_ReadInterrupts>
 80035d6:	4603      	mov	r3, r0
 80035d8:	f003 0304 	and.w	r3, r3, #4
 80035dc:	2b04      	cmp	r3, #4
 80035de:	d115      	bne.n	800360c <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	f003 0304 	and.w	r3, r3, #4
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d002      	beq.n	80035f8 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f005 fbda 	bl	8008dac <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	6859      	ldr	r1, [r3, #4]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	69ba      	ldr	r2, [r7, #24]
 8003604:	430a      	orrs	r2, r1
 8003606:	605a      	str	r2, [r3, #4]
 8003608:	e000      	b.n	800360c <HAL_PCD_IRQHandler+0x938>
      return;
 800360a:	bf00      	nop
    }
  }
}
 800360c:	3734      	adds	r7, #52	; 0x34
 800360e:	46bd      	mov	sp, r7
 8003610:	bd90      	pop	{r4, r7, pc}

08003612 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003612:	b580      	push	{r7, lr}
 8003614:	b082      	sub	sp, #8
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
 800361a:	460b      	mov	r3, r1
 800361c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003624:	2b01      	cmp	r3, #1
 8003626:	d101      	bne.n	800362c <HAL_PCD_SetAddress+0x1a>
 8003628:	2302      	movs	r3, #2
 800362a:	e013      	b.n	8003654 <HAL_PCD_SetAddress+0x42>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	78fa      	ldrb	r2, [r7, #3]
 8003638:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	78fa      	ldrb	r2, [r7, #3]
 8003642:	4611      	mov	r1, r2
 8003644:	4618      	mov	r0, r3
 8003646:	f002 feed 	bl	8006424 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003652:	2300      	movs	r3, #0
}
 8003654:	4618      	mov	r0, r3
 8003656:	3708      	adds	r7, #8
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}

0800365c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	4608      	mov	r0, r1
 8003666:	4611      	mov	r1, r2
 8003668:	461a      	mov	r2, r3
 800366a:	4603      	mov	r3, r0
 800366c:	70fb      	strb	r3, [r7, #3]
 800366e:	460b      	mov	r3, r1
 8003670:	803b      	strh	r3, [r7, #0]
 8003672:	4613      	mov	r3, r2
 8003674:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003676:	2300      	movs	r3, #0
 8003678:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800367a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800367e:	2b00      	cmp	r3, #0
 8003680:	da0f      	bge.n	80036a2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003682:	78fb      	ldrb	r3, [r7, #3]
 8003684:	f003 020f 	and.w	r2, r3, #15
 8003688:	4613      	mov	r3, r2
 800368a:	00db      	lsls	r3, r3, #3
 800368c:	4413      	add	r3, r2
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	3338      	adds	r3, #56	; 0x38
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	4413      	add	r3, r2
 8003696:	3304      	adds	r3, #4
 8003698:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2201      	movs	r2, #1
 800369e:	705a      	strb	r2, [r3, #1]
 80036a0:	e00f      	b.n	80036c2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036a2:	78fb      	ldrb	r3, [r7, #3]
 80036a4:	f003 020f 	and.w	r2, r3, #15
 80036a8:	4613      	mov	r3, r2
 80036aa:	00db      	lsls	r3, r3, #3
 80036ac:	4413      	add	r3, r2
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	4413      	add	r3, r2
 80036b8:	3304      	adds	r3, #4
 80036ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2200      	movs	r2, #0
 80036c0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80036c2:	78fb      	ldrb	r3, [r7, #3]
 80036c4:	f003 030f 	and.w	r3, r3, #15
 80036c8:	b2da      	uxtb	r2, r3
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80036ce:	883a      	ldrh	r2, [r7, #0]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	78ba      	ldrb	r2, [r7, #2]
 80036d8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	785b      	ldrb	r3, [r3, #1]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d004      	beq.n	80036ec <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	b29a      	uxth	r2, r3
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80036ec:	78bb      	ldrb	r3, [r7, #2]
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d102      	bne.n	80036f8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2200      	movs	r2, #0
 80036f6:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d101      	bne.n	8003706 <HAL_PCD_EP_Open+0xaa>
 8003702:	2302      	movs	r3, #2
 8003704:	e00e      	b.n	8003724 <HAL_PCD_EP_Open+0xc8>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2201      	movs	r2, #1
 800370a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	68f9      	ldr	r1, [r7, #12]
 8003714:	4618      	mov	r0, r3
 8003716:	f001 ff6d 	bl	80055f4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003722:	7afb      	ldrb	r3, [r7, #11]
}
 8003724:	4618      	mov	r0, r3
 8003726:	3710      	adds	r7, #16
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}

0800372c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	460b      	mov	r3, r1
 8003736:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003738:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800373c:	2b00      	cmp	r3, #0
 800373e:	da0f      	bge.n	8003760 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003740:	78fb      	ldrb	r3, [r7, #3]
 8003742:	f003 020f 	and.w	r2, r3, #15
 8003746:	4613      	mov	r3, r2
 8003748:	00db      	lsls	r3, r3, #3
 800374a:	4413      	add	r3, r2
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	3338      	adds	r3, #56	; 0x38
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	4413      	add	r3, r2
 8003754:	3304      	adds	r3, #4
 8003756:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2201      	movs	r2, #1
 800375c:	705a      	strb	r2, [r3, #1]
 800375e:	e00f      	b.n	8003780 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003760:	78fb      	ldrb	r3, [r7, #3]
 8003762:	f003 020f 	and.w	r2, r3, #15
 8003766:	4613      	mov	r3, r2
 8003768:	00db      	lsls	r3, r3, #3
 800376a:	4413      	add	r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	4413      	add	r3, r2
 8003776:	3304      	adds	r3, #4
 8003778:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2200      	movs	r2, #0
 800377e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003780:	78fb      	ldrb	r3, [r7, #3]
 8003782:	f003 030f 	and.w	r3, r3, #15
 8003786:	b2da      	uxtb	r2, r3
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003792:	2b01      	cmp	r3, #1
 8003794:	d101      	bne.n	800379a <HAL_PCD_EP_Close+0x6e>
 8003796:	2302      	movs	r3, #2
 8003798:	e00e      	b.n	80037b8 <HAL_PCD_EP_Close+0x8c>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2201      	movs	r2, #1
 800379e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	68f9      	ldr	r1, [r7, #12]
 80037a8:	4618      	mov	r0, r3
 80037aa:	f001 ffab 	bl	8005704 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80037b6:	2300      	movs	r3, #0
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3710      	adds	r7, #16
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b086      	sub	sp, #24
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	607a      	str	r2, [r7, #4]
 80037ca:	603b      	str	r3, [r7, #0]
 80037cc:	460b      	mov	r3, r1
 80037ce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037d0:	7afb      	ldrb	r3, [r7, #11]
 80037d2:	f003 020f 	and.w	r2, r3, #15
 80037d6:	4613      	mov	r3, r2
 80037d8:	00db      	lsls	r3, r3, #3
 80037da:	4413      	add	r3, r2
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80037e2:	68fa      	ldr	r2, [r7, #12]
 80037e4:	4413      	add	r3, r2
 80037e6:	3304      	adds	r3, #4
 80037e8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	683a      	ldr	r2, [r7, #0]
 80037f4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	2200      	movs	r2, #0
 80037fa:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	2200      	movs	r2, #0
 8003800:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003802:	7afb      	ldrb	r3, [r7, #11]
 8003804:	f003 030f 	and.w	r3, r3, #15
 8003808:	b2da      	uxtb	r2, r3
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	2b01      	cmp	r3, #1
 8003814:	d102      	bne.n	800381c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800381c:	7afb      	ldrb	r3, [r7, #11]
 800381e:	f003 030f 	and.w	r3, r3, #15
 8003822:	2b00      	cmp	r3, #0
 8003824:	d109      	bne.n	800383a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6818      	ldr	r0, [r3, #0]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	b2db      	uxtb	r3, r3
 8003830:	461a      	mov	r2, r3
 8003832:	6979      	ldr	r1, [r7, #20]
 8003834:	f002 fa8a 	bl	8005d4c <USB_EP0StartXfer>
 8003838:	e008      	b.n	800384c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6818      	ldr	r0, [r3, #0]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	b2db      	uxtb	r3, r3
 8003844:	461a      	mov	r2, r3
 8003846:	6979      	ldr	r1, [r7, #20]
 8003848:	f002 f838 	bl	80058bc <USB_EPStartXfer>
  }

  return HAL_OK;
 800384c:	2300      	movs	r3, #0
}
 800384e:	4618      	mov	r0, r3
 8003850:	3718      	adds	r7, #24
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}

08003856 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003856:	b480      	push	{r7}
 8003858:	b083      	sub	sp, #12
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
 800385e:	460b      	mov	r3, r1
 8003860:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003862:	78fb      	ldrb	r3, [r7, #3]
 8003864:	f003 020f 	and.w	r2, r3, #15
 8003868:	6879      	ldr	r1, [r7, #4]
 800386a:	4613      	mov	r3, r2
 800386c:	00db      	lsls	r3, r3, #3
 800386e:	4413      	add	r3, r2
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	440b      	add	r3, r1
 8003874:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003878:	681b      	ldr	r3, [r3, #0]
}
 800387a:	4618      	mov	r0, r3
 800387c:	370c      	adds	r7, #12
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr

08003886 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003886:	b580      	push	{r7, lr}
 8003888:	b086      	sub	sp, #24
 800388a:	af00      	add	r7, sp, #0
 800388c:	60f8      	str	r0, [r7, #12]
 800388e:	607a      	str	r2, [r7, #4]
 8003890:	603b      	str	r3, [r7, #0]
 8003892:	460b      	mov	r3, r1
 8003894:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003896:	7afb      	ldrb	r3, [r7, #11]
 8003898:	f003 020f 	and.w	r2, r3, #15
 800389c:	4613      	mov	r3, r2
 800389e:	00db      	lsls	r3, r3, #3
 80038a0:	4413      	add	r3, r2
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	3338      	adds	r3, #56	; 0x38
 80038a6:	68fa      	ldr	r2, [r7, #12]
 80038a8:	4413      	add	r3, r2
 80038aa:	3304      	adds	r3, #4
 80038ac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	683a      	ldr	r2, [r7, #0]
 80038b8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	2200      	movs	r2, #0
 80038be:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	2201      	movs	r2, #1
 80038c4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038c6:	7afb      	ldrb	r3, [r7, #11]
 80038c8:	f003 030f 	and.w	r3, r3, #15
 80038cc:	b2da      	uxtb	r2, r3
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d102      	bne.n	80038e0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80038e0:	7afb      	ldrb	r3, [r7, #11]
 80038e2:	f003 030f 	and.w	r3, r3, #15
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d109      	bne.n	80038fe <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6818      	ldr	r0, [r3, #0]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	461a      	mov	r2, r3
 80038f6:	6979      	ldr	r1, [r7, #20]
 80038f8:	f002 fa28 	bl	8005d4c <USB_EP0StartXfer>
 80038fc:	e008      	b.n	8003910 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6818      	ldr	r0, [r3, #0]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	b2db      	uxtb	r3, r3
 8003908:	461a      	mov	r2, r3
 800390a:	6979      	ldr	r1, [r7, #20]
 800390c:	f001 ffd6 	bl	80058bc <USB_EPStartXfer>
  }

  return HAL_OK;
 8003910:	2300      	movs	r3, #0
}
 8003912:	4618      	mov	r0, r3
 8003914:	3718      	adds	r7, #24
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}

0800391a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800391a:	b580      	push	{r7, lr}
 800391c:	b084      	sub	sp, #16
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
 8003922:	460b      	mov	r3, r1
 8003924:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003926:	78fb      	ldrb	r3, [r7, #3]
 8003928:	f003 020f 	and.w	r2, r3, #15
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	429a      	cmp	r2, r3
 8003932:	d901      	bls.n	8003938 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e050      	b.n	80039da <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003938:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800393c:	2b00      	cmp	r3, #0
 800393e:	da0f      	bge.n	8003960 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003940:	78fb      	ldrb	r3, [r7, #3]
 8003942:	f003 020f 	and.w	r2, r3, #15
 8003946:	4613      	mov	r3, r2
 8003948:	00db      	lsls	r3, r3, #3
 800394a:	4413      	add	r3, r2
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	3338      	adds	r3, #56	; 0x38
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	4413      	add	r3, r2
 8003954:	3304      	adds	r3, #4
 8003956:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2201      	movs	r2, #1
 800395c:	705a      	strb	r2, [r3, #1]
 800395e:	e00d      	b.n	800397c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003960:	78fa      	ldrb	r2, [r7, #3]
 8003962:	4613      	mov	r3, r2
 8003964:	00db      	lsls	r3, r3, #3
 8003966:	4413      	add	r3, r2
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	4413      	add	r3, r2
 8003972:	3304      	adds	r3, #4
 8003974:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2200      	movs	r2, #0
 800397a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2201      	movs	r2, #1
 8003980:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003982:	78fb      	ldrb	r3, [r7, #3]
 8003984:	f003 030f 	and.w	r3, r3, #15
 8003988:	b2da      	uxtb	r2, r3
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003994:	2b01      	cmp	r3, #1
 8003996:	d101      	bne.n	800399c <HAL_PCD_EP_SetStall+0x82>
 8003998:	2302      	movs	r3, #2
 800399a:	e01e      	b.n	80039da <HAL_PCD_EP_SetStall+0xc0>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	68f9      	ldr	r1, [r7, #12]
 80039aa:	4618      	mov	r0, r3
 80039ac:	f002 fc66 	bl	800627c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80039b0:	78fb      	ldrb	r3, [r7, #3]
 80039b2:	f003 030f 	and.w	r3, r3, #15
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d10a      	bne.n	80039d0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6818      	ldr	r0, [r3, #0]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	b2d9      	uxtb	r1, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80039ca:	461a      	mov	r2, r3
 80039cc:	f002 fe56 	bl	800667c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80039d8:	2300      	movs	r3, #0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3710      	adds	r7, #16
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}

080039e2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039e2:	b580      	push	{r7, lr}
 80039e4:	b084      	sub	sp, #16
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
 80039ea:	460b      	mov	r3, r1
 80039ec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80039ee:	78fb      	ldrb	r3, [r7, #3]
 80039f0:	f003 020f 	and.w	r2, r3, #15
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d901      	bls.n	8003a00 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e042      	b.n	8003a86 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	da0f      	bge.n	8003a28 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a08:	78fb      	ldrb	r3, [r7, #3]
 8003a0a:	f003 020f 	and.w	r2, r3, #15
 8003a0e:	4613      	mov	r3, r2
 8003a10:	00db      	lsls	r3, r3, #3
 8003a12:	4413      	add	r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	3338      	adds	r3, #56	; 0x38
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	4413      	add	r3, r2
 8003a1c:	3304      	adds	r3, #4
 8003a1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2201      	movs	r2, #1
 8003a24:	705a      	strb	r2, [r3, #1]
 8003a26:	e00f      	b.n	8003a48 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a28:	78fb      	ldrb	r3, [r7, #3]
 8003a2a:	f003 020f 	and.w	r2, r3, #15
 8003a2e:	4613      	mov	r3, r2
 8003a30:	00db      	lsls	r3, r3, #3
 8003a32:	4413      	add	r3, r2
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	4413      	add	r3, r2
 8003a3e:	3304      	adds	r3, #4
 8003a40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2200      	movs	r2, #0
 8003a46:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a4e:	78fb      	ldrb	r3, [r7, #3]
 8003a50:	f003 030f 	and.w	r3, r3, #15
 8003a54:	b2da      	uxtb	r2, r3
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d101      	bne.n	8003a68 <HAL_PCD_EP_ClrStall+0x86>
 8003a64:	2302      	movs	r3, #2
 8003a66:	e00e      	b.n	8003a86 <HAL_PCD_EP_ClrStall+0xa4>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68f9      	ldr	r1, [r7, #12]
 8003a76:	4618      	mov	r0, r3
 8003a78:	f002 fc6e 	bl	8006358 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3710      	adds	r7, #16
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}

08003a8e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a8e:	b580      	push	{r7, lr}
 8003a90:	b084      	sub	sp, #16
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	6078      	str	r0, [r7, #4]
 8003a96:	460b      	mov	r3, r1
 8003a98:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003a9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	da0c      	bge.n	8003abc <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003aa2:	78fb      	ldrb	r3, [r7, #3]
 8003aa4:	f003 020f 	and.w	r2, r3, #15
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	00db      	lsls	r3, r3, #3
 8003aac:	4413      	add	r3, r2
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	3338      	adds	r3, #56	; 0x38
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	4413      	add	r3, r2
 8003ab6:	3304      	adds	r3, #4
 8003ab8:	60fb      	str	r3, [r7, #12]
 8003aba:	e00c      	b.n	8003ad6 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003abc:	78fb      	ldrb	r3, [r7, #3]
 8003abe:	f003 020f 	and.w	r2, r3, #15
 8003ac2:	4613      	mov	r3, r2
 8003ac4:	00db      	lsls	r3, r3, #3
 8003ac6:	4413      	add	r3, r2
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	4413      	add	r3, r2
 8003ad2:	3304      	adds	r3, #4
 8003ad4:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	68f9      	ldr	r1, [r7, #12]
 8003adc:	4618      	mov	r0, r3
 8003ade:	f002 fa8d 	bl	8005ffc <USB_EPStopXfer>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003ae6:	7afb      	ldrb	r3, [r7, #11]
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3710      	adds	r7, #16
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b08a      	sub	sp, #40	; 0x28
 8003af4:	af02      	add	r7, sp, #8
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003b04:	683a      	ldr	r2, [r7, #0]
 8003b06:	4613      	mov	r3, r2
 8003b08:	00db      	lsls	r3, r3, #3
 8003b0a:	4413      	add	r3, r2
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	3338      	adds	r3, #56	; 0x38
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	4413      	add	r3, r2
 8003b14:	3304      	adds	r3, #4
 8003b16:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6a1a      	ldr	r2, [r3, #32]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	699b      	ldr	r3, [r3, #24]
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d901      	bls.n	8003b28 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e06c      	b.n	8003c02 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	699a      	ldr	r2, [r3, #24]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6a1b      	ldr	r3, [r3, #32]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	69fa      	ldr	r2, [r7, #28]
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d902      	bls.n	8003b44 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	3303      	adds	r3, #3
 8003b48:	089b      	lsrs	r3, r3, #2
 8003b4a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b4c:	e02b      	b.n	8003ba6 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	699a      	ldr	r2, [r3, #24]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6a1b      	ldr	r3, [r3, #32]
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	69fa      	ldr	r2, [r7, #28]
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d902      	bls.n	8003b6a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	3303      	adds	r3, #3
 8003b6e:	089b      	lsrs	r3, r3, #2
 8003b70:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	6919      	ldr	r1, [r3, #16]
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	b2da      	uxtb	r2, r3
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	9300      	str	r3, [sp, #0]
 8003b86:	4603      	mov	r3, r0
 8003b88:	6978      	ldr	r0, [r7, #20]
 8003b8a:	f002 fae1 	bl	8006150 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	691a      	ldr	r2, [r3, #16]
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	441a      	add	r2, r3
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6a1a      	ldr	r2, [r3, #32]
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	441a      	add	r2, r3
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	015a      	lsls	r2, r3, #5
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	4413      	add	r3, r2
 8003bae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bb2:	699b      	ldr	r3, [r3, #24]
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	69ba      	ldr	r2, [r7, #24]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d809      	bhi.n	8003bd0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6a1a      	ldr	r2, [r3, #32]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d203      	bcs.n	8003bd0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	699b      	ldr	r3, [r3, #24]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d1be      	bne.n	8003b4e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	699a      	ldr	r2, [r3, #24]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6a1b      	ldr	r3, [r3, #32]
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d811      	bhi.n	8003c00 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	f003 030f 	and.w	r3, r3, #15
 8003be2:	2201      	movs	r2, #1
 8003be4:	fa02 f303 	lsl.w	r3, r2, r3
 8003be8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bf0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	43db      	mvns	r3, r3
 8003bf6:	6939      	ldr	r1, [r7, #16]
 8003bf8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3720      	adds	r7, #32
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
	...

08003c0c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b088      	sub	sp, #32
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	333c      	adds	r3, #60	; 0x3c
 8003c24:	3304      	adds	r3, #4
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	015a      	lsls	r2, r3, #5
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	4413      	add	r3, r2
 8003c32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d17b      	bne.n	8003d3a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	f003 0308 	and.w	r3, r3, #8
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d015      	beq.n	8003c78 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	4a61      	ldr	r2, [pc, #388]	; (8003dd4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	f240 80b9 	bls.w	8003dc8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	f000 80b3 	beq.w	8003dc8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	015a      	lsls	r2, r3, #5
 8003c66:	69bb      	ldr	r3, [r7, #24]
 8003c68:	4413      	add	r3, r2
 8003c6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c6e:	461a      	mov	r2, r3
 8003c70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c74:	6093      	str	r3, [r2, #8]
 8003c76:	e0a7      	b.n	8003dc8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	f003 0320 	and.w	r3, r3, #32
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d009      	beq.n	8003c96 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	015a      	lsls	r2, r3, #5
 8003c86:	69bb      	ldr	r3, [r7, #24]
 8003c88:	4413      	add	r3, r2
 8003c8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c8e:	461a      	mov	r2, r3
 8003c90:	2320      	movs	r3, #32
 8003c92:	6093      	str	r3, [r2, #8]
 8003c94:	e098      	b.n	8003dc8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	f040 8093 	bne.w	8003dc8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	4a4b      	ldr	r2, [pc, #300]	; (8003dd4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d90f      	bls.n	8003cca <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d00a      	beq.n	8003cca <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	015a      	lsls	r2, r3, #5
 8003cb8:	69bb      	ldr	r3, [r7, #24]
 8003cba:	4413      	add	r3, r2
 8003cbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cc6:	6093      	str	r3, [r2, #8]
 8003cc8:	e07e      	b.n	8003dc8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003cca:	683a      	ldr	r2, [r7, #0]
 8003ccc:	4613      	mov	r3, r2
 8003cce:	00db      	lsls	r3, r3, #3
 8003cd0:	4413      	add	r3, r2
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	4413      	add	r3, r2
 8003cdc:	3304      	adds	r3, #4
 8003cde:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	69da      	ldr	r2, [r3, #28]
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	0159      	lsls	r1, r3, #5
 8003ce8:	69bb      	ldr	r3, [r7, #24]
 8003cea:	440b      	add	r3, r1
 8003cec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cf6:	1ad2      	subs	r2, r2, r3
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d114      	bne.n	8003d2c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	699b      	ldr	r3, [r3, #24]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d109      	bne.n	8003d1e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6818      	ldr	r0, [r3, #0]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003d14:	461a      	mov	r2, r3
 8003d16:	2101      	movs	r1, #1
 8003d18:	f002 fcb0 	bl	800667c <USB_EP0_OutStart>
 8003d1c:	e006      	b.n	8003d2c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	691a      	ldr	r2, [r3, #16]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6a1b      	ldr	r3, [r3, #32]
 8003d26:	441a      	add	r2, r3
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	4619      	mov	r1, r3
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f004 ff68 	bl	8008c08 <HAL_PCD_DataOutStageCallback>
 8003d38:	e046      	b.n	8003dc8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	4a26      	ldr	r2, [pc, #152]	; (8003dd8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d124      	bne.n	8003d8c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d00a      	beq.n	8003d62 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	015a      	lsls	r2, r3, #5
 8003d50:	69bb      	ldr	r3, [r7, #24]
 8003d52:	4413      	add	r3, r2
 8003d54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d58:	461a      	mov	r2, r3
 8003d5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d5e:	6093      	str	r3, [r2, #8]
 8003d60:	e032      	b.n	8003dc8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	f003 0320 	and.w	r3, r3, #32
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d008      	beq.n	8003d7e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	015a      	lsls	r2, r3, #5
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	4413      	add	r3, r2
 8003d74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d78:	461a      	mov	r2, r3
 8003d7a:	2320      	movs	r3, #32
 8003d7c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	4619      	mov	r1, r3
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f004 ff3f 	bl	8008c08 <HAL_PCD_DataOutStageCallback>
 8003d8a:	e01d      	b.n	8003dc8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d114      	bne.n	8003dbc <PCD_EP_OutXfrComplete_int+0x1b0>
 8003d92:	6879      	ldr	r1, [r7, #4]
 8003d94:	683a      	ldr	r2, [r7, #0]
 8003d96:	4613      	mov	r3, r2
 8003d98:	00db      	lsls	r3, r3, #3
 8003d9a:	4413      	add	r3, r2
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	440b      	add	r3, r1
 8003da0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d108      	bne.n	8003dbc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6818      	ldr	r0, [r3, #0]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003db4:	461a      	mov	r2, r3
 8003db6:	2100      	movs	r1, #0
 8003db8:	f002 fc60 	bl	800667c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f004 ff20 	bl	8008c08 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003dc8:	2300      	movs	r3, #0
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3720      	adds	r7, #32
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	4f54300a 	.word	0x4f54300a
 8003dd8:	4f54310a 	.word	0x4f54310a

08003ddc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b086      	sub	sp, #24
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	333c      	adds	r3, #60	; 0x3c
 8003df4:	3304      	adds	r3, #4
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	015a      	lsls	r2, r3, #5
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	4413      	add	r3, r2
 8003e02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	4a15      	ldr	r2, [pc, #84]	; (8003e64 <PCD_EP_OutSetupPacket_int+0x88>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d90e      	bls.n	8003e30 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d009      	beq.n	8003e30 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	015a      	lsls	r2, r3, #5
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	4413      	add	r3, r2
 8003e24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e28:	461a      	mov	r2, r3
 8003e2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e2e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f004 fed7 	bl	8008be4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	4a0a      	ldr	r2, [pc, #40]	; (8003e64 <PCD_EP_OutSetupPacket_int+0x88>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d90c      	bls.n	8003e58 <PCD_EP_OutSetupPacket_int+0x7c>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d108      	bne.n	8003e58 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6818      	ldr	r0, [r3, #0]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003e50:	461a      	mov	r2, r3
 8003e52:	2101      	movs	r1, #1
 8003e54:	f002 fc12 	bl	800667c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3718      	adds	r7, #24
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	4f54300a 	.word	0x4f54300a

08003e68 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b085      	sub	sp, #20
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	460b      	mov	r3, r1
 8003e72:	70fb      	strb	r3, [r7, #3]
 8003e74:	4613      	mov	r3, r2
 8003e76:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003e80:	78fb      	ldrb	r3, [r7, #3]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d107      	bne.n	8003e96 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003e86:	883b      	ldrh	r3, [r7, #0]
 8003e88:	0419      	lsls	r1, r3, #16
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	68ba      	ldr	r2, [r7, #8]
 8003e90:	430a      	orrs	r2, r1
 8003e92:	629a      	str	r2, [r3, #40]	; 0x28
 8003e94:	e028      	b.n	8003ee8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e9c:	0c1b      	lsrs	r3, r3, #16
 8003e9e:	68ba      	ldr	r2, [r7, #8]
 8003ea0:	4413      	add	r3, r2
 8003ea2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	73fb      	strb	r3, [r7, #15]
 8003ea8:	e00d      	b.n	8003ec6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	7bfb      	ldrb	r3, [r7, #15]
 8003eb0:	3340      	adds	r3, #64	; 0x40
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	4413      	add	r3, r2
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	0c1b      	lsrs	r3, r3, #16
 8003eba:	68ba      	ldr	r2, [r7, #8]
 8003ebc:	4413      	add	r3, r2
 8003ebe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003ec0:	7bfb      	ldrb	r3, [r7, #15]
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	73fb      	strb	r3, [r7, #15]
 8003ec6:	7bfa      	ldrb	r2, [r7, #15]
 8003ec8:	78fb      	ldrb	r3, [r7, #3]
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d3ec      	bcc.n	8003eaa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003ed0:	883b      	ldrh	r3, [r7, #0]
 8003ed2:	0418      	lsls	r0, r3, #16
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6819      	ldr	r1, [r3, #0]
 8003ed8:	78fb      	ldrb	r3, [r7, #3]
 8003eda:	3b01      	subs	r3, #1
 8003edc:	68ba      	ldr	r2, [r7, #8]
 8003ede:	4302      	orrs	r2, r0
 8003ee0:	3340      	adds	r3, #64	; 0x40
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	440b      	add	r3, r1
 8003ee6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003ee8:	2300      	movs	r3, #0
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3714      	adds	r7, #20
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr

08003ef6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003ef6:	b480      	push	{r7}
 8003ef8:	b083      	sub	sp, #12
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	6078      	str	r0, [r7, #4]
 8003efe:	460b      	mov	r3, r1
 8003f00:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	887a      	ldrh	r2, [r7, #2]
 8003f08:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003f0a:	2300      	movs	r3, #0
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	370c      	adds	r7, #12
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr

08003f18 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	460b      	mov	r3, r1
 8003f22:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003f24:	bf00      	nop
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b086      	sub	sp, #24
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d101      	bne.n	8003f42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e267      	b.n	8004412 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0301 	and.w	r3, r3, #1
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d075      	beq.n	800403a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f4e:	4b88      	ldr	r3, [pc, #544]	; (8004170 <HAL_RCC_OscConfig+0x240>)
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	f003 030c 	and.w	r3, r3, #12
 8003f56:	2b04      	cmp	r3, #4
 8003f58:	d00c      	beq.n	8003f74 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f5a:	4b85      	ldr	r3, [pc, #532]	; (8004170 <HAL_RCC_OscConfig+0x240>)
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f62:	2b08      	cmp	r3, #8
 8003f64:	d112      	bne.n	8003f8c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f66:	4b82      	ldr	r3, [pc, #520]	; (8004170 <HAL_RCC_OscConfig+0x240>)
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f72:	d10b      	bne.n	8003f8c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f74:	4b7e      	ldr	r3, [pc, #504]	; (8004170 <HAL_RCC_OscConfig+0x240>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d05b      	beq.n	8004038 <HAL_RCC_OscConfig+0x108>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d157      	bne.n	8004038 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e242      	b.n	8004412 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f94:	d106      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x74>
 8003f96:	4b76      	ldr	r3, [pc, #472]	; (8004170 <HAL_RCC_OscConfig+0x240>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a75      	ldr	r2, [pc, #468]	; (8004170 <HAL_RCC_OscConfig+0x240>)
 8003f9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fa0:	6013      	str	r3, [r2, #0]
 8003fa2:	e01d      	b.n	8003fe0 <HAL_RCC_OscConfig+0xb0>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fac:	d10c      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x98>
 8003fae:	4b70      	ldr	r3, [pc, #448]	; (8004170 <HAL_RCC_OscConfig+0x240>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a6f      	ldr	r2, [pc, #444]	; (8004170 <HAL_RCC_OscConfig+0x240>)
 8003fb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fb8:	6013      	str	r3, [r2, #0]
 8003fba:	4b6d      	ldr	r3, [pc, #436]	; (8004170 <HAL_RCC_OscConfig+0x240>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a6c      	ldr	r2, [pc, #432]	; (8004170 <HAL_RCC_OscConfig+0x240>)
 8003fc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fc4:	6013      	str	r3, [r2, #0]
 8003fc6:	e00b      	b.n	8003fe0 <HAL_RCC_OscConfig+0xb0>
 8003fc8:	4b69      	ldr	r3, [pc, #420]	; (8004170 <HAL_RCC_OscConfig+0x240>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a68      	ldr	r2, [pc, #416]	; (8004170 <HAL_RCC_OscConfig+0x240>)
 8003fce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fd2:	6013      	str	r3, [r2, #0]
 8003fd4:	4b66      	ldr	r3, [pc, #408]	; (8004170 <HAL_RCC_OscConfig+0x240>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a65      	ldr	r2, [pc, #404]	; (8004170 <HAL_RCC_OscConfig+0x240>)
 8003fda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d013      	beq.n	8004010 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fe8:	f7fd fcfa 	bl	80019e0 <HAL_GetTick>
 8003fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fee:	e008      	b.n	8004002 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ff0:	f7fd fcf6 	bl	80019e0 <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	2b64      	cmp	r3, #100	; 0x64
 8003ffc:	d901      	bls.n	8004002 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e207      	b.n	8004412 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004002:	4b5b      	ldr	r3, [pc, #364]	; (8004170 <HAL_RCC_OscConfig+0x240>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d0f0      	beq.n	8003ff0 <HAL_RCC_OscConfig+0xc0>
 800400e:	e014      	b.n	800403a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004010:	f7fd fce6 	bl	80019e0 <HAL_GetTick>
 8004014:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004016:	e008      	b.n	800402a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004018:	f7fd fce2 	bl	80019e0 <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	2b64      	cmp	r3, #100	; 0x64
 8004024:	d901      	bls.n	800402a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e1f3      	b.n	8004412 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800402a:	4b51      	ldr	r3, [pc, #324]	; (8004170 <HAL_RCC_OscConfig+0x240>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d1f0      	bne.n	8004018 <HAL_RCC_OscConfig+0xe8>
 8004036:	e000      	b.n	800403a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004038:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0302 	and.w	r3, r3, #2
 8004042:	2b00      	cmp	r3, #0
 8004044:	d063      	beq.n	800410e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004046:	4b4a      	ldr	r3, [pc, #296]	; (8004170 <HAL_RCC_OscConfig+0x240>)
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	f003 030c 	and.w	r3, r3, #12
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00b      	beq.n	800406a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004052:	4b47      	ldr	r3, [pc, #284]	; (8004170 <HAL_RCC_OscConfig+0x240>)
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800405a:	2b08      	cmp	r3, #8
 800405c:	d11c      	bne.n	8004098 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800405e:	4b44      	ldr	r3, [pc, #272]	; (8004170 <HAL_RCC_OscConfig+0x240>)
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004066:	2b00      	cmp	r3, #0
 8004068:	d116      	bne.n	8004098 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800406a:	4b41      	ldr	r3, [pc, #260]	; (8004170 <HAL_RCC_OscConfig+0x240>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0302 	and.w	r3, r3, #2
 8004072:	2b00      	cmp	r3, #0
 8004074:	d005      	beq.n	8004082 <HAL_RCC_OscConfig+0x152>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	2b01      	cmp	r3, #1
 800407c:	d001      	beq.n	8004082 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e1c7      	b.n	8004412 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004082:	4b3b      	ldr	r3, [pc, #236]	; (8004170 <HAL_RCC_OscConfig+0x240>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	00db      	lsls	r3, r3, #3
 8004090:	4937      	ldr	r1, [pc, #220]	; (8004170 <HAL_RCC_OscConfig+0x240>)
 8004092:	4313      	orrs	r3, r2
 8004094:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004096:	e03a      	b.n	800410e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d020      	beq.n	80040e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040a0:	4b34      	ldr	r3, [pc, #208]	; (8004174 <HAL_RCC_OscConfig+0x244>)
 80040a2:	2201      	movs	r2, #1
 80040a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040a6:	f7fd fc9b 	bl	80019e0 <HAL_GetTick>
 80040aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040ac:	e008      	b.n	80040c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040ae:	f7fd fc97 	bl	80019e0 <HAL_GetTick>
 80040b2:	4602      	mov	r2, r0
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	d901      	bls.n	80040c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	e1a8      	b.n	8004412 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040c0:	4b2b      	ldr	r3, [pc, #172]	; (8004170 <HAL_RCC_OscConfig+0x240>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0302 	and.w	r3, r3, #2
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d0f0      	beq.n	80040ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040cc:	4b28      	ldr	r3, [pc, #160]	; (8004170 <HAL_RCC_OscConfig+0x240>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	691b      	ldr	r3, [r3, #16]
 80040d8:	00db      	lsls	r3, r3, #3
 80040da:	4925      	ldr	r1, [pc, #148]	; (8004170 <HAL_RCC_OscConfig+0x240>)
 80040dc:	4313      	orrs	r3, r2
 80040de:	600b      	str	r3, [r1, #0]
 80040e0:	e015      	b.n	800410e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040e2:	4b24      	ldr	r3, [pc, #144]	; (8004174 <HAL_RCC_OscConfig+0x244>)
 80040e4:	2200      	movs	r2, #0
 80040e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040e8:	f7fd fc7a 	bl	80019e0 <HAL_GetTick>
 80040ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040ee:	e008      	b.n	8004102 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040f0:	f7fd fc76 	bl	80019e0 <HAL_GetTick>
 80040f4:	4602      	mov	r2, r0
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d901      	bls.n	8004102 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	e187      	b.n	8004412 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004102:	4b1b      	ldr	r3, [pc, #108]	; (8004170 <HAL_RCC_OscConfig+0x240>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0302 	and.w	r3, r3, #2
 800410a:	2b00      	cmp	r3, #0
 800410c:	d1f0      	bne.n	80040f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 0308 	and.w	r3, r3, #8
 8004116:	2b00      	cmp	r3, #0
 8004118:	d036      	beq.n	8004188 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	695b      	ldr	r3, [r3, #20]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d016      	beq.n	8004150 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004122:	4b15      	ldr	r3, [pc, #84]	; (8004178 <HAL_RCC_OscConfig+0x248>)
 8004124:	2201      	movs	r2, #1
 8004126:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004128:	f7fd fc5a 	bl	80019e0 <HAL_GetTick>
 800412c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800412e:	e008      	b.n	8004142 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004130:	f7fd fc56 	bl	80019e0 <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	2b02      	cmp	r3, #2
 800413c:	d901      	bls.n	8004142 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e167      	b.n	8004412 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004142:	4b0b      	ldr	r3, [pc, #44]	; (8004170 <HAL_RCC_OscConfig+0x240>)
 8004144:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004146:	f003 0302 	and.w	r3, r3, #2
 800414a:	2b00      	cmp	r3, #0
 800414c:	d0f0      	beq.n	8004130 <HAL_RCC_OscConfig+0x200>
 800414e:	e01b      	b.n	8004188 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004150:	4b09      	ldr	r3, [pc, #36]	; (8004178 <HAL_RCC_OscConfig+0x248>)
 8004152:	2200      	movs	r2, #0
 8004154:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004156:	f7fd fc43 	bl	80019e0 <HAL_GetTick>
 800415a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800415c:	e00e      	b.n	800417c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800415e:	f7fd fc3f 	bl	80019e0 <HAL_GetTick>
 8004162:	4602      	mov	r2, r0
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	2b02      	cmp	r3, #2
 800416a:	d907      	bls.n	800417c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800416c:	2303      	movs	r3, #3
 800416e:	e150      	b.n	8004412 <HAL_RCC_OscConfig+0x4e2>
 8004170:	40023800 	.word	0x40023800
 8004174:	42470000 	.word	0x42470000
 8004178:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800417c:	4b88      	ldr	r3, [pc, #544]	; (80043a0 <HAL_RCC_OscConfig+0x470>)
 800417e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004180:	f003 0302 	and.w	r3, r3, #2
 8004184:	2b00      	cmp	r3, #0
 8004186:	d1ea      	bne.n	800415e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0304 	and.w	r3, r3, #4
 8004190:	2b00      	cmp	r3, #0
 8004192:	f000 8097 	beq.w	80042c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004196:	2300      	movs	r3, #0
 8004198:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800419a:	4b81      	ldr	r3, [pc, #516]	; (80043a0 <HAL_RCC_OscConfig+0x470>)
 800419c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d10f      	bne.n	80041c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041a6:	2300      	movs	r3, #0
 80041a8:	60bb      	str	r3, [r7, #8]
 80041aa:	4b7d      	ldr	r3, [pc, #500]	; (80043a0 <HAL_RCC_OscConfig+0x470>)
 80041ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ae:	4a7c      	ldr	r2, [pc, #496]	; (80043a0 <HAL_RCC_OscConfig+0x470>)
 80041b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041b4:	6413      	str	r3, [r2, #64]	; 0x40
 80041b6:	4b7a      	ldr	r3, [pc, #488]	; (80043a0 <HAL_RCC_OscConfig+0x470>)
 80041b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041be:	60bb      	str	r3, [r7, #8]
 80041c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041c2:	2301      	movs	r3, #1
 80041c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041c6:	4b77      	ldr	r3, [pc, #476]	; (80043a4 <HAL_RCC_OscConfig+0x474>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d118      	bne.n	8004204 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041d2:	4b74      	ldr	r3, [pc, #464]	; (80043a4 <HAL_RCC_OscConfig+0x474>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a73      	ldr	r2, [pc, #460]	; (80043a4 <HAL_RCC_OscConfig+0x474>)
 80041d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041de:	f7fd fbff 	bl	80019e0 <HAL_GetTick>
 80041e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041e4:	e008      	b.n	80041f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041e6:	f7fd fbfb 	bl	80019e0 <HAL_GetTick>
 80041ea:	4602      	mov	r2, r0
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	d901      	bls.n	80041f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80041f4:	2303      	movs	r3, #3
 80041f6:	e10c      	b.n	8004412 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041f8:	4b6a      	ldr	r3, [pc, #424]	; (80043a4 <HAL_RCC_OscConfig+0x474>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004200:	2b00      	cmp	r3, #0
 8004202:	d0f0      	beq.n	80041e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	2b01      	cmp	r3, #1
 800420a:	d106      	bne.n	800421a <HAL_RCC_OscConfig+0x2ea>
 800420c:	4b64      	ldr	r3, [pc, #400]	; (80043a0 <HAL_RCC_OscConfig+0x470>)
 800420e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004210:	4a63      	ldr	r2, [pc, #396]	; (80043a0 <HAL_RCC_OscConfig+0x470>)
 8004212:	f043 0301 	orr.w	r3, r3, #1
 8004216:	6713      	str	r3, [r2, #112]	; 0x70
 8004218:	e01c      	b.n	8004254 <HAL_RCC_OscConfig+0x324>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	2b05      	cmp	r3, #5
 8004220:	d10c      	bne.n	800423c <HAL_RCC_OscConfig+0x30c>
 8004222:	4b5f      	ldr	r3, [pc, #380]	; (80043a0 <HAL_RCC_OscConfig+0x470>)
 8004224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004226:	4a5e      	ldr	r2, [pc, #376]	; (80043a0 <HAL_RCC_OscConfig+0x470>)
 8004228:	f043 0304 	orr.w	r3, r3, #4
 800422c:	6713      	str	r3, [r2, #112]	; 0x70
 800422e:	4b5c      	ldr	r3, [pc, #368]	; (80043a0 <HAL_RCC_OscConfig+0x470>)
 8004230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004232:	4a5b      	ldr	r2, [pc, #364]	; (80043a0 <HAL_RCC_OscConfig+0x470>)
 8004234:	f043 0301 	orr.w	r3, r3, #1
 8004238:	6713      	str	r3, [r2, #112]	; 0x70
 800423a:	e00b      	b.n	8004254 <HAL_RCC_OscConfig+0x324>
 800423c:	4b58      	ldr	r3, [pc, #352]	; (80043a0 <HAL_RCC_OscConfig+0x470>)
 800423e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004240:	4a57      	ldr	r2, [pc, #348]	; (80043a0 <HAL_RCC_OscConfig+0x470>)
 8004242:	f023 0301 	bic.w	r3, r3, #1
 8004246:	6713      	str	r3, [r2, #112]	; 0x70
 8004248:	4b55      	ldr	r3, [pc, #340]	; (80043a0 <HAL_RCC_OscConfig+0x470>)
 800424a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800424c:	4a54      	ldr	r2, [pc, #336]	; (80043a0 <HAL_RCC_OscConfig+0x470>)
 800424e:	f023 0304 	bic.w	r3, r3, #4
 8004252:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d015      	beq.n	8004288 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800425c:	f7fd fbc0 	bl	80019e0 <HAL_GetTick>
 8004260:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004262:	e00a      	b.n	800427a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004264:	f7fd fbbc 	bl	80019e0 <HAL_GetTick>
 8004268:	4602      	mov	r2, r0
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004272:	4293      	cmp	r3, r2
 8004274:	d901      	bls.n	800427a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e0cb      	b.n	8004412 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800427a:	4b49      	ldr	r3, [pc, #292]	; (80043a0 <HAL_RCC_OscConfig+0x470>)
 800427c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800427e:	f003 0302 	and.w	r3, r3, #2
 8004282:	2b00      	cmp	r3, #0
 8004284:	d0ee      	beq.n	8004264 <HAL_RCC_OscConfig+0x334>
 8004286:	e014      	b.n	80042b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004288:	f7fd fbaa 	bl	80019e0 <HAL_GetTick>
 800428c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800428e:	e00a      	b.n	80042a6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004290:	f7fd fba6 	bl	80019e0 <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	f241 3288 	movw	r2, #5000	; 0x1388
 800429e:	4293      	cmp	r3, r2
 80042a0:	d901      	bls.n	80042a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e0b5      	b.n	8004412 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042a6:	4b3e      	ldr	r3, [pc, #248]	; (80043a0 <HAL_RCC_OscConfig+0x470>)
 80042a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042aa:	f003 0302 	and.w	r3, r3, #2
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d1ee      	bne.n	8004290 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042b2:	7dfb      	ldrb	r3, [r7, #23]
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d105      	bne.n	80042c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042b8:	4b39      	ldr	r3, [pc, #228]	; (80043a0 <HAL_RCC_OscConfig+0x470>)
 80042ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042bc:	4a38      	ldr	r2, [pc, #224]	; (80043a0 <HAL_RCC_OscConfig+0x470>)
 80042be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042c2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	699b      	ldr	r3, [r3, #24]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	f000 80a1 	beq.w	8004410 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042ce:	4b34      	ldr	r3, [pc, #208]	; (80043a0 <HAL_RCC_OscConfig+0x470>)
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	f003 030c 	and.w	r3, r3, #12
 80042d6:	2b08      	cmp	r3, #8
 80042d8:	d05c      	beq.n	8004394 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	699b      	ldr	r3, [r3, #24]
 80042de:	2b02      	cmp	r3, #2
 80042e0:	d141      	bne.n	8004366 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042e2:	4b31      	ldr	r3, [pc, #196]	; (80043a8 <HAL_RCC_OscConfig+0x478>)
 80042e4:	2200      	movs	r2, #0
 80042e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042e8:	f7fd fb7a 	bl	80019e0 <HAL_GetTick>
 80042ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042ee:	e008      	b.n	8004302 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042f0:	f7fd fb76 	bl	80019e0 <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d901      	bls.n	8004302 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e087      	b.n	8004412 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004302:	4b27      	ldr	r3, [pc, #156]	; (80043a0 <HAL_RCC_OscConfig+0x470>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d1f0      	bne.n	80042f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	69da      	ldr	r2, [r3, #28]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a1b      	ldr	r3, [r3, #32]
 8004316:	431a      	orrs	r2, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431c:	019b      	lsls	r3, r3, #6
 800431e:	431a      	orrs	r2, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004324:	085b      	lsrs	r3, r3, #1
 8004326:	3b01      	subs	r3, #1
 8004328:	041b      	lsls	r3, r3, #16
 800432a:	431a      	orrs	r2, r3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004330:	061b      	lsls	r3, r3, #24
 8004332:	491b      	ldr	r1, [pc, #108]	; (80043a0 <HAL_RCC_OscConfig+0x470>)
 8004334:	4313      	orrs	r3, r2
 8004336:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004338:	4b1b      	ldr	r3, [pc, #108]	; (80043a8 <HAL_RCC_OscConfig+0x478>)
 800433a:	2201      	movs	r2, #1
 800433c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800433e:	f7fd fb4f 	bl	80019e0 <HAL_GetTick>
 8004342:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004344:	e008      	b.n	8004358 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004346:	f7fd fb4b 	bl	80019e0 <HAL_GetTick>
 800434a:	4602      	mov	r2, r0
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	2b02      	cmp	r3, #2
 8004352:	d901      	bls.n	8004358 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004354:	2303      	movs	r3, #3
 8004356:	e05c      	b.n	8004412 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004358:	4b11      	ldr	r3, [pc, #68]	; (80043a0 <HAL_RCC_OscConfig+0x470>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004360:	2b00      	cmp	r3, #0
 8004362:	d0f0      	beq.n	8004346 <HAL_RCC_OscConfig+0x416>
 8004364:	e054      	b.n	8004410 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004366:	4b10      	ldr	r3, [pc, #64]	; (80043a8 <HAL_RCC_OscConfig+0x478>)
 8004368:	2200      	movs	r2, #0
 800436a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800436c:	f7fd fb38 	bl	80019e0 <HAL_GetTick>
 8004370:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004372:	e008      	b.n	8004386 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004374:	f7fd fb34 	bl	80019e0 <HAL_GetTick>
 8004378:	4602      	mov	r2, r0
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	2b02      	cmp	r3, #2
 8004380:	d901      	bls.n	8004386 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e045      	b.n	8004412 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004386:	4b06      	ldr	r3, [pc, #24]	; (80043a0 <HAL_RCC_OscConfig+0x470>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800438e:	2b00      	cmp	r3, #0
 8004390:	d1f0      	bne.n	8004374 <HAL_RCC_OscConfig+0x444>
 8004392:	e03d      	b.n	8004410 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	699b      	ldr	r3, [r3, #24]
 8004398:	2b01      	cmp	r3, #1
 800439a:	d107      	bne.n	80043ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	e038      	b.n	8004412 <HAL_RCC_OscConfig+0x4e2>
 80043a0:	40023800 	.word	0x40023800
 80043a4:	40007000 	.word	0x40007000
 80043a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80043ac:	4b1b      	ldr	r3, [pc, #108]	; (800441c <HAL_RCC_OscConfig+0x4ec>)
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	699b      	ldr	r3, [r3, #24]
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d028      	beq.n	800440c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d121      	bne.n	800440c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d11a      	bne.n	800440c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043d6:	68fa      	ldr	r2, [r7, #12]
 80043d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80043dc:	4013      	ands	r3, r2
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80043e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d111      	bne.n	800440c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043f2:	085b      	lsrs	r3, r3, #1
 80043f4:	3b01      	subs	r3, #1
 80043f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d107      	bne.n	800440c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004406:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004408:	429a      	cmp	r2, r3
 800440a:	d001      	beq.n	8004410 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e000      	b.n	8004412 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	3718      	adds	r7, #24
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	40023800 	.word	0x40023800

08004420 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b084      	sub	sp, #16
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d101      	bne.n	8004434 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e0cc      	b.n	80045ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004434:	4b68      	ldr	r3, [pc, #416]	; (80045d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0307 	and.w	r3, r3, #7
 800443c:	683a      	ldr	r2, [r7, #0]
 800443e:	429a      	cmp	r2, r3
 8004440:	d90c      	bls.n	800445c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004442:	4b65      	ldr	r3, [pc, #404]	; (80045d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004444:	683a      	ldr	r2, [r7, #0]
 8004446:	b2d2      	uxtb	r2, r2
 8004448:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800444a:	4b63      	ldr	r3, [pc, #396]	; (80045d8 <HAL_RCC_ClockConfig+0x1b8>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 0307 	and.w	r3, r3, #7
 8004452:	683a      	ldr	r2, [r7, #0]
 8004454:	429a      	cmp	r2, r3
 8004456:	d001      	beq.n	800445c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e0b8      	b.n	80045ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0302 	and.w	r3, r3, #2
 8004464:	2b00      	cmp	r3, #0
 8004466:	d020      	beq.n	80044aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0304 	and.w	r3, r3, #4
 8004470:	2b00      	cmp	r3, #0
 8004472:	d005      	beq.n	8004480 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004474:	4b59      	ldr	r3, [pc, #356]	; (80045dc <HAL_RCC_ClockConfig+0x1bc>)
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	4a58      	ldr	r2, [pc, #352]	; (80045dc <HAL_RCC_ClockConfig+0x1bc>)
 800447a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800447e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 0308 	and.w	r3, r3, #8
 8004488:	2b00      	cmp	r3, #0
 800448a:	d005      	beq.n	8004498 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800448c:	4b53      	ldr	r3, [pc, #332]	; (80045dc <HAL_RCC_ClockConfig+0x1bc>)
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	4a52      	ldr	r2, [pc, #328]	; (80045dc <HAL_RCC_ClockConfig+0x1bc>)
 8004492:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004496:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004498:	4b50      	ldr	r3, [pc, #320]	; (80045dc <HAL_RCC_ClockConfig+0x1bc>)
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	494d      	ldr	r1, [pc, #308]	; (80045dc <HAL_RCC_ClockConfig+0x1bc>)
 80044a6:	4313      	orrs	r3, r2
 80044a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0301 	and.w	r3, r3, #1
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d044      	beq.n	8004540 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d107      	bne.n	80044ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044be:	4b47      	ldr	r3, [pc, #284]	; (80045dc <HAL_RCC_ClockConfig+0x1bc>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d119      	bne.n	80044fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e07f      	b.n	80045ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	d003      	beq.n	80044de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044da:	2b03      	cmp	r3, #3
 80044dc:	d107      	bne.n	80044ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044de:	4b3f      	ldr	r3, [pc, #252]	; (80045dc <HAL_RCC_ClockConfig+0x1bc>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d109      	bne.n	80044fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e06f      	b.n	80045ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044ee:	4b3b      	ldr	r3, [pc, #236]	; (80045dc <HAL_RCC_ClockConfig+0x1bc>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 0302 	and.w	r3, r3, #2
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d101      	bne.n	80044fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e067      	b.n	80045ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044fe:	4b37      	ldr	r3, [pc, #220]	; (80045dc <HAL_RCC_ClockConfig+0x1bc>)
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	f023 0203 	bic.w	r2, r3, #3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	4934      	ldr	r1, [pc, #208]	; (80045dc <HAL_RCC_ClockConfig+0x1bc>)
 800450c:	4313      	orrs	r3, r2
 800450e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004510:	f7fd fa66 	bl	80019e0 <HAL_GetTick>
 8004514:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004516:	e00a      	b.n	800452e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004518:	f7fd fa62 	bl	80019e0 <HAL_GetTick>
 800451c:	4602      	mov	r2, r0
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	f241 3288 	movw	r2, #5000	; 0x1388
 8004526:	4293      	cmp	r3, r2
 8004528:	d901      	bls.n	800452e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	e04f      	b.n	80045ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800452e:	4b2b      	ldr	r3, [pc, #172]	; (80045dc <HAL_RCC_ClockConfig+0x1bc>)
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	f003 020c 	and.w	r2, r3, #12
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	429a      	cmp	r2, r3
 800453e:	d1eb      	bne.n	8004518 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004540:	4b25      	ldr	r3, [pc, #148]	; (80045d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0307 	and.w	r3, r3, #7
 8004548:	683a      	ldr	r2, [r7, #0]
 800454a:	429a      	cmp	r2, r3
 800454c:	d20c      	bcs.n	8004568 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800454e:	4b22      	ldr	r3, [pc, #136]	; (80045d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004550:	683a      	ldr	r2, [r7, #0]
 8004552:	b2d2      	uxtb	r2, r2
 8004554:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004556:	4b20      	ldr	r3, [pc, #128]	; (80045d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0307 	and.w	r3, r3, #7
 800455e:	683a      	ldr	r2, [r7, #0]
 8004560:	429a      	cmp	r2, r3
 8004562:	d001      	beq.n	8004568 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e032      	b.n	80045ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0304 	and.w	r3, r3, #4
 8004570:	2b00      	cmp	r3, #0
 8004572:	d008      	beq.n	8004586 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004574:	4b19      	ldr	r3, [pc, #100]	; (80045dc <HAL_RCC_ClockConfig+0x1bc>)
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	4916      	ldr	r1, [pc, #88]	; (80045dc <HAL_RCC_ClockConfig+0x1bc>)
 8004582:	4313      	orrs	r3, r2
 8004584:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0308 	and.w	r3, r3, #8
 800458e:	2b00      	cmp	r3, #0
 8004590:	d009      	beq.n	80045a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004592:	4b12      	ldr	r3, [pc, #72]	; (80045dc <HAL_RCC_ClockConfig+0x1bc>)
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	00db      	lsls	r3, r3, #3
 80045a0:	490e      	ldr	r1, [pc, #56]	; (80045dc <HAL_RCC_ClockConfig+0x1bc>)
 80045a2:	4313      	orrs	r3, r2
 80045a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80045a6:	f000 f821 	bl	80045ec <HAL_RCC_GetSysClockFreq>
 80045aa:	4602      	mov	r2, r0
 80045ac:	4b0b      	ldr	r3, [pc, #44]	; (80045dc <HAL_RCC_ClockConfig+0x1bc>)
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	091b      	lsrs	r3, r3, #4
 80045b2:	f003 030f 	and.w	r3, r3, #15
 80045b6:	490a      	ldr	r1, [pc, #40]	; (80045e0 <HAL_RCC_ClockConfig+0x1c0>)
 80045b8:	5ccb      	ldrb	r3, [r1, r3]
 80045ba:	fa22 f303 	lsr.w	r3, r2, r3
 80045be:	4a09      	ldr	r2, [pc, #36]	; (80045e4 <HAL_RCC_ClockConfig+0x1c4>)
 80045c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80045c2:	4b09      	ldr	r3, [pc, #36]	; (80045e8 <HAL_RCC_ClockConfig+0x1c8>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4618      	mov	r0, r3
 80045c8:	f7fd f9c6 	bl	8001958 <HAL_InitTick>

  return HAL_OK;
 80045cc:	2300      	movs	r3, #0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3710      	adds	r7, #16
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	40023c00 	.word	0x40023c00
 80045dc:	40023800 	.word	0x40023800
 80045e0:	08009c18 	.word	0x08009c18
 80045e4:	20000000 	.word	0x20000000
 80045e8:	20000004 	.word	0x20000004

080045ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045f0:	b094      	sub	sp, #80	; 0x50
 80045f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80045f4:	2300      	movs	r3, #0
 80045f6:	647b      	str	r3, [r7, #68]	; 0x44
 80045f8:	2300      	movs	r3, #0
 80045fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045fc:	2300      	movs	r3, #0
 80045fe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004600:	2300      	movs	r3, #0
 8004602:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004604:	4b79      	ldr	r3, [pc, #484]	; (80047ec <HAL_RCC_GetSysClockFreq+0x200>)
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	f003 030c 	and.w	r3, r3, #12
 800460c:	2b08      	cmp	r3, #8
 800460e:	d00d      	beq.n	800462c <HAL_RCC_GetSysClockFreq+0x40>
 8004610:	2b08      	cmp	r3, #8
 8004612:	f200 80e1 	bhi.w	80047d8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004616:	2b00      	cmp	r3, #0
 8004618:	d002      	beq.n	8004620 <HAL_RCC_GetSysClockFreq+0x34>
 800461a:	2b04      	cmp	r3, #4
 800461c:	d003      	beq.n	8004626 <HAL_RCC_GetSysClockFreq+0x3a>
 800461e:	e0db      	b.n	80047d8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004620:	4b73      	ldr	r3, [pc, #460]	; (80047f0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004622:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004624:	e0db      	b.n	80047de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004626:	4b73      	ldr	r3, [pc, #460]	; (80047f4 <HAL_RCC_GetSysClockFreq+0x208>)
 8004628:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800462a:	e0d8      	b.n	80047de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800462c:	4b6f      	ldr	r3, [pc, #444]	; (80047ec <HAL_RCC_GetSysClockFreq+0x200>)
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004634:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004636:	4b6d      	ldr	r3, [pc, #436]	; (80047ec <HAL_RCC_GetSysClockFreq+0x200>)
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d063      	beq.n	800470a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004642:	4b6a      	ldr	r3, [pc, #424]	; (80047ec <HAL_RCC_GetSysClockFreq+0x200>)
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	099b      	lsrs	r3, r3, #6
 8004648:	2200      	movs	r2, #0
 800464a:	63bb      	str	r3, [r7, #56]	; 0x38
 800464c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800464e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004650:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004654:	633b      	str	r3, [r7, #48]	; 0x30
 8004656:	2300      	movs	r3, #0
 8004658:	637b      	str	r3, [r7, #52]	; 0x34
 800465a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800465e:	4622      	mov	r2, r4
 8004660:	462b      	mov	r3, r5
 8004662:	f04f 0000 	mov.w	r0, #0
 8004666:	f04f 0100 	mov.w	r1, #0
 800466a:	0159      	lsls	r1, r3, #5
 800466c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004670:	0150      	lsls	r0, r2, #5
 8004672:	4602      	mov	r2, r0
 8004674:	460b      	mov	r3, r1
 8004676:	4621      	mov	r1, r4
 8004678:	1a51      	subs	r1, r2, r1
 800467a:	6139      	str	r1, [r7, #16]
 800467c:	4629      	mov	r1, r5
 800467e:	eb63 0301 	sbc.w	r3, r3, r1
 8004682:	617b      	str	r3, [r7, #20]
 8004684:	f04f 0200 	mov.w	r2, #0
 8004688:	f04f 0300 	mov.w	r3, #0
 800468c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004690:	4659      	mov	r1, fp
 8004692:	018b      	lsls	r3, r1, #6
 8004694:	4651      	mov	r1, sl
 8004696:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800469a:	4651      	mov	r1, sl
 800469c:	018a      	lsls	r2, r1, #6
 800469e:	4651      	mov	r1, sl
 80046a0:	ebb2 0801 	subs.w	r8, r2, r1
 80046a4:	4659      	mov	r1, fp
 80046a6:	eb63 0901 	sbc.w	r9, r3, r1
 80046aa:	f04f 0200 	mov.w	r2, #0
 80046ae:	f04f 0300 	mov.w	r3, #0
 80046b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80046b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80046ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80046be:	4690      	mov	r8, r2
 80046c0:	4699      	mov	r9, r3
 80046c2:	4623      	mov	r3, r4
 80046c4:	eb18 0303 	adds.w	r3, r8, r3
 80046c8:	60bb      	str	r3, [r7, #8]
 80046ca:	462b      	mov	r3, r5
 80046cc:	eb49 0303 	adc.w	r3, r9, r3
 80046d0:	60fb      	str	r3, [r7, #12]
 80046d2:	f04f 0200 	mov.w	r2, #0
 80046d6:	f04f 0300 	mov.w	r3, #0
 80046da:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80046de:	4629      	mov	r1, r5
 80046e0:	024b      	lsls	r3, r1, #9
 80046e2:	4621      	mov	r1, r4
 80046e4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80046e8:	4621      	mov	r1, r4
 80046ea:	024a      	lsls	r2, r1, #9
 80046ec:	4610      	mov	r0, r2
 80046ee:	4619      	mov	r1, r3
 80046f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046f2:	2200      	movs	r2, #0
 80046f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80046f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80046f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80046fc:	f7fb fdc0 	bl	8000280 <__aeabi_uldivmod>
 8004700:	4602      	mov	r2, r0
 8004702:	460b      	mov	r3, r1
 8004704:	4613      	mov	r3, r2
 8004706:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004708:	e058      	b.n	80047bc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800470a:	4b38      	ldr	r3, [pc, #224]	; (80047ec <HAL_RCC_GetSysClockFreq+0x200>)
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	099b      	lsrs	r3, r3, #6
 8004710:	2200      	movs	r2, #0
 8004712:	4618      	mov	r0, r3
 8004714:	4611      	mov	r1, r2
 8004716:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800471a:	623b      	str	r3, [r7, #32]
 800471c:	2300      	movs	r3, #0
 800471e:	627b      	str	r3, [r7, #36]	; 0x24
 8004720:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004724:	4642      	mov	r2, r8
 8004726:	464b      	mov	r3, r9
 8004728:	f04f 0000 	mov.w	r0, #0
 800472c:	f04f 0100 	mov.w	r1, #0
 8004730:	0159      	lsls	r1, r3, #5
 8004732:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004736:	0150      	lsls	r0, r2, #5
 8004738:	4602      	mov	r2, r0
 800473a:	460b      	mov	r3, r1
 800473c:	4641      	mov	r1, r8
 800473e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004742:	4649      	mov	r1, r9
 8004744:	eb63 0b01 	sbc.w	fp, r3, r1
 8004748:	f04f 0200 	mov.w	r2, #0
 800474c:	f04f 0300 	mov.w	r3, #0
 8004750:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004754:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004758:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800475c:	ebb2 040a 	subs.w	r4, r2, sl
 8004760:	eb63 050b 	sbc.w	r5, r3, fp
 8004764:	f04f 0200 	mov.w	r2, #0
 8004768:	f04f 0300 	mov.w	r3, #0
 800476c:	00eb      	lsls	r3, r5, #3
 800476e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004772:	00e2      	lsls	r2, r4, #3
 8004774:	4614      	mov	r4, r2
 8004776:	461d      	mov	r5, r3
 8004778:	4643      	mov	r3, r8
 800477a:	18e3      	adds	r3, r4, r3
 800477c:	603b      	str	r3, [r7, #0]
 800477e:	464b      	mov	r3, r9
 8004780:	eb45 0303 	adc.w	r3, r5, r3
 8004784:	607b      	str	r3, [r7, #4]
 8004786:	f04f 0200 	mov.w	r2, #0
 800478a:	f04f 0300 	mov.w	r3, #0
 800478e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004792:	4629      	mov	r1, r5
 8004794:	028b      	lsls	r3, r1, #10
 8004796:	4621      	mov	r1, r4
 8004798:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800479c:	4621      	mov	r1, r4
 800479e:	028a      	lsls	r2, r1, #10
 80047a0:	4610      	mov	r0, r2
 80047a2:	4619      	mov	r1, r3
 80047a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047a6:	2200      	movs	r2, #0
 80047a8:	61bb      	str	r3, [r7, #24]
 80047aa:	61fa      	str	r2, [r7, #28]
 80047ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047b0:	f7fb fd66 	bl	8000280 <__aeabi_uldivmod>
 80047b4:	4602      	mov	r2, r0
 80047b6:	460b      	mov	r3, r1
 80047b8:	4613      	mov	r3, r2
 80047ba:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80047bc:	4b0b      	ldr	r3, [pc, #44]	; (80047ec <HAL_RCC_GetSysClockFreq+0x200>)
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	0c1b      	lsrs	r3, r3, #16
 80047c2:	f003 0303 	and.w	r3, r3, #3
 80047c6:	3301      	adds	r3, #1
 80047c8:	005b      	lsls	r3, r3, #1
 80047ca:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80047cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80047ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80047d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80047d6:	e002      	b.n	80047de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80047d8:	4b05      	ldr	r3, [pc, #20]	; (80047f0 <HAL_RCC_GetSysClockFreq+0x204>)
 80047da:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80047dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3750      	adds	r7, #80	; 0x50
 80047e4:	46bd      	mov	sp, r7
 80047e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047ea:	bf00      	nop
 80047ec:	40023800 	.word	0x40023800
 80047f0:	00f42400 	.word	0x00f42400
 80047f4:	007a1200 	.word	0x007a1200

080047f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047f8:	b480      	push	{r7}
 80047fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047fc:	4b03      	ldr	r3, [pc, #12]	; (800480c <HAL_RCC_GetHCLKFreq+0x14>)
 80047fe:	681b      	ldr	r3, [r3, #0]
}
 8004800:	4618      	mov	r0, r3
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr
 800480a:	bf00      	nop
 800480c:	20000000 	.word	0x20000000

08004810 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004814:	f7ff fff0 	bl	80047f8 <HAL_RCC_GetHCLKFreq>
 8004818:	4602      	mov	r2, r0
 800481a:	4b05      	ldr	r3, [pc, #20]	; (8004830 <HAL_RCC_GetPCLK1Freq+0x20>)
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	0a9b      	lsrs	r3, r3, #10
 8004820:	f003 0307 	and.w	r3, r3, #7
 8004824:	4903      	ldr	r1, [pc, #12]	; (8004834 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004826:	5ccb      	ldrb	r3, [r1, r3]
 8004828:	fa22 f303 	lsr.w	r3, r2, r3
}
 800482c:	4618      	mov	r0, r3
 800482e:	bd80      	pop	{r7, pc}
 8004830:	40023800 	.word	0x40023800
 8004834:	08009c28 	.word	0x08009c28

08004838 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800483c:	f7ff ffdc 	bl	80047f8 <HAL_RCC_GetHCLKFreq>
 8004840:	4602      	mov	r2, r0
 8004842:	4b05      	ldr	r3, [pc, #20]	; (8004858 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	0b5b      	lsrs	r3, r3, #13
 8004848:	f003 0307 	and.w	r3, r3, #7
 800484c:	4903      	ldr	r1, [pc, #12]	; (800485c <HAL_RCC_GetPCLK2Freq+0x24>)
 800484e:	5ccb      	ldrb	r3, [r1, r3]
 8004850:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004854:	4618      	mov	r0, r3
 8004856:	bd80      	pop	{r7, pc}
 8004858:	40023800 	.word	0x40023800
 800485c:	08009c28 	.word	0x08009c28

08004860 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b082      	sub	sp, #8
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d101      	bne.n	8004872 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e07b      	b.n	800496a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004876:	2b00      	cmp	r3, #0
 8004878:	d108      	bne.n	800488c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004882:	d009      	beq.n	8004898 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	61da      	str	r2, [r3, #28]
 800488a:	e005      	b.n	8004898 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d106      	bne.n	80048b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f7fc f9f0 	bl	8000c98 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2202      	movs	r2, #2
 80048bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048ce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80048e0:	431a      	orrs	r2, r3
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048ea:	431a      	orrs	r2, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	691b      	ldr	r3, [r3, #16]
 80048f0:	f003 0302 	and.w	r3, r3, #2
 80048f4:	431a      	orrs	r2, r3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	695b      	ldr	r3, [r3, #20]
 80048fa:	f003 0301 	and.w	r3, r3, #1
 80048fe:	431a      	orrs	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	699b      	ldr	r3, [r3, #24]
 8004904:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004908:	431a      	orrs	r2, r3
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	69db      	ldr	r3, [r3, #28]
 800490e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004912:	431a      	orrs	r2, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6a1b      	ldr	r3, [r3, #32]
 8004918:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800491c:	ea42 0103 	orr.w	r1, r2, r3
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004924:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	430a      	orrs	r2, r1
 800492e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	699b      	ldr	r3, [r3, #24]
 8004934:	0c1b      	lsrs	r3, r3, #16
 8004936:	f003 0104 	and.w	r1, r3, #4
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493e:	f003 0210 	and.w	r2, r3, #16
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	430a      	orrs	r2, r1
 8004948:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	69da      	ldr	r2, [r3, #28]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004958:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004968:	2300      	movs	r3, #0
}
 800496a:	4618      	mov	r0, r3
 800496c:	3708      	adds	r7, #8
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}

08004972 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8004972:	b580      	push	{r7, lr}
 8004974:	b082      	sub	sp, #8
 8004976:	af00      	add	r7, sp, #0
 8004978:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d101      	bne.n	8004984 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	e047      	b.n	8004a14 <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800498a:	b2db      	uxtb	r3, r3
 800498c:	2b00      	cmp	r3, #0
 800498e:	d106      	bne.n	800499e <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f7fc f9c5 	bl	8000d28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2224      	movs	r2, #36	; 0x24
 80049a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	68da      	ldr	r2, [r3, #12]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80049b4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 f830 	bl	8004a1c <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	691a      	ldr	r2, [r3, #16]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80049ca:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	695a      	ldr	r2, [r3, #20]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80049da:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	695a      	ldr	r2, [r3, #20]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f042 0208 	orr.w	r2, r2, #8
 80049ea:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	68da      	ldr	r2, [r3, #12]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80049fa:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2220      	movs	r2, #32
 8004a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2220      	movs	r2, #32
 8004a0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004a12:	2300      	movs	r3, #0
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3708      	adds	r7, #8
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}

08004a1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a20:	b0c0      	sub	sp, #256	; 0x100
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	691b      	ldr	r3, [r3, #16]
 8004a30:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a38:	68d9      	ldr	r1, [r3, #12]
 8004a3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	ea40 0301 	orr.w	r3, r0, r1
 8004a44:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004a46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a4a:	689a      	ldr	r2, [r3, #8]
 8004a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a50:	691b      	ldr	r3, [r3, #16]
 8004a52:	431a      	orrs	r2, r3
 8004a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a58:	695b      	ldr	r3, [r3, #20]
 8004a5a:	431a      	orrs	r2, r3
 8004a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a60:	69db      	ldr	r3, [r3, #28]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004a74:	f021 010c 	bic.w	r1, r1, #12
 8004a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004a82:	430b      	orrs	r3, r1
 8004a84:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	695b      	ldr	r3, [r3, #20]
 8004a8e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004a92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a96:	6999      	ldr	r1, [r3, #24]
 8004a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	ea40 0301 	orr.w	r3, r0, r1
 8004aa2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	4b8f      	ldr	r3, [pc, #572]	; (8004ce8 <UART_SetConfig+0x2cc>)
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d005      	beq.n	8004abc <UART_SetConfig+0xa0>
 8004ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	4b8d      	ldr	r3, [pc, #564]	; (8004cec <UART_SetConfig+0x2d0>)
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d104      	bne.n	8004ac6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004abc:	f7ff febc 	bl	8004838 <HAL_RCC_GetPCLK2Freq>
 8004ac0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004ac4:	e003      	b.n	8004ace <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004ac6:	f7ff fea3 	bl	8004810 <HAL_RCC_GetPCLK1Freq>
 8004aca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ad2:	69db      	ldr	r3, [r3, #28]
 8004ad4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ad8:	f040 810c 	bne.w	8004cf4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004adc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004ae6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004aea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004aee:	4622      	mov	r2, r4
 8004af0:	462b      	mov	r3, r5
 8004af2:	1891      	adds	r1, r2, r2
 8004af4:	65b9      	str	r1, [r7, #88]	; 0x58
 8004af6:	415b      	adcs	r3, r3
 8004af8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004afa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004afe:	4621      	mov	r1, r4
 8004b00:	eb12 0801 	adds.w	r8, r2, r1
 8004b04:	4629      	mov	r1, r5
 8004b06:	eb43 0901 	adc.w	r9, r3, r1
 8004b0a:	f04f 0200 	mov.w	r2, #0
 8004b0e:	f04f 0300 	mov.w	r3, #0
 8004b12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b1e:	4690      	mov	r8, r2
 8004b20:	4699      	mov	r9, r3
 8004b22:	4623      	mov	r3, r4
 8004b24:	eb18 0303 	adds.w	r3, r8, r3
 8004b28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004b2c:	462b      	mov	r3, r5
 8004b2e:	eb49 0303 	adc.w	r3, r9, r3
 8004b32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004b36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004b42:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004b46:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004b4a:	460b      	mov	r3, r1
 8004b4c:	18db      	adds	r3, r3, r3
 8004b4e:	653b      	str	r3, [r7, #80]	; 0x50
 8004b50:	4613      	mov	r3, r2
 8004b52:	eb42 0303 	adc.w	r3, r2, r3
 8004b56:	657b      	str	r3, [r7, #84]	; 0x54
 8004b58:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004b5c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004b60:	f7fb fb8e 	bl	8000280 <__aeabi_uldivmod>
 8004b64:	4602      	mov	r2, r0
 8004b66:	460b      	mov	r3, r1
 8004b68:	4b61      	ldr	r3, [pc, #388]	; (8004cf0 <UART_SetConfig+0x2d4>)
 8004b6a:	fba3 2302 	umull	r2, r3, r3, r2
 8004b6e:	095b      	lsrs	r3, r3, #5
 8004b70:	011c      	lsls	r4, r3, #4
 8004b72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b76:	2200      	movs	r2, #0
 8004b78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b7c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004b80:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004b84:	4642      	mov	r2, r8
 8004b86:	464b      	mov	r3, r9
 8004b88:	1891      	adds	r1, r2, r2
 8004b8a:	64b9      	str	r1, [r7, #72]	; 0x48
 8004b8c:	415b      	adcs	r3, r3
 8004b8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b90:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004b94:	4641      	mov	r1, r8
 8004b96:	eb12 0a01 	adds.w	sl, r2, r1
 8004b9a:	4649      	mov	r1, r9
 8004b9c:	eb43 0b01 	adc.w	fp, r3, r1
 8004ba0:	f04f 0200 	mov.w	r2, #0
 8004ba4:	f04f 0300 	mov.w	r3, #0
 8004ba8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004bac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004bb0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004bb4:	4692      	mov	sl, r2
 8004bb6:	469b      	mov	fp, r3
 8004bb8:	4643      	mov	r3, r8
 8004bba:	eb1a 0303 	adds.w	r3, sl, r3
 8004bbe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004bc2:	464b      	mov	r3, r9
 8004bc4:	eb4b 0303 	adc.w	r3, fp, r3
 8004bc8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004bd8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004bdc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004be0:	460b      	mov	r3, r1
 8004be2:	18db      	adds	r3, r3, r3
 8004be4:	643b      	str	r3, [r7, #64]	; 0x40
 8004be6:	4613      	mov	r3, r2
 8004be8:	eb42 0303 	adc.w	r3, r2, r3
 8004bec:	647b      	str	r3, [r7, #68]	; 0x44
 8004bee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004bf2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004bf6:	f7fb fb43 	bl	8000280 <__aeabi_uldivmod>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	460b      	mov	r3, r1
 8004bfe:	4611      	mov	r1, r2
 8004c00:	4b3b      	ldr	r3, [pc, #236]	; (8004cf0 <UART_SetConfig+0x2d4>)
 8004c02:	fba3 2301 	umull	r2, r3, r3, r1
 8004c06:	095b      	lsrs	r3, r3, #5
 8004c08:	2264      	movs	r2, #100	; 0x64
 8004c0a:	fb02 f303 	mul.w	r3, r2, r3
 8004c0e:	1acb      	subs	r3, r1, r3
 8004c10:	00db      	lsls	r3, r3, #3
 8004c12:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004c16:	4b36      	ldr	r3, [pc, #216]	; (8004cf0 <UART_SetConfig+0x2d4>)
 8004c18:	fba3 2302 	umull	r2, r3, r3, r2
 8004c1c:	095b      	lsrs	r3, r3, #5
 8004c1e:	005b      	lsls	r3, r3, #1
 8004c20:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004c24:	441c      	add	r4, r3
 8004c26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c30:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004c34:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004c38:	4642      	mov	r2, r8
 8004c3a:	464b      	mov	r3, r9
 8004c3c:	1891      	adds	r1, r2, r2
 8004c3e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004c40:	415b      	adcs	r3, r3
 8004c42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c44:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004c48:	4641      	mov	r1, r8
 8004c4a:	1851      	adds	r1, r2, r1
 8004c4c:	6339      	str	r1, [r7, #48]	; 0x30
 8004c4e:	4649      	mov	r1, r9
 8004c50:	414b      	adcs	r3, r1
 8004c52:	637b      	str	r3, [r7, #52]	; 0x34
 8004c54:	f04f 0200 	mov.w	r2, #0
 8004c58:	f04f 0300 	mov.w	r3, #0
 8004c5c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004c60:	4659      	mov	r1, fp
 8004c62:	00cb      	lsls	r3, r1, #3
 8004c64:	4651      	mov	r1, sl
 8004c66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c6a:	4651      	mov	r1, sl
 8004c6c:	00ca      	lsls	r2, r1, #3
 8004c6e:	4610      	mov	r0, r2
 8004c70:	4619      	mov	r1, r3
 8004c72:	4603      	mov	r3, r0
 8004c74:	4642      	mov	r2, r8
 8004c76:	189b      	adds	r3, r3, r2
 8004c78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c7c:	464b      	mov	r3, r9
 8004c7e:	460a      	mov	r2, r1
 8004c80:	eb42 0303 	adc.w	r3, r2, r3
 8004c84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004c94:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004c98:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004c9c:	460b      	mov	r3, r1
 8004c9e:	18db      	adds	r3, r3, r3
 8004ca0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ca2:	4613      	mov	r3, r2
 8004ca4:	eb42 0303 	adc.w	r3, r2, r3
 8004ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004caa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004cae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004cb2:	f7fb fae5 	bl	8000280 <__aeabi_uldivmod>
 8004cb6:	4602      	mov	r2, r0
 8004cb8:	460b      	mov	r3, r1
 8004cba:	4b0d      	ldr	r3, [pc, #52]	; (8004cf0 <UART_SetConfig+0x2d4>)
 8004cbc:	fba3 1302 	umull	r1, r3, r3, r2
 8004cc0:	095b      	lsrs	r3, r3, #5
 8004cc2:	2164      	movs	r1, #100	; 0x64
 8004cc4:	fb01 f303 	mul.w	r3, r1, r3
 8004cc8:	1ad3      	subs	r3, r2, r3
 8004cca:	00db      	lsls	r3, r3, #3
 8004ccc:	3332      	adds	r3, #50	; 0x32
 8004cce:	4a08      	ldr	r2, [pc, #32]	; (8004cf0 <UART_SetConfig+0x2d4>)
 8004cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8004cd4:	095b      	lsrs	r3, r3, #5
 8004cd6:	f003 0207 	and.w	r2, r3, #7
 8004cda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4422      	add	r2, r4
 8004ce2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004ce4:	e105      	b.n	8004ef2 <UART_SetConfig+0x4d6>
 8004ce6:	bf00      	nop
 8004ce8:	40011000 	.word	0x40011000
 8004cec:	40011400 	.word	0x40011400
 8004cf0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004cf4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004cfe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004d02:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004d06:	4642      	mov	r2, r8
 8004d08:	464b      	mov	r3, r9
 8004d0a:	1891      	adds	r1, r2, r2
 8004d0c:	6239      	str	r1, [r7, #32]
 8004d0e:	415b      	adcs	r3, r3
 8004d10:	627b      	str	r3, [r7, #36]	; 0x24
 8004d12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004d16:	4641      	mov	r1, r8
 8004d18:	1854      	adds	r4, r2, r1
 8004d1a:	4649      	mov	r1, r9
 8004d1c:	eb43 0501 	adc.w	r5, r3, r1
 8004d20:	f04f 0200 	mov.w	r2, #0
 8004d24:	f04f 0300 	mov.w	r3, #0
 8004d28:	00eb      	lsls	r3, r5, #3
 8004d2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d2e:	00e2      	lsls	r2, r4, #3
 8004d30:	4614      	mov	r4, r2
 8004d32:	461d      	mov	r5, r3
 8004d34:	4643      	mov	r3, r8
 8004d36:	18e3      	adds	r3, r4, r3
 8004d38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004d3c:	464b      	mov	r3, r9
 8004d3e:	eb45 0303 	adc.w	r3, r5, r3
 8004d42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004d46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004d52:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004d56:	f04f 0200 	mov.w	r2, #0
 8004d5a:	f04f 0300 	mov.w	r3, #0
 8004d5e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004d62:	4629      	mov	r1, r5
 8004d64:	008b      	lsls	r3, r1, #2
 8004d66:	4621      	mov	r1, r4
 8004d68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d6c:	4621      	mov	r1, r4
 8004d6e:	008a      	lsls	r2, r1, #2
 8004d70:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004d74:	f7fb fa84 	bl	8000280 <__aeabi_uldivmod>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	460b      	mov	r3, r1
 8004d7c:	4b60      	ldr	r3, [pc, #384]	; (8004f00 <UART_SetConfig+0x4e4>)
 8004d7e:	fba3 2302 	umull	r2, r3, r3, r2
 8004d82:	095b      	lsrs	r3, r3, #5
 8004d84:	011c      	lsls	r4, r3, #4
 8004d86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004d90:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004d94:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004d98:	4642      	mov	r2, r8
 8004d9a:	464b      	mov	r3, r9
 8004d9c:	1891      	adds	r1, r2, r2
 8004d9e:	61b9      	str	r1, [r7, #24]
 8004da0:	415b      	adcs	r3, r3
 8004da2:	61fb      	str	r3, [r7, #28]
 8004da4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004da8:	4641      	mov	r1, r8
 8004daa:	1851      	adds	r1, r2, r1
 8004dac:	6139      	str	r1, [r7, #16]
 8004dae:	4649      	mov	r1, r9
 8004db0:	414b      	adcs	r3, r1
 8004db2:	617b      	str	r3, [r7, #20]
 8004db4:	f04f 0200 	mov.w	r2, #0
 8004db8:	f04f 0300 	mov.w	r3, #0
 8004dbc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004dc0:	4659      	mov	r1, fp
 8004dc2:	00cb      	lsls	r3, r1, #3
 8004dc4:	4651      	mov	r1, sl
 8004dc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004dca:	4651      	mov	r1, sl
 8004dcc:	00ca      	lsls	r2, r1, #3
 8004dce:	4610      	mov	r0, r2
 8004dd0:	4619      	mov	r1, r3
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	4642      	mov	r2, r8
 8004dd6:	189b      	adds	r3, r3, r2
 8004dd8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004ddc:	464b      	mov	r3, r9
 8004dde:	460a      	mov	r2, r1
 8004de0:	eb42 0303 	adc.w	r3, r2, r3
 8004de4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	67bb      	str	r3, [r7, #120]	; 0x78
 8004df2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004df4:	f04f 0200 	mov.w	r2, #0
 8004df8:	f04f 0300 	mov.w	r3, #0
 8004dfc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004e00:	4649      	mov	r1, r9
 8004e02:	008b      	lsls	r3, r1, #2
 8004e04:	4641      	mov	r1, r8
 8004e06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e0a:	4641      	mov	r1, r8
 8004e0c:	008a      	lsls	r2, r1, #2
 8004e0e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004e12:	f7fb fa35 	bl	8000280 <__aeabi_uldivmod>
 8004e16:	4602      	mov	r2, r0
 8004e18:	460b      	mov	r3, r1
 8004e1a:	4b39      	ldr	r3, [pc, #228]	; (8004f00 <UART_SetConfig+0x4e4>)
 8004e1c:	fba3 1302 	umull	r1, r3, r3, r2
 8004e20:	095b      	lsrs	r3, r3, #5
 8004e22:	2164      	movs	r1, #100	; 0x64
 8004e24:	fb01 f303 	mul.w	r3, r1, r3
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	011b      	lsls	r3, r3, #4
 8004e2c:	3332      	adds	r3, #50	; 0x32
 8004e2e:	4a34      	ldr	r2, [pc, #208]	; (8004f00 <UART_SetConfig+0x4e4>)
 8004e30:	fba2 2303 	umull	r2, r3, r2, r3
 8004e34:	095b      	lsrs	r3, r3, #5
 8004e36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e3a:	441c      	add	r4, r3
 8004e3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e40:	2200      	movs	r2, #0
 8004e42:	673b      	str	r3, [r7, #112]	; 0x70
 8004e44:	677a      	str	r2, [r7, #116]	; 0x74
 8004e46:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004e4a:	4642      	mov	r2, r8
 8004e4c:	464b      	mov	r3, r9
 8004e4e:	1891      	adds	r1, r2, r2
 8004e50:	60b9      	str	r1, [r7, #8]
 8004e52:	415b      	adcs	r3, r3
 8004e54:	60fb      	str	r3, [r7, #12]
 8004e56:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e5a:	4641      	mov	r1, r8
 8004e5c:	1851      	adds	r1, r2, r1
 8004e5e:	6039      	str	r1, [r7, #0]
 8004e60:	4649      	mov	r1, r9
 8004e62:	414b      	adcs	r3, r1
 8004e64:	607b      	str	r3, [r7, #4]
 8004e66:	f04f 0200 	mov.w	r2, #0
 8004e6a:	f04f 0300 	mov.w	r3, #0
 8004e6e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004e72:	4659      	mov	r1, fp
 8004e74:	00cb      	lsls	r3, r1, #3
 8004e76:	4651      	mov	r1, sl
 8004e78:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e7c:	4651      	mov	r1, sl
 8004e7e:	00ca      	lsls	r2, r1, #3
 8004e80:	4610      	mov	r0, r2
 8004e82:	4619      	mov	r1, r3
 8004e84:	4603      	mov	r3, r0
 8004e86:	4642      	mov	r2, r8
 8004e88:	189b      	adds	r3, r3, r2
 8004e8a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e8c:	464b      	mov	r3, r9
 8004e8e:	460a      	mov	r2, r1
 8004e90:	eb42 0303 	adc.w	r3, r2, r3
 8004e94:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	663b      	str	r3, [r7, #96]	; 0x60
 8004ea0:	667a      	str	r2, [r7, #100]	; 0x64
 8004ea2:	f04f 0200 	mov.w	r2, #0
 8004ea6:	f04f 0300 	mov.w	r3, #0
 8004eaa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004eae:	4649      	mov	r1, r9
 8004eb0:	008b      	lsls	r3, r1, #2
 8004eb2:	4641      	mov	r1, r8
 8004eb4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004eb8:	4641      	mov	r1, r8
 8004eba:	008a      	lsls	r2, r1, #2
 8004ebc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004ec0:	f7fb f9de 	bl	8000280 <__aeabi_uldivmod>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	460b      	mov	r3, r1
 8004ec8:	4b0d      	ldr	r3, [pc, #52]	; (8004f00 <UART_SetConfig+0x4e4>)
 8004eca:	fba3 1302 	umull	r1, r3, r3, r2
 8004ece:	095b      	lsrs	r3, r3, #5
 8004ed0:	2164      	movs	r1, #100	; 0x64
 8004ed2:	fb01 f303 	mul.w	r3, r1, r3
 8004ed6:	1ad3      	subs	r3, r2, r3
 8004ed8:	011b      	lsls	r3, r3, #4
 8004eda:	3332      	adds	r3, #50	; 0x32
 8004edc:	4a08      	ldr	r2, [pc, #32]	; (8004f00 <UART_SetConfig+0x4e4>)
 8004ede:	fba2 2303 	umull	r2, r3, r2, r3
 8004ee2:	095b      	lsrs	r3, r3, #5
 8004ee4:	f003 020f 	and.w	r2, r3, #15
 8004ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4422      	add	r2, r4
 8004ef0:	609a      	str	r2, [r3, #8]
}
 8004ef2:	bf00      	nop
 8004ef4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004efe:	bf00      	nop
 8004f00:	51eb851f 	.word	0x51eb851f

08004f04 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f04:	b084      	sub	sp, #16
 8004f06:	b580      	push	{r7, lr}
 8004f08:	b084      	sub	sp, #16
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	6078      	str	r0, [r7, #4]
 8004f0e:	f107 001c 	add.w	r0, r7, #28
 8004f12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d122      	bne.n	8004f62 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f20:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004f30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004f44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d105      	bne.n	8004f56 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f001 fbee 	bl	8006738 <USB_CoreReset>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	73fb      	strb	r3, [r7, #15]
 8004f60:	e01a      	b.n	8004f98 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f001 fbe2 	bl	8006738 <USB_CoreReset>
 8004f74:	4603      	mov	r3, r0
 8004f76:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004f78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d106      	bne.n	8004f8c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f82:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	639a      	str	r2, [r3, #56]	; 0x38
 8004f8a:	e005      	b.n	8004f98 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f90:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d10b      	bne.n	8004fb6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	f043 0206 	orr.w	r2, r3, #6
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	f043 0220 	orr.w	r2, r3, #32
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004fb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3710      	adds	r7, #16
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004fc2:	b004      	add	sp, #16
 8004fc4:	4770      	bx	lr
	...

08004fc8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b087      	sub	sp, #28
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	4613      	mov	r3, r2
 8004fd4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004fd6:	79fb      	ldrb	r3, [r7, #7]
 8004fd8:	2b02      	cmp	r3, #2
 8004fda:	d165      	bne.n	80050a8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	4a41      	ldr	r2, [pc, #260]	; (80050e4 <USB_SetTurnaroundTime+0x11c>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d906      	bls.n	8004ff2 <USB_SetTurnaroundTime+0x2a>
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	4a40      	ldr	r2, [pc, #256]	; (80050e8 <USB_SetTurnaroundTime+0x120>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d202      	bcs.n	8004ff2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004fec:	230f      	movs	r3, #15
 8004fee:	617b      	str	r3, [r7, #20]
 8004ff0:	e062      	b.n	80050b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	4a3c      	ldr	r2, [pc, #240]	; (80050e8 <USB_SetTurnaroundTime+0x120>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d306      	bcc.n	8005008 <USB_SetTurnaroundTime+0x40>
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	4a3b      	ldr	r2, [pc, #236]	; (80050ec <USB_SetTurnaroundTime+0x124>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d202      	bcs.n	8005008 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005002:	230e      	movs	r3, #14
 8005004:	617b      	str	r3, [r7, #20]
 8005006:	e057      	b.n	80050b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	4a38      	ldr	r2, [pc, #224]	; (80050ec <USB_SetTurnaroundTime+0x124>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d306      	bcc.n	800501e <USB_SetTurnaroundTime+0x56>
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	4a37      	ldr	r2, [pc, #220]	; (80050f0 <USB_SetTurnaroundTime+0x128>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d202      	bcs.n	800501e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005018:	230d      	movs	r3, #13
 800501a:	617b      	str	r3, [r7, #20]
 800501c:	e04c      	b.n	80050b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	4a33      	ldr	r2, [pc, #204]	; (80050f0 <USB_SetTurnaroundTime+0x128>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d306      	bcc.n	8005034 <USB_SetTurnaroundTime+0x6c>
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	4a32      	ldr	r2, [pc, #200]	; (80050f4 <USB_SetTurnaroundTime+0x12c>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d802      	bhi.n	8005034 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800502e:	230c      	movs	r3, #12
 8005030:	617b      	str	r3, [r7, #20]
 8005032:	e041      	b.n	80050b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	4a2f      	ldr	r2, [pc, #188]	; (80050f4 <USB_SetTurnaroundTime+0x12c>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d906      	bls.n	800504a <USB_SetTurnaroundTime+0x82>
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	4a2e      	ldr	r2, [pc, #184]	; (80050f8 <USB_SetTurnaroundTime+0x130>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d802      	bhi.n	800504a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005044:	230b      	movs	r3, #11
 8005046:	617b      	str	r3, [r7, #20]
 8005048:	e036      	b.n	80050b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	4a2a      	ldr	r2, [pc, #168]	; (80050f8 <USB_SetTurnaroundTime+0x130>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d906      	bls.n	8005060 <USB_SetTurnaroundTime+0x98>
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	4a29      	ldr	r2, [pc, #164]	; (80050fc <USB_SetTurnaroundTime+0x134>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d802      	bhi.n	8005060 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800505a:	230a      	movs	r3, #10
 800505c:	617b      	str	r3, [r7, #20]
 800505e:	e02b      	b.n	80050b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	4a26      	ldr	r2, [pc, #152]	; (80050fc <USB_SetTurnaroundTime+0x134>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d906      	bls.n	8005076 <USB_SetTurnaroundTime+0xae>
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	4a25      	ldr	r2, [pc, #148]	; (8005100 <USB_SetTurnaroundTime+0x138>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d202      	bcs.n	8005076 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005070:	2309      	movs	r3, #9
 8005072:	617b      	str	r3, [r7, #20]
 8005074:	e020      	b.n	80050b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	4a21      	ldr	r2, [pc, #132]	; (8005100 <USB_SetTurnaroundTime+0x138>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d306      	bcc.n	800508c <USB_SetTurnaroundTime+0xc4>
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	4a20      	ldr	r2, [pc, #128]	; (8005104 <USB_SetTurnaroundTime+0x13c>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d802      	bhi.n	800508c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005086:	2308      	movs	r3, #8
 8005088:	617b      	str	r3, [r7, #20]
 800508a:	e015      	b.n	80050b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	4a1d      	ldr	r2, [pc, #116]	; (8005104 <USB_SetTurnaroundTime+0x13c>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d906      	bls.n	80050a2 <USB_SetTurnaroundTime+0xda>
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	4a1c      	ldr	r2, [pc, #112]	; (8005108 <USB_SetTurnaroundTime+0x140>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d202      	bcs.n	80050a2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800509c:	2307      	movs	r3, #7
 800509e:	617b      	str	r3, [r7, #20]
 80050a0:	e00a      	b.n	80050b8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80050a2:	2306      	movs	r3, #6
 80050a4:	617b      	str	r3, [r7, #20]
 80050a6:	e007      	b.n	80050b8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80050a8:	79fb      	ldrb	r3, [r7, #7]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d102      	bne.n	80050b4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80050ae:	2309      	movs	r3, #9
 80050b0:	617b      	str	r3, [r7, #20]
 80050b2:	e001      	b.n	80050b8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80050b4:	2309      	movs	r3, #9
 80050b6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	68da      	ldr	r2, [r3, #12]
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	029b      	lsls	r3, r3, #10
 80050cc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80050d0:	431a      	orrs	r2, r3
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80050d6:	2300      	movs	r3, #0
}
 80050d8:	4618      	mov	r0, r3
 80050da:	371c      	adds	r7, #28
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr
 80050e4:	00d8acbf 	.word	0x00d8acbf
 80050e8:	00e4e1c0 	.word	0x00e4e1c0
 80050ec:	00f42400 	.word	0x00f42400
 80050f0:	01067380 	.word	0x01067380
 80050f4:	011a499f 	.word	0x011a499f
 80050f8:	01312cff 	.word	0x01312cff
 80050fc:	014ca43f 	.word	0x014ca43f
 8005100:	016e3600 	.word	0x016e3600
 8005104:	01a6ab1f 	.word	0x01a6ab1f
 8005108:	01e84800 	.word	0x01e84800

0800510c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800510c:	b480      	push	{r7}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	f043 0201 	orr.w	r2, r3, #1
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005120:	2300      	movs	r3, #0
}
 8005122:	4618      	mov	r0, r3
 8005124:	370c      	adds	r7, #12
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr

0800512e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800512e:	b480      	push	{r7}
 8005130:	b083      	sub	sp, #12
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	f023 0201 	bic.w	r2, r3, #1
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005142:	2300      	movs	r3, #0
}
 8005144:	4618      	mov	r0, r3
 8005146:	370c      	adds	r7, #12
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr

08005150 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b084      	sub	sp, #16
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	460b      	mov	r3, r1
 800515a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800515c:	2300      	movs	r3, #0
 800515e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800516c:	78fb      	ldrb	r3, [r7, #3]
 800516e:	2b01      	cmp	r3, #1
 8005170:	d115      	bne.n	800519e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800517e:	2001      	movs	r0, #1
 8005180:	f7fc fc3a 	bl	80019f8 <HAL_Delay>
      ms++;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	3301      	adds	r3, #1
 8005188:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f001 fa45 	bl	800661a <USB_GetMode>
 8005190:	4603      	mov	r3, r0
 8005192:	2b01      	cmp	r3, #1
 8005194:	d01e      	beq.n	80051d4 <USB_SetCurrentMode+0x84>
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2b31      	cmp	r3, #49	; 0x31
 800519a:	d9f0      	bls.n	800517e <USB_SetCurrentMode+0x2e>
 800519c:	e01a      	b.n	80051d4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800519e:	78fb      	ldrb	r3, [r7, #3]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d115      	bne.n	80051d0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80051b0:	2001      	movs	r0, #1
 80051b2:	f7fc fc21 	bl	80019f8 <HAL_Delay>
      ms++;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	3301      	adds	r3, #1
 80051ba:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f001 fa2c 	bl	800661a <USB_GetMode>
 80051c2:	4603      	mov	r3, r0
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d005      	beq.n	80051d4 <USB_SetCurrentMode+0x84>
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2b31      	cmp	r3, #49	; 0x31
 80051cc:	d9f0      	bls.n	80051b0 <USB_SetCurrentMode+0x60>
 80051ce:	e001      	b.n	80051d4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	e005      	b.n	80051e0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2b32      	cmp	r3, #50	; 0x32
 80051d8:	d101      	bne.n	80051de <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	e000      	b.n	80051e0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80051de:	2300      	movs	r3, #0
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3710      	adds	r7, #16
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}

080051e8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80051e8:	b084      	sub	sp, #16
 80051ea:	b580      	push	{r7, lr}
 80051ec:	b086      	sub	sp, #24
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	6078      	str	r0, [r7, #4]
 80051f2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80051f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80051fa:	2300      	movs	r3, #0
 80051fc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005202:	2300      	movs	r3, #0
 8005204:	613b      	str	r3, [r7, #16]
 8005206:	e009      	b.n	800521c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	3340      	adds	r3, #64	; 0x40
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	4413      	add	r3, r2
 8005212:	2200      	movs	r2, #0
 8005214:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	3301      	adds	r3, #1
 800521a:	613b      	str	r3, [r7, #16]
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	2b0e      	cmp	r3, #14
 8005220:	d9f2      	bls.n	8005208 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005222:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005224:	2b00      	cmp	r3, #0
 8005226:	d11c      	bne.n	8005262 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	68fa      	ldr	r2, [r7, #12]
 8005232:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005236:	f043 0302 	orr.w	r3, r3, #2
 800523a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005240:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800524c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005258:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	639a      	str	r2, [r3, #56]	; 0x38
 8005260:	e00b      	b.n	800527a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005266:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005272:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005280:	461a      	mov	r2, r3
 8005282:	2300      	movs	r3, #0
 8005284:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800528c:	4619      	mov	r1, r3
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005294:	461a      	mov	r2, r3
 8005296:	680b      	ldr	r3, [r1, #0]
 8005298:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800529a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800529c:	2b01      	cmp	r3, #1
 800529e:	d10c      	bne.n	80052ba <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80052a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d104      	bne.n	80052b0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80052a6:	2100      	movs	r1, #0
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f000 f965 	bl	8005578 <USB_SetDevSpeed>
 80052ae:	e008      	b.n	80052c2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80052b0:	2101      	movs	r1, #1
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f000 f960 	bl	8005578 <USB_SetDevSpeed>
 80052b8:	e003      	b.n	80052c2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80052ba:	2103      	movs	r1, #3
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f000 f95b 	bl	8005578 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80052c2:	2110      	movs	r1, #16
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f000 f8f3 	bl	80054b0 <USB_FlushTxFifo>
 80052ca:	4603      	mov	r3, r0
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d001      	beq.n	80052d4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f000 f91f 	bl	8005518 <USB_FlushRxFifo>
 80052da:	4603      	mov	r3, r0
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d001      	beq.n	80052e4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052ea:	461a      	mov	r2, r3
 80052ec:	2300      	movs	r3, #0
 80052ee:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052f6:	461a      	mov	r2, r3
 80052f8:	2300      	movs	r3, #0
 80052fa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005302:	461a      	mov	r2, r3
 8005304:	2300      	movs	r3, #0
 8005306:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005308:	2300      	movs	r3, #0
 800530a:	613b      	str	r3, [r7, #16]
 800530c:	e043      	b.n	8005396 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	015a      	lsls	r2, r3, #5
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	4413      	add	r3, r2
 8005316:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005320:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005324:	d118      	bne.n	8005358 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d10a      	bne.n	8005342 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	015a      	lsls	r2, r3, #5
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	4413      	add	r3, r2
 8005334:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005338:	461a      	mov	r2, r3
 800533a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800533e:	6013      	str	r3, [r2, #0]
 8005340:	e013      	b.n	800536a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	015a      	lsls	r2, r3, #5
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	4413      	add	r3, r2
 800534a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800534e:	461a      	mov	r2, r3
 8005350:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005354:	6013      	str	r3, [r2, #0]
 8005356:	e008      	b.n	800536a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	015a      	lsls	r2, r3, #5
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	4413      	add	r3, r2
 8005360:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005364:	461a      	mov	r2, r3
 8005366:	2300      	movs	r3, #0
 8005368:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	015a      	lsls	r2, r3, #5
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	4413      	add	r3, r2
 8005372:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005376:	461a      	mov	r2, r3
 8005378:	2300      	movs	r3, #0
 800537a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	015a      	lsls	r2, r3, #5
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	4413      	add	r3, r2
 8005384:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005388:	461a      	mov	r2, r3
 800538a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800538e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	3301      	adds	r3, #1
 8005394:	613b      	str	r3, [r7, #16]
 8005396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005398:	693a      	ldr	r2, [r7, #16]
 800539a:	429a      	cmp	r2, r3
 800539c:	d3b7      	bcc.n	800530e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800539e:	2300      	movs	r3, #0
 80053a0:	613b      	str	r3, [r7, #16]
 80053a2:	e043      	b.n	800542c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	015a      	lsls	r2, r3, #5
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	4413      	add	r3, r2
 80053ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053ba:	d118      	bne.n	80053ee <USB_DevInit+0x206>
    {
      if (i == 0U)
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d10a      	bne.n	80053d8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	015a      	lsls	r2, r3, #5
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	4413      	add	r3, r2
 80053ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ce:	461a      	mov	r2, r3
 80053d0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80053d4:	6013      	str	r3, [r2, #0]
 80053d6:	e013      	b.n	8005400 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	015a      	lsls	r2, r3, #5
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	4413      	add	r3, r2
 80053e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053e4:	461a      	mov	r2, r3
 80053e6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80053ea:	6013      	str	r3, [r2, #0]
 80053ec:	e008      	b.n	8005400 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	015a      	lsls	r2, r3, #5
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	4413      	add	r3, r2
 80053f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053fa:	461a      	mov	r2, r3
 80053fc:	2300      	movs	r3, #0
 80053fe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	015a      	lsls	r2, r3, #5
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	4413      	add	r3, r2
 8005408:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800540c:	461a      	mov	r2, r3
 800540e:	2300      	movs	r3, #0
 8005410:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	015a      	lsls	r2, r3, #5
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	4413      	add	r3, r2
 800541a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800541e:	461a      	mov	r2, r3
 8005420:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005424:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	3301      	adds	r3, #1
 800542a:	613b      	str	r3, [r7, #16]
 800542c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542e:	693a      	ldr	r2, [r7, #16]
 8005430:	429a      	cmp	r2, r3
 8005432:	d3b7      	bcc.n	80053a4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800543a:	691b      	ldr	r3, [r3, #16]
 800543c:	68fa      	ldr	r2, [r7, #12]
 800543e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005442:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005446:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005454:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005458:	2b00      	cmp	r3, #0
 800545a:	d105      	bne.n	8005468 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	699b      	ldr	r3, [r3, #24]
 8005460:	f043 0210 	orr.w	r2, r3, #16
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	699a      	ldr	r2, [r3, #24]
 800546c:	4b0f      	ldr	r3, [pc, #60]	; (80054ac <USB_DevInit+0x2c4>)
 800546e:	4313      	orrs	r3, r2
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005474:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005476:	2b00      	cmp	r3, #0
 8005478:	d005      	beq.n	8005486 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	699b      	ldr	r3, [r3, #24]
 800547e:	f043 0208 	orr.w	r2, r3, #8
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005486:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005488:	2b01      	cmp	r3, #1
 800548a:	d107      	bne.n	800549c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	699b      	ldr	r3, [r3, #24]
 8005490:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005494:	f043 0304 	orr.w	r3, r3, #4
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800549c:	7dfb      	ldrb	r3, [r7, #23]
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3718      	adds	r7, #24
 80054a2:	46bd      	mov	sp, r7
 80054a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80054a8:	b004      	add	sp, #16
 80054aa:	4770      	bx	lr
 80054ac:	803c3800 	.word	0x803c3800

080054b0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b085      	sub	sp, #20
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80054ba:	2300      	movs	r3, #0
 80054bc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	3301      	adds	r3, #1
 80054c2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	4a13      	ldr	r2, [pc, #76]	; (8005514 <USB_FlushTxFifo+0x64>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d901      	bls.n	80054d0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80054cc:	2303      	movs	r3, #3
 80054ce:	e01b      	b.n	8005508 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	691b      	ldr	r3, [r3, #16]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	daf2      	bge.n	80054be <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80054d8:	2300      	movs	r3, #0
 80054da:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	019b      	lsls	r3, r3, #6
 80054e0:	f043 0220 	orr.w	r2, r3, #32
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	3301      	adds	r3, #1
 80054ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	4a08      	ldr	r2, [pc, #32]	; (8005514 <USB_FlushTxFifo+0x64>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d901      	bls.n	80054fa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80054f6:	2303      	movs	r3, #3
 80054f8:	e006      	b.n	8005508 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	691b      	ldr	r3, [r3, #16]
 80054fe:	f003 0320 	and.w	r3, r3, #32
 8005502:	2b20      	cmp	r3, #32
 8005504:	d0f0      	beq.n	80054e8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005506:	2300      	movs	r3, #0
}
 8005508:	4618      	mov	r0, r3
 800550a:	3714      	adds	r7, #20
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr
 8005514:	00030d40 	.word	0x00030d40

08005518 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005518:	b480      	push	{r7}
 800551a:	b085      	sub	sp, #20
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005520:	2300      	movs	r3, #0
 8005522:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	3301      	adds	r3, #1
 8005528:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	4a11      	ldr	r2, [pc, #68]	; (8005574 <USB_FlushRxFifo+0x5c>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d901      	bls.n	8005536 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005532:	2303      	movs	r3, #3
 8005534:	e018      	b.n	8005568 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	691b      	ldr	r3, [r3, #16]
 800553a:	2b00      	cmp	r3, #0
 800553c:	daf2      	bge.n	8005524 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800553e:	2300      	movs	r3, #0
 8005540:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2210      	movs	r2, #16
 8005546:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	3301      	adds	r3, #1
 800554c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	4a08      	ldr	r2, [pc, #32]	; (8005574 <USB_FlushRxFifo+0x5c>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d901      	bls.n	800555a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005556:	2303      	movs	r3, #3
 8005558:	e006      	b.n	8005568 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	691b      	ldr	r3, [r3, #16]
 800555e:	f003 0310 	and.w	r3, r3, #16
 8005562:	2b10      	cmp	r3, #16
 8005564:	d0f0      	beq.n	8005548 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005566:	2300      	movs	r3, #0
}
 8005568:	4618      	mov	r0, r3
 800556a:	3714      	adds	r7, #20
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr
 8005574:	00030d40 	.word	0x00030d40

08005578 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005578:	b480      	push	{r7}
 800557a:	b085      	sub	sp, #20
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	460b      	mov	r3, r1
 8005582:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	78fb      	ldrb	r3, [r7, #3]
 8005592:	68f9      	ldr	r1, [r7, #12]
 8005594:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005598:	4313      	orrs	r3, r2
 800559a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800559c:	2300      	movs	r3, #0
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3714      	adds	r7, #20
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr

080055aa <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80055aa:	b480      	push	{r7}
 80055ac:	b087      	sub	sp, #28
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	f003 0306 	and.w	r3, r3, #6
 80055c2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d102      	bne.n	80055d0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80055ca:	2300      	movs	r3, #0
 80055cc:	75fb      	strb	r3, [r7, #23]
 80055ce:	e00a      	b.n	80055e6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2b02      	cmp	r3, #2
 80055d4:	d002      	beq.n	80055dc <USB_GetDevSpeed+0x32>
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2b06      	cmp	r3, #6
 80055da:	d102      	bne.n	80055e2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80055dc:	2302      	movs	r3, #2
 80055de:	75fb      	strb	r3, [r7, #23]
 80055e0:	e001      	b.n	80055e6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80055e2:	230f      	movs	r3, #15
 80055e4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80055e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	371c      	adds	r7, #28
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr

080055f4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b085      	sub	sp, #20
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	785b      	ldrb	r3, [r3, #1]
 800560c:	2b01      	cmp	r3, #1
 800560e:	d13a      	bne.n	8005686 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005616:	69da      	ldr	r2, [r3, #28]
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	781b      	ldrb	r3, [r3, #0]
 800561c:	f003 030f 	and.w	r3, r3, #15
 8005620:	2101      	movs	r1, #1
 8005622:	fa01 f303 	lsl.w	r3, r1, r3
 8005626:	b29b      	uxth	r3, r3
 8005628:	68f9      	ldr	r1, [r7, #12]
 800562a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800562e:	4313      	orrs	r3, r2
 8005630:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	015a      	lsls	r2, r3, #5
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	4413      	add	r3, r2
 800563a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005644:	2b00      	cmp	r3, #0
 8005646:	d155      	bne.n	80056f4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	015a      	lsls	r2, r3, #5
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	4413      	add	r3, r2
 8005650:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	791b      	ldrb	r3, [r3, #4]
 8005662:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005664:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	059b      	lsls	r3, r3, #22
 800566a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800566c:	4313      	orrs	r3, r2
 800566e:	68ba      	ldr	r2, [r7, #8]
 8005670:	0151      	lsls	r1, r2, #5
 8005672:	68fa      	ldr	r2, [r7, #12]
 8005674:	440a      	add	r2, r1
 8005676:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800567a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800567e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005682:	6013      	str	r3, [r2, #0]
 8005684:	e036      	b.n	80056f4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800568c:	69da      	ldr	r2, [r3, #28]
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	781b      	ldrb	r3, [r3, #0]
 8005692:	f003 030f 	and.w	r3, r3, #15
 8005696:	2101      	movs	r1, #1
 8005698:	fa01 f303 	lsl.w	r3, r1, r3
 800569c:	041b      	lsls	r3, r3, #16
 800569e:	68f9      	ldr	r1, [r7, #12]
 80056a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056a4:	4313      	orrs	r3, r2
 80056a6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	015a      	lsls	r2, r3, #5
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	4413      	add	r3, r2
 80056b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d11a      	bne.n	80056f4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	015a      	lsls	r2, r3, #5
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	4413      	add	r3, r2
 80056c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	791b      	ldrb	r3, [r3, #4]
 80056d8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80056da:	430b      	orrs	r3, r1
 80056dc:	4313      	orrs	r3, r2
 80056de:	68ba      	ldr	r2, [r7, #8]
 80056e0:	0151      	lsls	r1, r2, #5
 80056e2:	68fa      	ldr	r2, [r7, #12]
 80056e4:	440a      	add	r2, r1
 80056e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056f2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80056f4:	2300      	movs	r3, #0
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3714      	adds	r7, #20
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr
	...

08005704 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005704:	b480      	push	{r7}
 8005706:	b085      	sub	sp, #20
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	781b      	ldrb	r3, [r3, #0]
 8005716:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	785b      	ldrb	r3, [r3, #1]
 800571c:	2b01      	cmp	r3, #1
 800571e:	d161      	bne.n	80057e4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	015a      	lsls	r2, r3, #5
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	4413      	add	r3, r2
 8005728:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005732:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005736:	d11f      	bne.n	8005778 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	015a      	lsls	r2, r3, #5
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	4413      	add	r3, r2
 8005740:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	68ba      	ldr	r2, [r7, #8]
 8005748:	0151      	lsls	r1, r2, #5
 800574a:	68fa      	ldr	r2, [r7, #12]
 800574c:	440a      	add	r2, r1
 800574e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005752:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005756:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	015a      	lsls	r2, r3, #5
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	4413      	add	r3, r2
 8005760:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	68ba      	ldr	r2, [r7, #8]
 8005768:	0151      	lsls	r1, r2, #5
 800576a:	68fa      	ldr	r2, [r7, #12]
 800576c:	440a      	add	r2, r1
 800576e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005772:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005776:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800577e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	781b      	ldrb	r3, [r3, #0]
 8005784:	f003 030f 	and.w	r3, r3, #15
 8005788:	2101      	movs	r1, #1
 800578a:	fa01 f303 	lsl.w	r3, r1, r3
 800578e:	b29b      	uxth	r3, r3
 8005790:	43db      	mvns	r3, r3
 8005792:	68f9      	ldr	r1, [r7, #12]
 8005794:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005798:	4013      	ands	r3, r2
 800579a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057a2:	69da      	ldr	r2, [r3, #28]
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	f003 030f 	and.w	r3, r3, #15
 80057ac:	2101      	movs	r1, #1
 80057ae:	fa01 f303 	lsl.w	r3, r1, r3
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	43db      	mvns	r3, r3
 80057b6:	68f9      	ldr	r1, [r7, #12]
 80057b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057bc:	4013      	ands	r3, r2
 80057be:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	015a      	lsls	r2, r3, #5
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	4413      	add	r3, r2
 80057c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	0159      	lsls	r1, r3, #5
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	440b      	add	r3, r1
 80057d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057da:	4619      	mov	r1, r3
 80057dc:	4b35      	ldr	r3, [pc, #212]	; (80058b4 <USB_DeactivateEndpoint+0x1b0>)
 80057de:	4013      	ands	r3, r2
 80057e0:	600b      	str	r3, [r1, #0]
 80057e2:	e060      	b.n	80058a6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	015a      	lsls	r2, r3, #5
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	4413      	add	r3, r2
 80057ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057fa:	d11f      	bne.n	800583c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	015a      	lsls	r2, r3, #5
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	4413      	add	r3, r2
 8005804:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	68ba      	ldr	r2, [r7, #8]
 800580c:	0151      	lsls	r1, r2, #5
 800580e:	68fa      	ldr	r2, [r7, #12]
 8005810:	440a      	add	r2, r1
 8005812:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005816:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800581a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	015a      	lsls	r2, r3, #5
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	4413      	add	r3, r2
 8005824:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	68ba      	ldr	r2, [r7, #8]
 800582c:	0151      	lsls	r1, r2, #5
 800582e:	68fa      	ldr	r2, [r7, #12]
 8005830:	440a      	add	r2, r1
 8005832:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005836:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800583a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005842:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	781b      	ldrb	r3, [r3, #0]
 8005848:	f003 030f 	and.w	r3, r3, #15
 800584c:	2101      	movs	r1, #1
 800584e:	fa01 f303 	lsl.w	r3, r1, r3
 8005852:	041b      	lsls	r3, r3, #16
 8005854:	43db      	mvns	r3, r3
 8005856:	68f9      	ldr	r1, [r7, #12]
 8005858:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800585c:	4013      	ands	r3, r2
 800585e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005866:	69da      	ldr	r2, [r3, #28]
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	f003 030f 	and.w	r3, r3, #15
 8005870:	2101      	movs	r1, #1
 8005872:	fa01 f303 	lsl.w	r3, r1, r3
 8005876:	041b      	lsls	r3, r3, #16
 8005878:	43db      	mvns	r3, r3
 800587a:	68f9      	ldr	r1, [r7, #12]
 800587c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005880:	4013      	ands	r3, r2
 8005882:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	015a      	lsls	r2, r3, #5
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	4413      	add	r3, r2
 800588c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	0159      	lsls	r1, r3, #5
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	440b      	add	r3, r1
 800589a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800589e:	4619      	mov	r1, r3
 80058a0:	4b05      	ldr	r3, [pc, #20]	; (80058b8 <USB_DeactivateEndpoint+0x1b4>)
 80058a2:	4013      	ands	r3, r2
 80058a4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80058a6:	2300      	movs	r3, #0
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3714      	adds	r7, #20
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr
 80058b4:	ec337800 	.word	0xec337800
 80058b8:	eff37800 	.word	0xeff37800

080058bc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b08a      	sub	sp, #40	; 0x28
 80058c0:	af02      	add	r7, sp, #8
 80058c2:	60f8      	str	r0, [r7, #12]
 80058c4:	60b9      	str	r1, [r7, #8]
 80058c6:	4613      	mov	r3, r2
 80058c8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	781b      	ldrb	r3, [r3, #0]
 80058d2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	785b      	ldrb	r3, [r3, #1]
 80058d8:	2b01      	cmp	r3, #1
 80058da:	f040 815c 	bne.w	8005b96 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	699b      	ldr	r3, [r3, #24]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d132      	bne.n	800594c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80058e6:	69bb      	ldr	r3, [r7, #24]
 80058e8:	015a      	lsls	r2, r3, #5
 80058ea:	69fb      	ldr	r3, [r7, #28]
 80058ec:	4413      	add	r3, r2
 80058ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058f2:	691b      	ldr	r3, [r3, #16]
 80058f4:	69ba      	ldr	r2, [r7, #24]
 80058f6:	0151      	lsls	r1, r2, #5
 80058f8:	69fa      	ldr	r2, [r7, #28]
 80058fa:	440a      	add	r2, r1
 80058fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005900:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005904:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005908:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800590a:	69bb      	ldr	r3, [r7, #24]
 800590c:	015a      	lsls	r2, r3, #5
 800590e:	69fb      	ldr	r3, [r7, #28]
 8005910:	4413      	add	r3, r2
 8005912:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005916:	691b      	ldr	r3, [r3, #16]
 8005918:	69ba      	ldr	r2, [r7, #24]
 800591a:	0151      	lsls	r1, r2, #5
 800591c:	69fa      	ldr	r2, [r7, #28]
 800591e:	440a      	add	r2, r1
 8005920:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005924:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005928:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800592a:	69bb      	ldr	r3, [r7, #24]
 800592c:	015a      	lsls	r2, r3, #5
 800592e:	69fb      	ldr	r3, [r7, #28]
 8005930:	4413      	add	r3, r2
 8005932:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005936:	691b      	ldr	r3, [r3, #16]
 8005938:	69ba      	ldr	r2, [r7, #24]
 800593a:	0151      	lsls	r1, r2, #5
 800593c:	69fa      	ldr	r2, [r7, #28]
 800593e:	440a      	add	r2, r1
 8005940:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005944:	0cdb      	lsrs	r3, r3, #19
 8005946:	04db      	lsls	r3, r3, #19
 8005948:	6113      	str	r3, [r2, #16]
 800594a:	e074      	b.n	8005a36 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800594c:	69bb      	ldr	r3, [r7, #24]
 800594e:	015a      	lsls	r2, r3, #5
 8005950:	69fb      	ldr	r3, [r7, #28]
 8005952:	4413      	add	r3, r2
 8005954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005958:	691b      	ldr	r3, [r3, #16]
 800595a:	69ba      	ldr	r2, [r7, #24]
 800595c:	0151      	lsls	r1, r2, #5
 800595e:	69fa      	ldr	r2, [r7, #28]
 8005960:	440a      	add	r2, r1
 8005962:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005966:	0cdb      	lsrs	r3, r3, #19
 8005968:	04db      	lsls	r3, r3, #19
 800596a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800596c:	69bb      	ldr	r3, [r7, #24]
 800596e:	015a      	lsls	r2, r3, #5
 8005970:	69fb      	ldr	r3, [r7, #28]
 8005972:	4413      	add	r3, r2
 8005974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005978:	691b      	ldr	r3, [r3, #16]
 800597a:	69ba      	ldr	r2, [r7, #24]
 800597c:	0151      	lsls	r1, r2, #5
 800597e:	69fa      	ldr	r2, [r7, #28]
 8005980:	440a      	add	r2, r1
 8005982:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005986:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800598a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800598e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005990:	69bb      	ldr	r3, [r7, #24]
 8005992:	015a      	lsls	r2, r3, #5
 8005994:	69fb      	ldr	r3, [r7, #28]
 8005996:	4413      	add	r3, r2
 8005998:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800599c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	6999      	ldr	r1, [r3, #24]
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	68db      	ldr	r3, [r3, #12]
 80059a6:	440b      	add	r3, r1
 80059a8:	1e59      	subs	r1, r3, #1
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	68db      	ldr	r3, [r3, #12]
 80059ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80059b2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80059b4:	4b9d      	ldr	r3, [pc, #628]	; (8005c2c <USB_EPStartXfer+0x370>)
 80059b6:	400b      	ands	r3, r1
 80059b8:	69b9      	ldr	r1, [r7, #24]
 80059ba:	0148      	lsls	r0, r1, #5
 80059bc:	69f9      	ldr	r1, [r7, #28]
 80059be:	4401      	add	r1, r0
 80059c0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80059c4:	4313      	orrs	r3, r2
 80059c6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80059c8:	69bb      	ldr	r3, [r7, #24]
 80059ca:	015a      	lsls	r2, r3, #5
 80059cc:	69fb      	ldr	r3, [r7, #28]
 80059ce:	4413      	add	r3, r2
 80059d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059d4:	691a      	ldr	r2, [r3, #16]
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	699b      	ldr	r3, [r3, #24]
 80059da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059de:	69b9      	ldr	r1, [r7, #24]
 80059e0:	0148      	lsls	r0, r1, #5
 80059e2:	69f9      	ldr	r1, [r7, #28]
 80059e4:	4401      	add	r1, r0
 80059e6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80059ea:	4313      	orrs	r3, r2
 80059ec:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	791b      	ldrb	r3, [r3, #4]
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d11f      	bne.n	8005a36 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80059f6:	69bb      	ldr	r3, [r7, #24]
 80059f8:	015a      	lsls	r2, r3, #5
 80059fa:	69fb      	ldr	r3, [r7, #28]
 80059fc:	4413      	add	r3, r2
 80059fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a02:	691b      	ldr	r3, [r3, #16]
 8005a04:	69ba      	ldr	r2, [r7, #24]
 8005a06:	0151      	lsls	r1, r2, #5
 8005a08:	69fa      	ldr	r2, [r7, #28]
 8005a0a:	440a      	add	r2, r1
 8005a0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a10:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005a14:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005a16:	69bb      	ldr	r3, [r7, #24]
 8005a18:	015a      	lsls	r2, r3, #5
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	4413      	add	r3, r2
 8005a1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a22:	691b      	ldr	r3, [r3, #16]
 8005a24:	69ba      	ldr	r2, [r7, #24]
 8005a26:	0151      	lsls	r1, r2, #5
 8005a28:	69fa      	ldr	r2, [r7, #28]
 8005a2a:	440a      	add	r2, r1
 8005a2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a30:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005a34:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005a36:	79fb      	ldrb	r3, [r7, #7]
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d14b      	bne.n	8005ad4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	695b      	ldr	r3, [r3, #20]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d009      	beq.n	8005a58 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005a44:	69bb      	ldr	r3, [r7, #24]
 8005a46:	015a      	lsls	r2, r3, #5
 8005a48:	69fb      	ldr	r3, [r7, #28]
 8005a4a:	4413      	add	r3, r2
 8005a4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a50:	461a      	mov	r2, r3
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	695b      	ldr	r3, [r3, #20]
 8005a56:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	791b      	ldrb	r3, [r3, #4]
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d128      	bne.n	8005ab2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005a60:	69fb      	ldr	r3, [r7, #28]
 8005a62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d110      	bne.n	8005a92 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005a70:	69bb      	ldr	r3, [r7, #24]
 8005a72:	015a      	lsls	r2, r3, #5
 8005a74:	69fb      	ldr	r3, [r7, #28]
 8005a76:	4413      	add	r3, r2
 8005a78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	69ba      	ldr	r2, [r7, #24]
 8005a80:	0151      	lsls	r1, r2, #5
 8005a82:	69fa      	ldr	r2, [r7, #28]
 8005a84:	440a      	add	r2, r1
 8005a86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a8a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005a8e:	6013      	str	r3, [r2, #0]
 8005a90:	e00f      	b.n	8005ab2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005a92:	69bb      	ldr	r3, [r7, #24]
 8005a94:	015a      	lsls	r2, r3, #5
 8005a96:	69fb      	ldr	r3, [r7, #28]
 8005a98:	4413      	add	r3, r2
 8005a9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	69ba      	ldr	r2, [r7, #24]
 8005aa2:	0151      	lsls	r1, r2, #5
 8005aa4:	69fa      	ldr	r2, [r7, #28]
 8005aa6:	440a      	add	r2, r1
 8005aa8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ab0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005ab2:	69bb      	ldr	r3, [r7, #24]
 8005ab4:	015a      	lsls	r2, r3, #5
 8005ab6:	69fb      	ldr	r3, [r7, #28]
 8005ab8:	4413      	add	r3, r2
 8005aba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	69ba      	ldr	r2, [r7, #24]
 8005ac2:	0151      	lsls	r1, r2, #5
 8005ac4:	69fa      	ldr	r2, [r7, #28]
 8005ac6:	440a      	add	r2, r1
 8005ac8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005acc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005ad0:	6013      	str	r3, [r2, #0]
 8005ad2:	e133      	b.n	8005d3c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005ad4:	69bb      	ldr	r3, [r7, #24]
 8005ad6:	015a      	lsls	r2, r3, #5
 8005ad8:	69fb      	ldr	r3, [r7, #28]
 8005ada:	4413      	add	r3, r2
 8005adc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	69ba      	ldr	r2, [r7, #24]
 8005ae4:	0151      	lsls	r1, r2, #5
 8005ae6:	69fa      	ldr	r2, [r7, #28]
 8005ae8:	440a      	add	r2, r1
 8005aea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005aee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005af2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	791b      	ldrb	r3, [r3, #4]
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d015      	beq.n	8005b28 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	699b      	ldr	r3, [r3, #24]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	f000 811b 	beq.w	8005d3c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005b06:	69fb      	ldr	r3, [r7, #28]
 8005b08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	f003 030f 	and.w	r3, r3, #15
 8005b16:	2101      	movs	r1, #1
 8005b18:	fa01 f303 	lsl.w	r3, r1, r3
 8005b1c:	69f9      	ldr	r1, [r7, #28]
 8005b1e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b22:	4313      	orrs	r3, r2
 8005b24:	634b      	str	r3, [r1, #52]	; 0x34
 8005b26:	e109      	b.n	8005d3c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005b28:	69fb      	ldr	r3, [r7, #28]
 8005b2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d110      	bne.n	8005b5a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005b38:	69bb      	ldr	r3, [r7, #24]
 8005b3a:	015a      	lsls	r2, r3, #5
 8005b3c:	69fb      	ldr	r3, [r7, #28]
 8005b3e:	4413      	add	r3, r2
 8005b40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	69ba      	ldr	r2, [r7, #24]
 8005b48:	0151      	lsls	r1, r2, #5
 8005b4a:	69fa      	ldr	r2, [r7, #28]
 8005b4c:	440a      	add	r2, r1
 8005b4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b52:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b56:	6013      	str	r3, [r2, #0]
 8005b58:	e00f      	b.n	8005b7a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005b5a:	69bb      	ldr	r3, [r7, #24]
 8005b5c:	015a      	lsls	r2, r3, #5
 8005b5e:	69fb      	ldr	r3, [r7, #28]
 8005b60:	4413      	add	r3, r2
 8005b62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	69ba      	ldr	r2, [r7, #24]
 8005b6a:	0151      	lsls	r1, r2, #5
 8005b6c:	69fa      	ldr	r2, [r7, #28]
 8005b6e:	440a      	add	r2, r1
 8005b70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b78:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	6919      	ldr	r1, [r3, #16]
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	781a      	ldrb	r2, [r3, #0]
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	699b      	ldr	r3, [r3, #24]
 8005b86:	b298      	uxth	r0, r3
 8005b88:	79fb      	ldrb	r3, [r7, #7]
 8005b8a:	9300      	str	r3, [sp, #0]
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	68f8      	ldr	r0, [r7, #12]
 8005b90:	f000 fade 	bl	8006150 <USB_WritePacket>
 8005b94:	e0d2      	b.n	8005d3c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005b96:	69bb      	ldr	r3, [r7, #24]
 8005b98:	015a      	lsls	r2, r3, #5
 8005b9a:	69fb      	ldr	r3, [r7, #28]
 8005b9c:	4413      	add	r3, r2
 8005b9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ba2:	691b      	ldr	r3, [r3, #16]
 8005ba4:	69ba      	ldr	r2, [r7, #24]
 8005ba6:	0151      	lsls	r1, r2, #5
 8005ba8:	69fa      	ldr	r2, [r7, #28]
 8005baa:	440a      	add	r2, r1
 8005bac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bb0:	0cdb      	lsrs	r3, r3, #19
 8005bb2:	04db      	lsls	r3, r3, #19
 8005bb4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005bb6:	69bb      	ldr	r3, [r7, #24]
 8005bb8:	015a      	lsls	r2, r3, #5
 8005bba:	69fb      	ldr	r3, [r7, #28]
 8005bbc:	4413      	add	r3, r2
 8005bbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bc2:	691b      	ldr	r3, [r3, #16]
 8005bc4:	69ba      	ldr	r2, [r7, #24]
 8005bc6:	0151      	lsls	r1, r2, #5
 8005bc8:	69fa      	ldr	r2, [r7, #28]
 8005bca:	440a      	add	r2, r1
 8005bcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bd0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005bd4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005bd8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	699b      	ldr	r3, [r3, #24]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d126      	bne.n	8005c30 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005be2:	69bb      	ldr	r3, [r7, #24]
 8005be4:	015a      	lsls	r2, r3, #5
 8005be6:	69fb      	ldr	r3, [r7, #28]
 8005be8:	4413      	add	r3, r2
 8005bea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bee:	691a      	ldr	r2, [r3, #16]
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	68db      	ldr	r3, [r3, #12]
 8005bf4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005bf8:	69b9      	ldr	r1, [r7, #24]
 8005bfa:	0148      	lsls	r0, r1, #5
 8005bfc:	69f9      	ldr	r1, [r7, #28]
 8005bfe:	4401      	add	r1, r0
 8005c00:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005c04:	4313      	orrs	r3, r2
 8005c06:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005c08:	69bb      	ldr	r3, [r7, #24]
 8005c0a:	015a      	lsls	r2, r3, #5
 8005c0c:	69fb      	ldr	r3, [r7, #28]
 8005c0e:	4413      	add	r3, r2
 8005c10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c14:	691b      	ldr	r3, [r3, #16]
 8005c16:	69ba      	ldr	r2, [r7, #24]
 8005c18:	0151      	lsls	r1, r2, #5
 8005c1a:	69fa      	ldr	r2, [r7, #28]
 8005c1c:	440a      	add	r2, r1
 8005c1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c22:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c26:	6113      	str	r3, [r2, #16]
 8005c28:	e03a      	b.n	8005ca0 <USB_EPStartXfer+0x3e4>
 8005c2a:	bf00      	nop
 8005c2c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	699a      	ldr	r2, [r3, #24]
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	68db      	ldr	r3, [r3, #12]
 8005c38:	4413      	add	r3, r2
 8005c3a:	1e5a      	subs	r2, r3, #1
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c44:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	68db      	ldr	r3, [r3, #12]
 8005c4a:	8afa      	ldrh	r2, [r7, #22]
 8005c4c:	fb03 f202 	mul.w	r2, r3, r2
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005c54:	69bb      	ldr	r3, [r7, #24]
 8005c56:	015a      	lsls	r2, r3, #5
 8005c58:	69fb      	ldr	r3, [r7, #28]
 8005c5a:	4413      	add	r3, r2
 8005c5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c60:	691a      	ldr	r2, [r3, #16]
 8005c62:	8afb      	ldrh	r3, [r7, #22]
 8005c64:	04d9      	lsls	r1, r3, #19
 8005c66:	4b38      	ldr	r3, [pc, #224]	; (8005d48 <USB_EPStartXfer+0x48c>)
 8005c68:	400b      	ands	r3, r1
 8005c6a:	69b9      	ldr	r1, [r7, #24]
 8005c6c:	0148      	lsls	r0, r1, #5
 8005c6e:	69f9      	ldr	r1, [r7, #28]
 8005c70:	4401      	add	r1, r0
 8005c72:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005c76:	4313      	orrs	r3, r2
 8005c78:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005c7a:	69bb      	ldr	r3, [r7, #24]
 8005c7c:	015a      	lsls	r2, r3, #5
 8005c7e:	69fb      	ldr	r3, [r7, #28]
 8005c80:	4413      	add	r3, r2
 8005c82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c86:	691a      	ldr	r2, [r3, #16]
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	69db      	ldr	r3, [r3, #28]
 8005c8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c90:	69b9      	ldr	r1, [r7, #24]
 8005c92:	0148      	lsls	r0, r1, #5
 8005c94:	69f9      	ldr	r1, [r7, #28]
 8005c96:	4401      	add	r1, r0
 8005c98:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005ca0:	79fb      	ldrb	r3, [r7, #7]
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d10d      	bne.n	8005cc2 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	691b      	ldr	r3, [r3, #16]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d009      	beq.n	8005cc2 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	6919      	ldr	r1, [r3, #16]
 8005cb2:	69bb      	ldr	r3, [r7, #24]
 8005cb4:	015a      	lsls	r2, r3, #5
 8005cb6:	69fb      	ldr	r3, [r7, #28]
 8005cb8:	4413      	add	r3, r2
 8005cba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cbe:	460a      	mov	r2, r1
 8005cc0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	791b      	ldrb	r3, [r3, #4]
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	d128      	bne.n	8005d1c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d110      	bne.n	8005cfc <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005cda:	69bb      	ldr	r3, [r7, #24]
 8005cdc:	015a      	lsls	r2, r3, #5
 8005cde:	69fb      	ldr	r3, [r7, #28]
 8005ce0:	4413      	add	r3, r2
 8005ce2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	69ba      	ldr	r2, [r7, #24]
 8005cea:	0151      	lsls	r1, r2, #5
 8005cec:	69fa      	ldr	r2, [r7, #28]
 8005cee:	440a      	add	r2, r1
 8005cf0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cf4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005cf8:	6013      	str	r3, [r2, #0]
 8005cfa:	e00f      	b.n	8005d1c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005cfc:	69bb      	ldr	r3, [r7, #24]
 8005cfe:	015a      	lsls	r2, r3, #5
 8005d00:	69fb      	ldr	r3, [r7, #28]
 8005d02:	4413      	add	r3, r2
 8005d04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	69ba      	ldr	r2, [r7, #24]
 8005d0c:	0151      	lsls	r1, r2, #5
 8005d0e:	69fa      	ldr	r2, [r7, #28]
 8005d10:	440a      	add	r2, r1
 8005d12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d1a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005d1c:	69bb      	ldr	r3, [r7, #24]
 8005d1e:	015a      	lsls	r2, r3, #5
 8005d20:	69fb      	ldr	r3, [r7, #28]
 8005d22:	4413      	add	r3, r2
 8005d24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	69ba      	ldr	r2, [r7, #24]
 8005d2c:	0151      	lsls	r1, r2, #5
 8005d2e:	69fa      	ldr	r2, [r7, #28]
 8005d30:	440a      	add	r2, r1
 8005d32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d36:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d3a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005d3c:	2300      	movs	r3, #0
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3720      	adds	r7, #32
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
 8005d46:	bf00      	nop
 8005d48:	1ff80000 	.word	0x1ff80000

08005d4c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b087      	sub	sp, #28
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	60f8      	str	r0, [r7, #12]
 8005d54:	60b9      	str	r1, [r7, #8]
 8005d56:	4613      	mov	r3, r2
 8005d58:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	781b      	ldrb	r3, [r3, #0]
 8005d62:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	785b      	ldrb	r3, [r3, #1]
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	f040 80ce 	bne.w	8005f0a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	699b      	ldr	r3, [r3, #24]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d132      	bne.n	8005ddc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	015a      	lsls	r2, r3, #5
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	4413      	add	r3, r2
 8005d7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d82:	691b      	ldr	r3, [r3, #16]
 8005d84:	693a      	ldr	r2, [r7, #16]
 8005d86:	0151      	lsls	r1, r2, #5
 8005d88:	697a      	ldr	r2, [r7, #20]
 8005d8a:	440a      	add	r2, r1
 8005d8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d90:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d94:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005d98:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	015a      	lsls	r2, r3, #5
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	4413      	add	r3, r2
 8005da2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005da6:	691b      	ldr	r3, [r3, #16]
 8005da8:	693a      	ldr	r2, [r7, #16]
 8005daa:	0151      	lsls	r1, r2, #5
 8005dac:	697a      	ldr	r2, [r7, #20]
 8005dae:	440a      	add	r2, r1
 8005db0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005db4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005db8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	015a      	lsls	r2, r3, #5
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	4413      	add	r3, r2
 8005dc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dc6:	691b      	ldr	r3, [r3, #16]
 8005dc8:	693a      	ldr	r2, [r7, #16]
 8005dca:	0151      	lsls	r1, r2, #5
 8005dcc:	697a      	ldr	r2, [r7, #20]
 8005dce:	440a      	add	r2, r1
 8005dd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dd4:	0cdb      	lsrs	r3, r3, #19
 8005dd6:	04db      	lsls	r3, r3, #19
 8005dd8:	6113      	str	r3, [r2, #16]
 8005dda:	e04e      	b.n	8005e7a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	015a      	lsls	r2, r3, #5
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	4413      	add	r3, r2
 8005de4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005de8:	691b      	ldr	r3, [r3, #16]
 8005dea:	693a      	ldr	r2, [r7, #16]
 8005dec:	0151      	lsls	r1, r2, #5
 8005dee:	697a      	ldr	r2, [r7, #20]
 8005df0:	440a      	add	r2, r1
 8005df2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005df6:	0cdb      	lsrs	r3, r3, #19
 8005df8:	04db      	lsls	r3, r3, #19
 8005dfa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	015a      	lsls	r2, r3, #5
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	4413      	add	r3, r2
 8005e04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e08:	691b      	ldr	r3, [r3, #16]
 8005e0a:	693a      	ldr	r2, [r7, #16]
 8005e0c:	0151      	lsls	r1, r2, #5
 8005e0e:	697a      	ldr	r2, [r7, #20]
 8005e10:	440a      	add	r2, r1
 8005e12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e16:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005e1a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005e1e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	699a      	ldr	r2, [r3, #24]
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d903      	bls.n	8005e34 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	68da      	ldr	r2, [r3, #12]
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	015a      	lsls	r2, r3, #5
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	4413      	add	r3, r2
 8005e3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e40:	691b      	ldr	r3, [r3, #16]
 8005e42:	693a      	ldr	r2, [r7, #16]
 8005e44:	0151      	lsls	r1, r2, #5
 8005e46:	697a      	ldr	r2, [r7, #20]
 8005e48:	440a      	add	r2, r1
 8005e4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e4e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e52:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	015a      	lsls	r2, r3, #5
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	4413      	add	r3, r2
 8005e5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e60:	691a      	ldr	r2, [r3, #16]
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	699b      	ldr	r3, [r3, #24]
 8005e66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e6a:	6939      	ldr	r1, [r7, #16]
 8005e6c:	0148      	lsls	r0, r1, #5
 8005e6e:	6979      	ldr	r1, [r7, #20]
 8005e70:	4401      	add	r1, r0
 8005e72:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005e76:	4313      	orrs	r3, r2
 8005e78:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005e7a:	79fb      	ldrb	r3, [r7, #7]
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d11e      	bne.n	8005ebe <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	695b      	ldr	r3, [r3, #20]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d009      	beq.n	8005e9c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	015a      	lsls	r2, r3, #5
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	4413      	add	r3, r2
 8005e90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e94:	461a      	mov	r2, r3
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	695b      	ldr	r3, [r3, #20]
 8005e9a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	015a      	lsls	r2, r3, #5
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	4413      	add	r3, r2
 8005ea4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	693a      	ldr	r2, [r7, #16]
 8005eac:	0151      	lsls	r1, r2, #5
 8005eae:	697a      	ldr	r2, [r7, #20]
 8005eb0:	440a      	add	r2, r1
 8005eb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005eb6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005eba:	6013      	str	r3, [r2, #0]
 8005ebc:	e097      	b.n	8005fee <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	015a      	lsls	r2, r3, #5
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	4413      	add	r3, r2
 8005ec6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	693a      	ldr	r2, [r7, #16]
 8005ece:	0151      	lsls	r1, r2, #5
 8005ed0:	697a      	ldr	r2, [r7, #20]
 8005ed2:	440a      	add	r2, r1
 8005ed4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ed8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005edc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	699b      	ldr	r3, [r3, #24]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	f000 8083 	beq.w	8005fee <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	781b      	ldrb	r3, [r3, #0]
 8005ef4:	f003 030f 	and.w	r3, r3, #15
 8005ef8:	2101      	movs	r1, #1
 8005efa:	fa01 f303 	lsl.w	r3, r1, r3
 8005efe:	6979      	ldr	r1, [r7, #20]
 8005f00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f04:	4313      	orrs	r3, r2
 8005f06:	634b      	str	r3, [r1, #52]	; 0x34
 8005f08:	e071      	b.n	8005fee <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	015a      	lsls	r2, r3, #5
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	4413      	add	r3, r2
 8005f12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f16:	691b      	ldr	r3, [r3, #16]
 8005f18:	693a      	ldr	r2, [r7, #16]
 8005f1a:	0151      	lsls	r1, r2, #5
 8005f1c:	697a      	ldr	r2, [r7, #20]
 8005f1e:	440a      	add	r2, r1
 8005f20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f24:	0cdb      	lsrs	r3, r3, #19
 8005f26:	04db      	lsls	r3, r3, #19
 8005f28:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	015a      	lsls	r2, r3, #5
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	4413      	add	r3, r2
 8005f32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f36:	691b      	ldr	r3, [r3, #16]
 8005f38:	693a      	ldr	r2, [r7, #16]
 8005f3a:	0151      	lsls	r1, r2, #5
 8005f3c:	697a      	ldr	r2, [r7, #20]
 8005f3e:	440a      	add	r2, r1
 8005f40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f44:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005f48:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005f4c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	699b      	ldr	r3, [r3, #24]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d003      	beq.n	8005f5e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	68da      	ldr	r2, [r3, #12]
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	68da      	ldr	r2, [r3, #12]
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	015a      	lsls	r2, r3, #5
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	4413      	add	r3, r2
 8005f6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f72:	691b      	ldr	r3, [r3, #16]
 8005f74:	693a      	ldr	r2, [r7, #16]
 8005f76:	0151      	lsls	r1, r2, #5
 8005f78:	697a      	ldr	r2, [r7, #20]
 8005f7a:	440a      	add	r2, r1
 8005f7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f80:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f84:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	015a      	lsls	r2, r3, #5
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	4413      	add	r3, r2
 8005f8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f92:	691a      	ldr	r2, [r3, #16]
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	69db      	ldr	r3, [r3, #28]
 8005f98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f9c:	6939      	ldr	r1, [r7, #16]
 8005f9e:	0148      	lsls	r0, r1, #5
 8005fa0:	6979      	ldr	r1, [r7, #20]
 8005fa2:	4401      	add	r1, r0
 8005fa4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005fac:	79fb      	ldrb	r3, [r7, #7]
 8005fae:	2b01      	cmp	r3, #1
 8005fb0:	d10d      	bne.n	8005fce <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	691b      	ldr	r3, [r3, #16]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d009      	beq.n	8005fce <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	6919      	ldr	r1, [r3, #16]
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	015a      	lsls	r2, r3, #5
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	4413      	add	r3, r2
 8005fc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fca:	460a      	mov	r2, r1
 8005fcc:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	015a      	lsls	r2, r3, #5
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	4413      	add	r3, r2
 8005fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	693a      	ldr	r2, [r7, #16]
 8005fde:	0151      	lsls	r1, r2, #5
 8005fe0:	697a      	ldr	r2, [r7, #20]
 8005fe2:	440a      	add	r2, r1
 8005fe4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fe8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005fec:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005fee:	2300      	movs	r3, #0
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	371c      	adds	r7, #28
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr

08005ffc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b087      	sub	sp, #28
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006006:	2300      	movs	r3, #0
 8006008:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800600a:	2300      	movs	r3, #0
 800600c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	785b      	ldrb	r3, [r3, #1]
 8006016:	2b01      	cmp	r3, #1
 8006018:	d14a      	bne.n	80060b0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	015a      	lsls	r2, r3, #5
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	4413      	add	r3, r2
 8006024:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800602e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006032:	f040 8086 	bne.w	8006142 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	015a      	lsls	r2, r3, #5
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	4413      	add	r3, r2
 8006040:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	683a      	ldr	r2, [r7, #0]
 8006048:	7812      	ldrb	r2, [r2, #0]
 800604a:	0151      	lsls	r1, r2, #5
 800604c:	693a      	ldr	r2, [r7, #16]
 800604e:	440a      	add	r2, r1
 8006050:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006054:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006058:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	015a      	lsls	r2, r3, #5
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	4413      	add	r3, r2
 8006064:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	683a      	ldr	r2, [r7, #0]
 800606c:	7812      	ldrb	r2, [r2, #0]
 800606e:	0151      	lsls	r1, r2, #5
 8006070:	693a      	ldr	r2, [r7, #16]
 8006072:	440a      	add	r2, r1
 8006074:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006078:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800607c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	3301      	adds	r3, #1
 8006082:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f242 7210 	movw	r2, #10000	; 0x2710
 800608a:	4293      	cmp	r3, r2
 800608c:	d902      	bls.n	8006094 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	75fb      	strb	r3, [r7, #23]
          break;
 8006092:	e056      	b.n	8006142 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	015a      	lsls	r2, r3, #5
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	4413      	add	r3, r2
 800609e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80060a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060ac:	d0e7      	beq.n	800607e <USB_EPStopXfer+0x82>
 80060ae:	e048      	b.n	8006142 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	015a      	lsls	r2, r3, #5
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	4413      	add	r3, r2
 80060ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80060c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060c8:	d13b      	bne.n	8006142 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	781b      	ldrb	r3, [r3, #0]
 80060ce:	015a      	lsls	r2, r3, #5
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	4413      	add	r3, r2
 80060d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	683a      	ldr	r2, [r7, #0]
 80060dc:	7812      	ldrb	r2, [r2, #0]
 80060de:	0151      	lsls	r1, r2, #5
 80060e0:	693a      	ldr	r2, [r7, #16]
 80060e2:	440a      	add	r2, r1
 80060e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060e8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80060ec:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	781b      	ldrb	r3, [r3, #0]
 80060f2:	015a      	lsls	r2, r3, #5
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	4413      	add	r3, r2
 80060f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	683a      	ldr	r2, [r7, #0]
 8006100:	7812      	ldrb	r2, [r2, #0]
 8006102:	0151      	lsls	r1, r2, #5
 8006104:	693a      	ldr	r2, [r7, #16]
 8006106:	440a      	add	r2, r1
 8006108:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800610c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006110:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	3301      	adds	r3, #1
 8006116:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f242 7210 	movw	r2, #10000	; 0x2710
 800611e:	4293      	cmp	r3, r2
 8006120:	d902      	bls.n	8006128 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	75fb      	strb	r3, [r7, #23]
          break;
 8006126:	e00c      	b.n	8006142 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	015a      	lsls	r2, r3, #5
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	4413      	add	r3, r2
 8006132:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800613c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006140:	d0e7      	beq.n	8006112 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006142:	7dfb      	ldrb	r3, [r7, #23]
}
 8006144:	4618      	mov	r0, r3
 8006146:	371c      	adds	r7, #28
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr

08006150 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006150:	b480      	push	{r7}
 8006152:	b089      	sub	sp, #36	; 0x24
 8006154:	af00      	add	r7, sp, #0
 8006156:	60f8      	str	r0, [r7, #12]
 8006158:	60b9      	str	r1, [r7, #8]
 800615a:	4611      	mov	r1, r2
 800615c:	461a      	mov	r2, r3
 800615e:	460b      	mov	r3, r1
 8006160:	71fb      	strb	r3, [r7, #7]
 8006162:	4613      	mov	r3, r2
 8006164:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800616e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006172:	2b00      	cmp	r3, #0
 8006174:	d123      	bne.n	80061be <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006176:	88bb      	ldrh	r3, [r7, #4]
 8006178:	3303      	adds	r3, #3
 800617a:	089b      	lsrs	r3, r3, #2
 800617c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800617e:	2300      	movs	r3, #0
 8006180:	61bb      	str	r3, [r7, #24]
 8006182:	e018      	b.n	80061b6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006184:	79fb      	ldrb	r3, [r7, #7]
 8006186:	031a      	lsls	r2, r3, #12
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	4413      	add	r3, r2
 800618c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006190:	461a      	mov	r2, r3
 8006192:	69fb      	ldr	r3, [r7, #28]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006198:	69fb      	ldr	r3, [r7, #28]
 800619a:	3301      	adds	r3, #1
 800619c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800619e:	69fb      	ldr	r3, [r7, #28]
 80061a0:	3301      	adds	r3, #1
 80061a2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80061a4:	69fb      	ldr	r3, [r7, #28]
 80061a6:	3301      	adds	r3, #1
 80061a8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80061aa:	69fb      	ldr	r3, [r7, #28]
 80061ac:	3301      	adds	r3, #1
 80061ae:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80061b0:	69bb      	ldr	r3, [r7, #24]
 80061b2:	3301      	adds	r3, #1
 80061b4:	61bb      	str	r3, [r7, #24]
 80061b6:	69ba      	ldr	r2, [r7, #24]
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d3e2      	bcc.n	8006184 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80061be:	2300      	movs	r3, #0
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	3724      	adds	r7, #36	; 0x24
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr

080061cc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b08b      	sub	sp, #44	; 0x2c
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	60f8      	str	r0, [r7, #12]
 80061d4:	60b9      	str	r1, [r7, #8]
 80061d6:	4613      	mov	r3, r2
 80061d8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80061e2:	88fb      	ldrh	r3, [r7, #6]
 80061e4:	089b      	lsrs	r3, r3, #2
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80061ea:	88fb      	ldrh	r3, [r7, #6]
 80061ec:	f003 0303 	and.w	r3, r3, #3
 80061f0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80061f2:	2300      	movs	r3, #0
 80061f4:	623b      	str	r3, [r7, #32]
 80061f6:	e014      	b.n	8006222 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80061f8:	69bb      	ldr	r3, [r7, #24]
 80061fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006202:	601a      	str	r2, [r3, #0]
    pDest++;
 8006204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006206:	3301      	adds	r3, #1
 8006208:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800620a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800620c:	3301      	adds	r3, #1
 800620e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006212:	3301      	adds	r3, #1
 8006214:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006218:	3301      	adds	r3, #1
 800621a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800621c:	6a3b      	ldr	r3, [r7, #32]
 800621e:	3301      	adds	r3, #1
 8006220:	623b      	str	r3, [r7, #32]
 8006222:	6a3a      	ldr	r2, [r7, #32]
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	429a      	cmp	r2, r3
 8006228:	d3e6      	bcc.n	80061f8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800622a:	8bfb      	ldrh	r3, [r7, #30]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d01e      	beq.n	800626e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006230:	2300      	movs	r3, #0
 8006232:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006234:	69bb      	ldr	r3, [r7, #24]
 8006236:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800623a:	461a      	mov	r2, r3
 800623c:	f107 0310 	add.w	r3, r7, #16
 8006240:	6812      	ldr	r2, [r2, #0]
 8006242:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006244:	693a      	ldr	r2, [r7, #16]
 8006246:	6a3b      	ldr	r3, [r7, #32]
 8006248:	b2db      	uxtb	r3, r3
 800624a:	00db      	lsls	r3, r3, #3
 800624c:	fa22 f303 	lsr.w	r3, r2, r3
 8006250:	b2da      	uxtb	r2, r3
 8006252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006254:	701a      	strb	r2, [r3, #0]
      i++;
 8006256:	6a3b      	ldr	r3, [r7, #32]
 8006258:	3301      	adds	r3, #1
 800625a:	623b      	str	r3, [r7, #32]
      pDest++;
 800625c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800625e:	3301      	adds	r3, #1
 8006260:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006262:	8bfb      	ldrh	r3, [r7, #30]
 8006264:	3b01      	subs	r3, #1
 8006266:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006268:	8bfb      	ldrh	r3, [r7, #30]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d1ea      	bne.n	8006244 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800626e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006270:	4618      	mov	r0, r3
 8006272:	372c      	adds	r7, #44	; 0x2c
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr

0800627c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800627c:	b480      	push	{r7}
 800627e:	b085      	sub	sp, #20
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	781b      	ldrb	r3, [r3, #0]
 800628e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	785b      	ldrb	r3, [r3, #1]
 8006294:	2b01      	cmp	r3, #1
 8006296:	d12c      	bne.n	80062f2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	015a      	lsls	r2, r3, #5
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	4413      	add	r3, r2
 80062a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	db12      	blt.n	80062d0 <USB_EPSetStall+0x54>
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d00f      	beq.n	80062d0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	015a      	lsls	r2, r3, #5
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	4413      	add	r3, r2
 80062b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	68ba      	ldr	r2, [r7, #8]
 80062c0:	0151      	lsls	r1, r2, #5
 80062c2:	68fa      	ldr	r2, [r7, #12]
 80062c4:	440a      	add	r2, r1
 80062c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062ca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80062ce:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	015a      	lsls	r2, r3, #5
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	4413      	add	r3, r2
 80062d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	68ba      	ldr	r2, [r7, #8]
 80062e0:	0151      	lsls	r1, r2, #5
 80062e2:	68fa      	ldr	r2, [r7, #12]
 80062e4:	440a      	add	r2, r1
 80062e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80062ee:	6013      	str	r3, [r2, #0]
 80062f0:	e02b      	b.n	800634a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	015a      	lsls	r2, r3, #5
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	4413      	add	r3, r2
 80062fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	2b00      	cmp	r3, #0
 8006302:	db12      	blt.n	800632a <USB_EPSetStall+0xae>
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d00f      	beq.n	800632a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	015a      	lsls	r2, r3, #5
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	4413      	add	r3, r2
 8006312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	68ba      	ldr	r2, [r7, #8]
 800631a:	0151      	lsls	r1, r2, #5
 800631c:	68fa      	ldr	r2, [r7, #12]
 800631e:	440a      	add	r2, r1
 8006320:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006324:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006328:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	015a      	lsls	r2, r3, #5
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	4413      	add	r3, r2
 8006332:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	68ba      	ldr	r2, [r7, #8]
 800633a:	0151      	lsls	r1, r2, #5
 800633c:	68fa      	ldr	r2, [r7, #12]
 800633e:	440a      	add	r2, r1
 8006340:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006344:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006348:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800634a:	2300      	movs	r3, #0
}
 800634c:	4618      	mov	r0, r3
 800634e:	3714      	adds	r7, #20
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr

08006358 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006358:	b480      	push	{r7}
 800635a:	b085      	sub	sp, #20
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	785b      	ldrb	r3, [r3, #1]
 8006370:	2b01      	cmp	r3, #1
 8006372:	d128      	bne.n	80063c6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	015a      	lsls	r2, r3, #5
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	4413      	add	r3, r2
 800637c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	68ba      	ldr	r2, [r7, #8]
 8006384:	0151      	lsls	r1, r2, #5
 8006386:	68fa      	ldr	r2, [r7, #12]
 8006388:	440a      	add	r2, r1
 800638a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800638e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006392:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	791b      	ldrb	r3, [r3, #4]
 8006398:	2b03      	cmp	r3, #3
 800639a:	d003      	beq.n	80063a4 <USB_EPClearStall+0x4c>
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	791b      	ldrb	r3, [r3, #4]
 80063a0:	2b02      	cmp	r3, #2
 80063a2:	d138      	bne.n	8006416 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	015a      	lsls	r2, r3, #5
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	4413      	add	r3, r2
 80063ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	68ba      	ldr	r2, [r7, #8]
 80063b4:	0151      	lsls	r1, r2, #5
 80063b6:	68fa      	ldr	r2, [r7, #12]
 80063b8:	440a      	add	r2, r1
 80063ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063c2:	6013      	str	r3, [r2, #0]
 80063c4:	e027      	b.n	8006416 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	015a      	lsls	r2, r3, #5
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	4413      	add	r3, r2
 80063ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	68ba      	ldr	r2, [r7, #8]
 80063d6:	0151      	lsls	r1, r2, #5
 80063d8:	68fa      	ldr	r2, [r7, #12]
 80063da:	440a      	add	r2, r1
 80063dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063e0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80063e4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	791b      	ldrb	r3, [r3, #4]
 80063ea:	2b03      	cmp	r3, #3
 80063ec:	d003      	beq.n	80063f6 <USB_EPClearStall+0x9e>
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	791b      	ldrb	r3, [r3, #4]
 80063f2:	2b02      	cmp	r3, #2
 80063f4:	d10f      	bne.n	8006416 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	015a      	lsls	r2, r3, #5
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	4413      	add	r3, r2
 80063fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	68ba      	ldr	r2, [r7, #8]
 8006406:	0151      	lsls	r1, r2, #5
 8006408:	68fa      	ldr	r2, [r7, #12]
 800640a:	440a      	add	r2, r1
 800640c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006410:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006414:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006416:	2300      	movs	r3, #0
}
 8006418:	4618      	mov	r0, r3
 800641a:	3714      	adds	r7, #20
 800641c:	46bd      	mov	sp, r7
 800641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006422:	4770      	bx	lr

08006424 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006424:	b480      	push	{r7}
 8006426:	b085      	sub	sp, #20
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	460b      	mov	r3, r1
 800642e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	68fa      	ldr	r2, [r7, #12]
 800643e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006442:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006446:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800644e:	681a      	ldr	r2, [r3, #0]
 8006450:	78fb      	ldrb	r3, [r7, #3]
 8006452:	011b      	lsls	r3, r3, #4
 8006454:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006458:	68f9      	ldr	r1, [r7, #12]
 800645a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800645e:	4313      	orrs	r3, r2
 8006460:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006462:	2300      	movs	r3, #0
}
 8006464:	4618      	mov	r0, r3
 8006466:	3714      	adds	r7, #20
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr

08006470 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006470:	b480      	push	{r7}
 8006472:	b085      	sub	sp, #20
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	68fa      	ldr	r2, [r7, #12]
 8006486:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800648a:	f023 0303 	bic.w	r3, r3, #3
 800648e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	68fa      	ldr	r2, [r7, #12]
 800649a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800649e:	f023 0302 	bic.w	r3, r3, #2
 80064a2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80064a4:	2300      	movs	r3, #0
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3714      	adds	r7, #20
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr

080064b2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80064b2:	b480      	push	{r7}
 80064b4:	b085      	sub	sp, #20
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	68fa      	ldr	r2, [r7, #12]
 80064c8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80064cc:	f023 0303 	bic.w	r3, r3, #3
 80064d0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	68fa      	ldr	r2, [r7, #12]
 80064dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064e0:	f043 0302 	orr.w	r3, r3, #2
 80064e4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80064e6:	2300      	movs	r3, #0
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3714      	adds	r7, #20
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr

080064f4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b085      	sub	sp, #20
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	695b      	ldr	r3, [r3, #20]
 8006500:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	699b      	ldr	r3, [r3, #24]
 8006506:	68fa      	ldr	r2, [r7, #12]
 8006508:	4013      	ands	r3, r2
 800650a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800650c:	68fb      	ldr	r3, [r7, #12]
}
 800650e:	4618      	mov	r0, r3
 8006510:	3714      	adds	r7, #20
 8006512:	46bd      	mov	sp, r7
 8006514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006518:	4770      	bx	lr

0800651a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800651a:	b480      	push	{r7}
 800651c:	b085      	sub	sp, #20
 800651e:	af00      	add	r7, sp, #0
 8006520:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800652c:	699b      	ldr	r3, [r3, #24]
 800652e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006536:	69db      	ldr	r3, [r3, #28]
 8006538:	68ba      	ldr	r2, [r7, #8]
 800653a:	4013      	ands	r3, r2
 800653c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	0c1b      	lsrs	r3, r3, #16
}
 8006542:	4618      	mov	r0, r3
 8006544:	3714      	adds	r7, #20
 8006546:	46bd      	mov	sp, r7
 8006548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654c:	4770      	bx	lr

0800654e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800654e:	b480      	push	{r7}
 8006550:	b085      	sub	sp, #20
 8006552:	af00      	add	r7, sp, #0
 8006554:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006560:	699b      	ldr	r3, [r3, #24]
 8006562:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800656a:	69db      	ldr	r3, [r3, #28]
 800656c:	68ba      	ldr	r2, [r7, #8]
 800656e:	4013      	ands	r3, r2
 8006570:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	b29b      	uxth	r3, r3
}
 8006576:	4618      	mov	r0, r3
 8006578:	3714      	adds	r7, #20
 800657a:	46bd      	mov	sp, r7
 800657c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006580:	4770      	bx	lr

08006582 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006582:	b480      	push	{r7}
 8006584:	b085      	sub	sp, #20
 8006586:	af00      	add	r7, sp, #0
 8006588:	6078      	str	r0, [r7, #4]
 800658a:	460b      	mov	r3, r1
 800658c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006592:	78fb      	ldrb	r3, [r7, #3]
 8006594:	015a      	lsls	r2, r3, #5
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	4413      	add	r3, r2
 800659a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065a8:	695b      	ldr	r3, [r3, #20]
 80065aa:	68ba      	ldr	r2, [r7, #8]
 80065ac:	4013      	ands	r3, r2
 80065ae:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80065b0:	68bb      	ldr	r3, [r7, #8]
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3714      	adds	r7, #20
 80065b6:	46bd      	mov	sp, r7
 80065b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065bc:	4770      	bx	lr

080065be <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80065be:	b480      	push	{r7}
 80065c0:	b087      	sub	sp, #28
 80065c2:	af00      	add	r7, sp, #0
 80065c4:	6078      	str	r0, [r7, #4]
 80065c6:	460b      	mov	r3, r1
 80065c8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065d4:	691b      	ldr	r3, [r3, #16]
 80065d6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065e0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80065e2:	78fb      	ldrb	r3, [r7, #3]
 80065e4:	f003 030f 	and.w	r3, r3, #15
 80065e8:	68fa      	ldr	r2, [r7, #12]
 80065ea:	fa22 f303 	lsr.w	r3, r2, r3
 80065ee:	01db      	lsls	r3, r3, #7
 80065f0:	b2db      	uxtb	r3, r3
 80065f2:	693a      	ldr	r2, [r7, #16]
 80065f4:	4313      	orrs	r3, r2
 80065f6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80065f8:	78fb      	ldrb	r3, [r7, #3]
 80065fa:	015a      	lsls	r2, r3, #5
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	4413      	add	r3, r2
 8006600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006604:	689b      	ldr	r3, [r3, #8]
 8006606:	693a      	ldr	r2, [r7, #16]
 8006608:	4013      	ands	r3, r2
 800660a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800660c:	68bb      	ldr	r3, [r7, #8]
}
 800660e:	4618      	mov	r0, r3
 8006610:	371c      	adds	r7, #28
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr

0800661a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800661a:	b480      	push	{r7}
 800661c:	b083      	sub	sp, #12
 800661e:	af00      	add	r7, sp, #0
 8006620:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	695b      	ldr	r3, [r3, #20]
 8006626:	f003 0301 	and.w	r3, r3, #1
}
 800662a:	4618      	mov	r0, r3
 800662c:	370c      	adds	r7, #12
 800662e:	46bd      	mov	sp, r7
 8006630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006634:	4770      	bx	lr

08006636 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006636:	b480      	push	{r7}
 8006638:	b085      	sub	sp, #20
 800663a:	af00      	add	r7, sp, #0
 800663c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	68fa      	ldr	r2, [r7, #12]
 800664c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006650:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006654:	f023 0307 	bic.w	r3, r3, #7
 8006658:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	68fa      	ldr	r2, [r7, #12]
 8006664:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006668:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800666c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800666e:	2300      	movs	r3, #0
}
 8006670:	4618      	mov	r0, r3
 8006672:	3714      	adds	r7, #20
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr

0800667c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800667c:	b480      	push	{r7}
 800667e:	b087      	sub	sp, #28
 8006680:	af00      	add	r7, sp, #0
 8006682:	60f8      	str	r0, [r7, #12]
 8006684:	460b      	mov	r3, r1
 8006686:	607a      	str	r2, [r7, #4]
 8006688:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	333c      	adds	r3, #60	; 0x3c
 8006692:	3304      	adds	r3, #4
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	4a26      	ldr	r2, [pc, #152]	; (8006734 <USB_EP0_OutStart+0xb8>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d90a      	bls.n	80066b6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066b0:	d101      	bne.n	80066b6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80066b2:	2300      	movs	r3, #0
 80066b4:	e037      	b.n	8006726 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066bc:	461a      	mov	r2, r3
 80066be:	2300      	movs	r3, #0
 80066c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066c8:	691b      	ldr	r3, [r3, #16]
 80066ca:	697a      	ldr	r2, [r7, #20]
 80066cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80066d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066dc:	691b      	ldr	r3, [r3, #16]
 80066de:	697a      	ldr	r2, [r7, #20]
 80066e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066e4:	f043 0318 	orr.w	r3, r3, #24
 80066e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066f0:	691b      	ldr	r3, [r3, #16]
 80066f2:	697a      	ldr	r2, [r7, #20]
 80066f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066f8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80066fc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80066fe:	7afb      	ldrb	r3, [r7, #11]
 8006700:	2b01      	cmp	r3, #1
 8006702:	d10f      	bne.n	8006724 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800670a:	461a      	mov	r2, r3
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	697a      	ldr	r2, [r7, #20]
 800671a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800671e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006722:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006724:	2300      	movs	r3, #0
}
 8006726:	4618      	mov	r0, r3
 8006728:	371c      	adds	r7, #28
 800672a:	46bd      	mov	sp, r7
 800672c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006730:	4770      	bx	lr
 8006732:	bf00      	nop
 8006734:	4f54300a 	.word	0x4f54300a

08006738 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006738:	b480      	push	{r7}
 800673a:	b085      	sub	sp, #20
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006740:	2300      	movs	r3, #0
 8006742:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	3301      	adds	r3, #1
 8006748:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	4a13      	ldr	r2, [pc, #76]	; (800679c <USB_CoreReset+0x64>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d901      	bls.n	8006756 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006752:	2303      	movs	r3, #3
 8006754:	e01b      	b.n	800678e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	691b      	ldr	r3, [r3, #16]
 800675a:	2b00      	cmp	r3, #0
 800675c:	daf2      	bge.n	8006744 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800675e:	2300      	movs	r3, #0
 8006760:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	691b      	ldr	r3, [r3, #16]
 8006766:	f043 0201 	orr.w	r2, r3, #1
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	3301      	adds	r3, #1
 8006772:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	4a09      	ldr	r2, [pc, #36]	; (800679c <USB_CoreReset+0x64>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d901      	bls.n	8006780 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800677c:	2303      	movs	r3, #3
 800677e:	e006      	b.n	800678e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	691b      	ldr	r3, [r3, #16]
 8006784:	f003 0301 	and.w	r3, r3, #1
 8006788:	2b01      	cmp	r3, #1
 800678a:	d0f0      	beq.n	800676e <USB_CoreReset+0x36>

  return HAL_OK;
 800678c:	2300      	movs	r3, #0
}
 800678e:	4618      	mov	r0, r3
 8006790:	3714      	adds	r7, #20
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr
 800679a:	bf00      	nop
 800679c:	00030d40 	.word	0x00030d40

080067a0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b084      	sub	sp, #16
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	460b      	mov	r3, r1
 80067aa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80067ac:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80067b0:	f002 fc94 	bl	80090dc <USBD_static_malloc>
 80067b4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d109      	bne.n	80067d0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	32b0      	adds	r2, #176	; 0xb0
 80067c6:	2100      	movs	r1, #0
 80067c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80067cc:	2302      	movs	r3, #2
 80067ce:	e0d4      	b.n	800697a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80067d0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80067d4:	2100      	movs	r1, #0
 80067d6:	68f8      	ldr	r0, [r7, #12]
 80067d8:	f002 fcee 	bl	80091b8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	32b0      	adds	r2, #176	; 0xb0
 80067e6:	68f9      	ldr	r1, [r7, #12]
 80067e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	32b0      	adds	r2, #176	; 0xb0
 80067f6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	7c1b      	ldrb	r3, [r3, #16]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d138      	bne.n	800687a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006808:	4b5e      	ldr	r3, [pc, #376]	; (8006984 <USBD_CDC_Init+0x1e4>)
 800680a:	7819      	ldrb	r1, [r3, #0]
 800680c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006810:	2202      	movs	r2, #2
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f002 fb3f 	bl	8008e96 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006818:	4b5a      	ldr	r3, [pc, #360]	; (8006984 <USBD_CDC_Init+0x1e4>)
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	f003 020f 	and.w	r2, r3, #15
 8006820:	6879      	ldr	r1, [r7, #4]
 8006822:	4613      	mov	r3, r2
 8006824:	009b      	lsls	r3, r3, #2
 8006826:	4413      	add	r3, r2
 8006828:	009b      	lsls	r3, r3, #2
 800682a:	440b      	add	r3, r1
 800682c:	3324      	adds	r3, #36	; 0x24
 800682e:	2201      	movs	r2, #1
 8006830:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006832:	4b55      	ldr	r3, [pc, #340]	; (8006988 <USBD_CDC_Init+0x1e8>)
 8006834:	7819      	ldrb	r1, [r3, #0]
 8006836:	f44f 7300 	mov.w	r3, #512	; 0x200
 800683a:	2202      	movs	r2, #2
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f002 fb2a 	bl	8008e96 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006842:	4b51      	ldr	r3, [pc, #324]	; (8006988 <USBD_CDC_Init+0x1e8>)
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	f003 020f 	and.w	r2, r3, #15
 800684a:	6879      	ldr	r1, [r7, #4]
 800684c:	4613      	mov	r3, r2
 800684e:	009b      	lsls	r3, r3, #2
 8006850:	4413      	add	r3, r2
 8006852:	009b      	lsls	r3, r3, #2
 8006854:	440b      	add	r3, r1
 8006856:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800685a:	2201      	movs	r2, #1
 800685c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800685e:	4b4b      	ldr	r3, [pc, #300]	; (800698c <USBD_CDC_Init+0x1ec>)
 8006860:	781b      	ldrb	r3, [r3, #0]
 8006862:	f003 020f 	and.w	r2, r3, #15
 8006866:	6879      	ldr	r1, [r7, #4]
 8006868:	4613      	mov	r3, r2
 800686a:	009b      	lsls	r3, r3, #2
 800686c:	4413      	add	r3, r2
 800686e:	009b      	lsls	r3, r3, #2
 8006870:	440b      	add	r3, r1
 8006872:	3326      	adds	r3, #38	; 0x26
 8006874:	2210      	movs	r2, #16
 8006876:	801a      	strh	r2, [r3, #0]
 8006878:	e035      	b.n	80068e6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800687a:	4b42      	ldr	r3, [pc, #264]	; (8006984 <USBD_CDC_Init+0x1e4>)
 800687c:	7819      	ldrb	r1, [r3, #0]
 800687e:	2340      	movs	r3, #64	; 0x40
 8006880:	2202      	movs	r2, #2
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f002 fb07 	bl	8008e96 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006888:	4b3e      	ldr	r3, [pc, #248]	; (8006984 <USBD_CDC_Init+0x1e4>)
 800688a:	781b      	ldrb	r3, [r3, #0]
 800688c:	f003 020f 	and.w	r2, r3, #15
 8006890:	6879      	ldr	r1, [r7, #4]
 8006892:	4613      	mov	r3, r2
 8006894:	009b      	lsls	r3, r3, #2
 8006896:	4413      	add	r3, r2
 8006898:	009b      	lsls	r3, r3, #2
 800689a:	440b      	add	r3, r1
 800689c:	3324      	adds	r3, #36	; 0x24
 800689e:	2201      	movs	r2, #1
 80068a0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80068a2:	4b39      	ldr	r3, [pc, #228]	; (8006988 <USBD_CDC_Init+0x1e8>)
 80068a4:	7819      	ldrb	r1, [r3, #0]
 80068a6:	2340      	movs	r3, #64	; 0x40
 80068a8:	2202      	movs	r2, #2
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f002 faf3 	bl	8008e96 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80068b0:	4b35      	ldr	r3, [pc, #212]	; (8006988 <USBD_CDC_Init+0x1e8>)
 80068b2:	781b      	ldrb	r3, [r3, #0]
 80068b4:	f003 020f 	and.w	r2, r3, #15
 80068b8:	6879      	ldr	r1, [r7, #4]
 80068ba:	4613      	mov	r3, r2
 80068bc:	009b      	lsls	r3, r3, #2
 80068be:	4413      	add	r3, r2
 80068c0:	009b      	lsls	r3, r3, #2
 80068c2:	440b      	add	r3, r1
 80068c4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80068c8:	2201      	movs	r2, #1
 80068ca:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80068cc:	4b2f      	ldr	r3, [pc, #188]	; (800698c <USBD_CDC_Init+0x1ec>)
 80068ce:	781b      	ldrb	r3, [r3, #0]
 80068d0:	f003 020f 	and.w	r2, r3, #15
 80068d4:	6879      	ldr	r1, [r7, #4]
 80068d6:	4613      	mov	r3, r2
 80068d8:	009b      	lsls	r3, r3, #2
 80068da:	4413      	add	r3, r2
 80068dc:	009b      	lsls	r3, r3, #2
 80068de:	440b      	add	r3, r1
 80068e0:	3326      	adds	r3, #38	; 0x26
 80068e2:	2210      	movs	r2, #16
 80068e4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80068e6:	4b29      	ldr	r3, [pc, #164]	; (800698c <USBD_CDC_Init+0x1ec>)
 80068e8:	7819      	ldrb	r1, [r3, #0]
 80068ea:	2308      	movs	r3, #8
 80068ec:	2203      	movs	r2, #3
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f002 fad1 	bl	8008e96 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80068f4:	4b25      	ldr	r3, [pc, #148]	; (800698c <USBD_CDC_Init+0x1ec>)
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	f003 020f 	and.w	r2, r3, #15
 80068fc:	6879      	ldr	r1, [r7, #4]
 80068fe:	4613      	mov	r3, r2
 8006900:	009b      	lsls	r3, r3, #2
 8006902:	4413      	add	r3, r2
 8006904:	009b      	lsls	r3, r3, #2
 8006906:	440b      	add	r3, r1
 8006908:	3324      	adds	r3, #36	; 0x24
 800690a:	2201      	movs	r2, #1
 800690c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2200      	movs	r2, #0
 8006912:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800691c:	687a      	ldr	r2, [r7, #4]
 800691e:	33b0      	adds	r3, #176	; 0xb0
 8006920:	009b      	lsls	r3, r3, #2
 8006922:	4413      	add	r3, r2
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2200      	movs	r2, #0
 800692e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2200      	movs	r2, #0
 8006936:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006940:	2b00      	cmp	r3, #0
 8006942:	d101      	bne.n	8006948 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006944:	2302      	movs	r3, #2
 8006946:	e018      	b.n	800697a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	7c1b      	ldrb	r3, [r3, #16]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d10a      	bne.n	8006966 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006950:	4b0d      	ldr	r3, [pc, #52]	; (8006988 <USBD_CDC_Init+0x1e8>)
 8006952:	7819      	ldrb	r1, [r3, #0]
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800695a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f002 fb88 	bl	8009074 <USBD_LL_PrepareReceive>
 8006964:	e008      	b.n	8006978 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006966:	4b08      	ldr	r3, [pc, #32]	; (8006988 <USBD_CDC_Init+0x1e8>)
 8006968:	7819      	ldrb	r1, [r3, #0]
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006970:	2340      	movs	r3, #64	; 0x40
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f002 fb7e 	bl	8009074 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006978:	2300      	movs	r3, #0
}
 800697a:	4618      	mov	r0, r3
 800697c:	3710      	adds	r7, #16
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
 8006982:	bf00      	nop
 8006984:	20000093 	.word	0x20000093
 8006988:	20000094 	.word	0x20000094
 800698c:	20000095 	.word	0x20000095

08006990 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b082      	sub	sp, #8
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	460b      	mov	r3, r1
 800699a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800699c:	4b3a      	ldr	r3, [pc, #232]	; (8006a88 <USBD_CDC_DeInit+0xf8>)
 800699e:	781b      	ldrb	r3, [r3, #0]
 80069a0:	4619      	mov	r1, r3
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f002 fa9d 	bl	8008ee2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80069a8:	4b37      	ldr	r3, [pc, #220]	; (8006a88 <USBD_CDC_DeInit+0xf8>)
 80069aa:	781b      	ldrb	r3, [r3, #0]
 80069ac:	f003 020f 	and.w	r2, r3, #15
 80069b0:	6879      	ldr	r1, [r7, #4]
 80069b2:	4613      	mov	r3, r2
 80069b4:	009b      	lsls	r3, r3, #2
 80069b6:	4413      	add	r3, r2
 80069b8:	009b      	lsls	r3, r3, #2
 80069ba:	440b      	add	r3, r1
 80069bc:	3324      	adds	r3, #36	; 0x24
 80069be:	2200      	movs	r2, #0
 80069c0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80069c2:	4b32      	ldr	r3, [pc, #200]	; (8006a8c <USBD_CDC_DeInit+0xfc>)
 80069c4:	781b      	ldrb	r3, [r3, #0]
 80069c6:	4619      	mov	r1, r3
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f002 fa8a 	bl	8008ee2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80069ce:	4b2f      	ldr	r3, [pc, #188]	; (8006a8c <USBD_CDC_DeInit+0xfc>)
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	f003 020f 	and.w	r2, r3, #15
 80069d6:	6879      	ldr	r1, [r7, #4]
 80069d8:	4613      	mov	r3, r2
 80069da:	009b      	lsls	r3, r3, #2
 80069dc:	4413      	add	r3, r2
 80069de:	009b      	lsls	r3, r3, #2
 80069e0:	440b      	add	r3, r1
 80069e2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80069e6:	2200      	movs	r2, #0
 80069e8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80069ea:	4b29      	ldr	r3, [pc, #164]	; (8006a90 <USBD_CDC_DeInit+0x100>)
 80069ec:	781b      	ldrb	r3, [r3, #0]
 80069ee:	4619      	mov	r1, r3
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f002 fa76 	bl	8008ee2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80069f6:	4b26      	ldr	r3, [pc, #152]	; (8006a90 <USBD_CDC_DeInit+0x100>)
 80069f8:	781b      	ldrb	r3, [r3, #0]
 80069fa:	f003 020f 	and.w	r2, r3, #15
 80069fe:	6879      	ldr	r1, [r7, #4]
 8006a00:	4613      	mov	r3, r2
 8006a02:	009b      	lsls	r3, r3, #2
 8006a04:	4413      	add	r3, r2
 8006a06:	009b      	lsls	r3, r3, #2
 8006a08:	440b      	add	r3, r1
 8006a0a:	3324      	adds	r3, #36	; 0x24
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006a10:	4b1f      	ldr	r3, [pc, #124]	; (8006a90 <USBD_CDC_DeInit+0x100>)
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	f003 020f 	and.w	r2, r3, #15
 8006a18:	6879      	ldr	r1, [r7, #4]
 8006a1a:	4613      	mov	r3, r2
 8006a1c:	009b      	lsls	r3, r3, #2
 8006a1e:	4413      	add	r3, r2
 8006a20:	009b      	lsls	r3, r3, #2
 8006a22:	440b      	add	r3, r1
 8006a24:	3326      	adds	r3, #38	; 0x26
 8006a26:	2200      	movs	r2, #0
 8006a28:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	32b0      	adds	r2, #176	; 0xb0
 8006a34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d01f      	beq.n	8006a7c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006a42:	687a      	ldr	r2, [r7, #4]
 8006a44:	33b0      	adds	r3, #176	; 0xb0
 8006a46:	009b      	lsls	r3, r3, #2
 8006a48:	4413      	add	r3, r2
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	32b0      	adds	r2, #176	; 0xb0
 8006a5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f002 fb4a 	bl	80090f8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	32b0      	adds	r2, #176	; 0xb0
 8006a6e:	2100      	movs	r1, #0
 8006a70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2200      	movs	r2, #0
 8006a78:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006a7c:	2300      	movs	r3, #0
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3708      	adds	r7, #8
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}
 8006a86:	bf00      	nop
 8006a88:	20000093 	.word	0x20000093
 8006a8c:	20000094 	.word	0x20000094
 8006a90:	20000095 	.word	0x20000095

08006a94 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b086      	sub	sp, #24
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
 8006a9c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	32b0      	adds	r2, #176	; 0xb0
 8006aa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006aac:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d101      	bne.n	8006ac4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006ac0:	2303      	movs	r3, #3
 8006ac2:	e0bf      	b.n	8006c44 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d050      	beq.n	8006b72 <USBD_CDC_Setup+0xde>
 8006ad0:	2b20      	cmp	r3, #32
 8006ad2:	f040 80af 	bne.w	8006c34 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	88db      	ldrh	r3, [r3, #6]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d03a      	beq.n	8006b54 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	781b      	ldrb	r3, [r3, #0]
 8006ae2:	b25b      	sxtb	r3, r3
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	da1b      	bge.n	8006b20 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006aee:	687a      	ldr	r2, [r7, #4]
 8006af0:	33b0      	adds	r3, #176	; 0xb0
 8006af2:	009b      	lsls	r3, r3, #2
 8006af4:	4413      	add	r3, r2
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	689b      	ldr	r3, [r3, #8]
 8006afa:	683a      	ldr	r2, [r7, #0]
 8006afc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006afe:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006b00:	683a      	ldr	r2, [r7, #0]
 8006b02:	88d2      	ldrh	r2, [r2, #6]
 8006b04:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	88db      	ldrh	r3, [r3, #6]
 8006b0a:	2b07      	cmp	r3, #7
 8006b0c:	bf28      	it	cs
 8006b0e:	2307      	movcs	r3, #7
 8006b10:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	89fa      	ldrh	r2, [r7, #14]
 8006b16:	4619      	mov	r1, r3
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f001 fd89 	bl	8008630 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006b1e:	e090      	b.n	8006c42 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	785a      	ldrb	r2, [r3, #1]
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	88db      	ldrh	r3, [r3, #6]
 8006b2e:	2b3f      	cmp	r3, #63	; 0x3f
 8006b30:	d803      	bhi.n	8006b3a <USBD_CDC_Setup+0xa6>
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	88db      	ldrh	r3, [r3, #6]
 8006b36:	b2da      	uxtb	r2, r3
 8006b38:	e000      	b.n	8006b3c <USBD_CDC_Setup+0xa8>
 8006b3a:	2240      	movs	r2, #64	; 0x40
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006b42:	6939      	ldr	r1, [r7, #16]
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006b4a:	461a      	mov	r2, r3
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f001 fd9b 	bl	8008688 <USBD_CtlPrepareRx>
      break;
 8006b52:	e076      	b.n	8006c42 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006b5a:	687a      	ldr	r2, [r7, #4]
 8006b5c:	33b0      	adds	r3, #176	; 0xb0
 8006b5e:	009b      	lsls	r3, r3, #2
 8006b60:	4413      	add	r3, r2
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	689b      	ldr	r3, [r3, #8]
 8006b66:	683a      	ldr	r2, [r7, #0]
 8006b68:	7850      	ldrb	r0, [r2, #1]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	6839      	ldr	r1, [r7, #0]
 8006b6e:	4798      	blx	r3
      break;
 8006b70:	e067      	b.n	8006c42 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	785b      	ldrb	r3, [r3, #1]
 8006b76:	2b0b      	cmp	r3, #11
 8006b78:	d851      	bhi.n	8006c1e <USBD_CDC_Setup+0x18a>
 8006b7a:	a201      	add	r2, pc, #4	; (adr r2, 8006b80 <USBD_CDC_Setup+0xec>)
 8006b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b80:	08006bb1 	.word	0x08006bb1
 8006b84:	08006c2d 	.word	0x08006c2d
 8006b88:	08006c1f 	.word	0x08006c1f
 8006b8c:	08006c1f 	.word	0x08006c1f
 8006b90:	08006c1f 	.word	0x08006c1f
 8006b94:	08006c1f 	.word	0x08006c1f
 8006b98:	08006c1f 	.word	0x08006c1f
 8006b9c:	08006c1f 	.word	0x08006c1f
 8006ba0:	08006c1f 	.word	0x08006c1f
 8006ba4:	08006c1f 	.word	0x08006c1f
 8006ba8:	08006bdb 	.word	0x08006bdb
 8006bac:	08006c05 	.word	0x08006c05
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bb6:	b2db      	uxtb	r3, r3
 8006bb8:	2b03      	cmp	r3, #3
 8006bba:	d107      	bne.n	8006bcc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006bbc:	f107 030a 	add.w	r3, r7, #10
 8006bc0:	2202      	movs	r2, #2
 8006bc2:	4619      	mov	r1, r3
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f001 fd33 	bl	8008630 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006bca:	e032      	b.n	8006c32 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006bcc:	6839      	ldr	r1, [r7, #0]
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f001 fcbd 	bl	800854e <USBD_CtlError>
            ret = USBD_FAIL;
 8006bd4:	2303      	movs	r3, #3
 8006bd6:	75fb      	strb	r3, [r7, #23]
          break;
 8006bd8:	e02b      	b.n	8006c32 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006be0:	b2db      	uxtb	r3, r3
 8006be2:	2b03      	cmp	r3, #3
 8006be4:	d107      	bne.n	8006bf6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006be6:	f107 030d 	add.w	r3, r7, #13
 8006bea:	2201      	movs	r2, #1
 8006bec:	4619      	mov	r1, r3
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f001 fd1e 	bl	8008630 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006bf4:	e01d      	b.n	8006c32 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006bf6:	6839      	ldr	r1, [r7, #0]
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f001 fca8 	bl	800854e <USBD_CtlError>
            ret = USBD_FAIL;
 8006bfe:	2303      	movs	r3, #3
 8006c00:	75fb      	strb	r3, [r7, #23]
          break;
 8006c02:	e016      	b.n	8006c32 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c0a:	b2db      	uxtb	r3, r3
 8006c0c:	2b03      	cmp	r3, #3
 8006c0e:	d00f      	beq.n	8006c30 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006c10:	6839      	ldr	r1, [r7, #0]
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f001 fc9b 	bl	800854e <USBD_CtlError>
            ret = USBD_FAIL;
 8006c18:	2303      	movs	r3, #3
 8006c1a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006c1c:	e008      	b.n	8006c30 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006c1e:	6839      	ldr	r1, [r7, #0]
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f001 fc94 	bl	800854e <USBD_CtlError>
          ret = USBD_FAIL;
 8006c26:	2303      	movs	r3, #3
 8006c28:	75fb      	strb	r3, [r7, #23]
          break;
 8006c2a:	e002      	b.n	8006c32 <USBD_CDC_Setup+0x19e>
          break;
 8006c2c:	bf00      	nop
 8006c2e:	e008      	b.n	8006c42 <USBD_CDC_Setup+0x1ae>
          break;
 8006c30:	bf00      	nop
      }
      break;
 8006c32:	e006      	b.n	8006c42 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006c34:	6839      	ldr	r1, [r7, #0]
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f001 fc89 	bl	800854e <USBD_CtlError>
      ret = USBD_FAIL;
 8006c3c:	2303      	movs	r3, #3
 8006c3e:	75fb      	strb	r3, [r7, #23]
      break;
 8006c40:	bf00      	nop
  }

  return (uint8_t)ret;
 8006c42:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	3718      	adds	r7, #24
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}

08006c4c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b084      	sub	sp, #16
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	460b      	mov	r3, r1
 8006c56:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006c5e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	32b0      	adds	r2, #176	; 0xb0
 8006c6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d101      	bne.n	8006c76 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006c72:	2303      	movs	r3, #3
 8006c74:	e065      	b.n	8006d42 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	32b0      	adds	r2, #176	; 0xb0
 8006c80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c84:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006c86:	78fb      	ldrb	r3, [r7, #3]
 8006c88:	f003 020f 	and.w	r2, r3, #15
 8006c8c:	6879      	ldr	r1, [r7, #4]
 8006c8e:	4613      	mov	r3, r2
 8006c90:	009b      	lsls	r3, r3, #2
 8006c92:	4413      	add	r3, r2
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	440b      	add	r3, r1
 8006c98:	3318      	adds	r3, #24
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d02f      	beq.n	8006d00 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006ca0:	78fb      	ldrb	r3, [r7, #3]
 8006ca2:	f003 020f 	and.w	r2, r3, #15
 8006ca6:	6879      	ldr	r1, [r7, #4]
 8006ca8:	4613      	mov	r3, r2
 8006caa:	009b      	lsls	r3, r3, #2
 8006cac:	4413      	add	r3, r2
 8006cae:	009b      	lsls	r3, r3, #2
 8006cb0:	440b      	add	r3, r1
 8006cb2:	3318      	adds	r3, #24
 8006cb4:	681a      	ldr	r2, [r3, #0]
 8006cb6:	78fb      	ldrb	r3, [r7, #3]
 8006cb8:	f003 010f 	and.w	r1, r3, #15
 8006cbc:	68f8      	ldr	r0, [r7, #12]
 8006cbe:	460b      	mov	r3, r1
 8006cc0:	00db      	lsls	r3, r3, #3
 8006cc2:	440b      	add	r3, r1
 8006cc4:	009b      	lsls	r3, r3, #2
 8006cc6:	4403      	add	r3, r0
 8006cc8:	3348      	adds	r3, #72	; 0x48
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	fbb2 f1f3 	udiv	r1, r2, r3
 8006cd0:	fb01 f303 	mul.w	r3, r1, r3
 8006cd4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d112      	bne.n	8006d00 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006cda:	78fb      	ldrb	r3, [r7, #3]
 8006cdc:	f003 020f 	and.w	r2, r3, #15
 8006ce0:	6879      	ldr	r1, [r7, #4]
 8006ce2:	4613      	mov	r3, r2
 8006ce4:	009b      	lsls	r3, r3, #2
 8006ce6:	4413      	add	r3, r2
 8006ce8:	009b      	lsls	r3, r3, #2
 8006cea:	440b      	add	r3, r1
 8006cec:	3318      	adds	r3, #24
 8006cee:	2200      	movs	r2, #0
 8006cf0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006cf2:	78f9      	ldrb	r1, [r7, #3]
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f002 f99a 	bl	8009032 <USBD_LL_Transmit>
 8006cfe:	e01f      	b.n	8006d40 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	2200      	movs	r2, #0
 8006d04:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006d0e:	687a      	ldr	r2, [r7, #4]
 8006d10:	33b0      	adds	r3, #176	; 0xb0
 8006d12:	009b      	lsls	r3, r3, #2
 8006d14:	4413      	add	r3, r2
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	691b      	ldr	r3, [r3, #16]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d010      	beq.n	8006d40 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006d24:	687a      	ldr	r2, [r7, #4]
 8006d26:	33b0      	adds	r3, #176	; 0xb0
 8006d28:	009b      	lsls	r3, r3, #2
 8006d2a:	4413      	add	r3, r2
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	691b      	ldr	r3, [r3, #16]
 8006d30:	68ba      	ldr	r2, [r7, #8]
 8006d32:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006d36:	68ba      	ldr	r2, [r7, #8]
 8006d38:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006d3c:	78fa      	ldrb	r2, [r7, #3]
 8006d3e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006d40:	2300      	movs	r3, #0
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3710      	adds	r7, #16
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}

08006d4a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006d4a:	b580      	push	{r7, lr}
 8006d4c:	b084      	sub	sp, #16
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	6078      	str	r0, [r7, #4]
 8006d52:	460b      	mov	r3, r1
 8006d54:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	32b0      	adds	r2, #176	; 0xb0
 8006d60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d64:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	32b0      	adds	r2, #176	; 0xb0
 8006d70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d101      	bne.n	8006d7c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006d78:	2303      	movs	r3, #3
 8006d7a:	e01a      	b.n	8006db2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006d7c:	78fb      	ldrb	r3, [r7, #3]
 8006d7e:	4619      	mov	r1, r3
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f002 f998 	bl	80090b6 <USBD_LL_GetRxDataSize>
 8006d86:	4602      	mov	r2, r0
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006d94:	687a      	ldr	r2, [r7, #4]
 8006d96:	33b0      	adds	r3, #176	; 0xb0
 8006d98:	009b      	lsls	r3, r3, #2
 8006d9a:	4413      	add	r3, r2
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	68db      	ldr	r3, [r3, #12]
 8006da0:	68fa      	ldr	r2, [r7, #12]
 8006da2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006da6:	68fa      	ldr	r2, [r7, #12]
 8006da8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006dac:	4611      	mov	r1, r2
 8006dae:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006db0:	2300      	movs	r3, #0
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3710      	adds	r7, #16
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}

08006dba <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006dba:	b580      	push	{r7, lr}
 8006dbc:	b084      	sub	sp, #16
 8006dbe:	af00      	add	r7, sp, #0
 8006dc0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	32b0      	adds	r2, #176	; 0xb0
 8006dcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dd0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d101      	bne.n	8006ddc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006dd8:	2303      	movs	r3, #3
 8006dda:	e025      	b.n	8006e28 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	33b0      	adds	r3, #176	; 0xb0
 8006de6:	009b      	lsls	r3, r3, #2
 8006de8:	4413      	add	r3, r2
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d01a      	beq.n	8006e26 <USBD_CDC_EP0_RxReady+0x6c>
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006df6:	2bff      	cmp	r3, #255	; 0xff
 8006df8:	d015      	beq.n	8006e26 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006e00:	687a      	ldr	r2, [r7, #4]
 8006e02:	33b0      	adds	r3, #176	; 0xb0
 8006e04:	009b      	lsls	r3, r3, #2
 8006e06:	4413      	add	r3, r2
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	68fa      	ldr	r2, [r7, #12]
 8006e0e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006e12:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006e14:	68fa      	ldr	r2, [r7, #12]
 8006e16:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006e1a:	b292      	uxth	r2, r2
 8006e1c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	22ff      	movs	r2, #255	; 0xff
 8006e22:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006e26:	2300      	movs	r3, #0
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3710      	adds	r7, #16
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}

08006e30 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b086      	sub	sp, #24
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006e38:	2182      	movs	r1, #130	; 0x82
 8006e3a:	4818      	ldr	r0, [pc, #96]	; (8006e9c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006e3c:	f000 fd4f 	bl	80078de <USBD_GetEpDesc>
 8006e40:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006e42:	2101      	movs	r1, #1
 8006e44:	4815      	ldr	r0, [pc, #84]	; (8006e9c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006e46:	f000 fd4a 	bl	80078de <USBD_GetEpDesc>
 8006e4a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006e4c:	2181      	movs	r1, #129	; 0x81
 8006e4e:	4813      	ldr	r0, [pc, #76]	; (8006e9c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006e50:	f000 fd45 	bl	80078de <USBD_GetEpDesc>
 8006e54:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d002      	beq.n	8006e62 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	2210      	movs	r2, #16
 8006e60:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d006      	beq.n	8006e76 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e70:	711a      	strb	r2, [r3, #4]
 8006e72:	2200      	movs	r2, #0
 8006e74:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d006      	beq.n	8006e8a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e84:	711a      	strb	r2, [r3, #4]
 8006e86:	2200      	movs	r2, #0
 8006e88:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2243      	movs	r2, #67	; 0x43
 8006e8e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006e90:	4b02      	ldr	r3, [pc, #8]	; (8006e9c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	3718      	adds	r7, #24
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}
 8006e9a:	bf00      	nop
 8006e9c:	20000050 	.word	0x20000050

08006ea0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b086      	sub	sp, #24
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006ea8:	2182      	movs	r1, #130	; 0x82
 8006eaa:	4818      	ldr	r0, [pc, #96]	; (8006f0c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006eac:	f000 fd17 	bl	80078de <USBD_GetEpDesc>
 8006eb0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006eb2:	2101      	movs	r1, #1
 8006eb4:	4815      	ldr	r0, [pc, #84]	; (8006f0c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006eb6:	f000 fd12 	bl	80078de <USBD_GetEpDesc>
 8006eba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006ebc:	2181      	movs	r1, #129	; 0x81
 8006ebe:	4813      	ldr	r0, [pc, #76]	; (8006f0c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006ec0:	f000 fd0d 	bl	80078de <USBD_GetEpDesc>
 8006ec4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d002      	beq.n	8006ed2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	2210      	movs	r2, #16
 8006ed0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d006      	beq.n	8006ee6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	2200      	movs	r2, #0
 8006edc:	711a      	strb	r2, [r3, #4]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	f042 0202 	orr.w	r2, r2, #2
 8006ee4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d006      	beq.n	8006efa <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	711a      	strb	r2, [r3, #4]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	f042 0202 	orr.w	r2, r2, #2
 8006ef8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2243      	movs	r2, #67	; 0x43
 8006efe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006f00:	4b02      	ldr	r3, [pc, #8]	; (8006f0c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3718      	adds	r7, #24
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}
 8006f0a:	bf00      	nop
 8006f0c:	20000050 	.word	0x20000050

08006f10 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b086      	sub	sp, #24
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006f18:	2182      	movs	r1, #130	; 0x82
 8006f1a:	4818      	ldr	r0, [pc, #96]	; (8006f7c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006f1c:	f000 fcdf 	bl	80078de <USBD_GetEpDesc>
 8006f20:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006f22:	2101      	movs	r1, #1
 8006f24:	4815      	ldr	r0, [pc, #84]	; (8006f7c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006f26:	f000 fcda 	bl	80078de <USBD_GetEpDesc>
 8006f2a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006f2c:	2181      	movs	r1, #129	; 0x81
 8006f2e:	4813      	ldr	r0, [pc, #76]	; (8006f7c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006f30:	f000 fcd5 	bl	80078de <USBD_GetEpDesc>
 8006f34:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d002      	beq.n	8006f42 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	2210      	movs	r2, #16
 8006f40:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d006      	beq.n	8006f56 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f50:	711a      	strb	r2, [r3, #4]
 8006f52:	2200      	movs	r2, #0
 8006f54:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d006      	beq.n	8006f6a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f64:	711a      	strb	r2, [r3, #4]
 8006f66:	2200      	movs	r2, #0
 8006f68:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2243      	movs	r2, #67	; 0x43
 8006f6e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006f70:	4b02      	ldr	r3, [pc, #8]	; (8006f7c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3718      	adds	r7, #24
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}
 8006f7a:	bf00      	nop
 8006f7c:	20000050 	.word	0x20000050

08006f80 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b083      	sub	sp, #12
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	220a      	movs	r2, #10
 8006f8c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006f8e:	4b03      	ldr	r3, [pc, #12]	; (8006f9c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	370c      	adds	r7, #12
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	4770      	bx	lr
 8006f9c:	2000000c 	.word	0x2000000c

08006fa0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b083      	sub	sp, #12
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
 8006fa8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d101      	bne.n	8006fb4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006fb0:	2303      	movs	r3, #3
 8006fb2:	e009      	b.n	8006fc8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006fba:	687a      	ldr	r2, [r7, #4]
 8006fbc:	33b0      	adds	r3, #176	; 0xb0
 8006fbe:	009b      	lsls	r3, r3, #2
 8006fc0:	4413      	add	r3, r2
 8006fc2:	683a      	ldr	r2, [r7, #0]
 8006fc4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006fc6:	2300      	movs	r3, #0
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	370c      	adds	r7, #12
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd2:	4770      	bx	lr

08006fd4 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b087      	sub	sp, #28
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	60f8      	str	r0, [r7, #12]
 8006fdc:	60b9      	str	r1, [r7, #8]
 8006fde:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	32b0      	adds	r2, #176	; 0xb0
 8006fea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fee:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d101      	bne.n	8006ffa <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006ff6:	2303      	movs	r3, #3
 8006ff8:	e008      	b.n	800700c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	68ba      	ldr	r2, [r7, #8]
 8006ffe:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	687a      	ldr	r2, [r7, #4]
 8007006:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800700a:	2300      	movs	r3, #0
}
 800700c:	4618      	mov	r0, r3
 800700e:	371c      	adds	r7, #28
 8007010:	46bd      	mov	sp, r7
 8007012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007016:	4770      	bx	lr

08007018 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007018:	b480      	push	{r7}
 800701a:	b085      	sub	sp, #20
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	32b0      	adds	r2, #176	; 0xb0
 800702c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007030:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d101      	bne.n	800703c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007038:	2303      	movs	r3, #3
 800703a:	e004      	b.n	8007046 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	683a      	ldr	r2, [r7, #0]
 8007040:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007044:	2300      	movs	r3, #0
}
 8007046:	4618      	mov	r0, r3
 8007048:	3714      	adds	r7, #20
 800704a:	46bd      	mov	sp, r7
 800704c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007050:	4770      	bx	lr
	...

08007054 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b084      	sub	sp, #16
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	32b0      	adds	r2, #176	; 0xb0
 8007066:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800706a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800706c:	2301      	movs	r3, #1
 800706e:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	32b0      	adds	r2, #176	; 0xb0
 800707a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d101      	bne.n	8007086 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007082:	2303      	movs	r3, #3
 8007084:	e025      	b.n	80070d2 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800708c:	2b00      	cmp	r3, #0
 800708e:	d11f      	bne.n	80070d0 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	2201      	movs	r2, #1
 8007094:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007098:	4b10      	ldr	r3, [pc, #64]	; (80070dc <USBD_CDC_TransmitPacket+0x88>)
 800709a:	781b      	ldrb	r3, [r3, #0]
 800709c:	f003 020f 	and.w	r2, r3, #15
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	4613      	mov	r3, r2
 80070aa:	009b      	lsls	r3, r3, #2
 80070ac:	4413      	add	r3, r2
 80070ae:	009b      	lsls	r3, r3, #2
 80070b0:	4403      	add	r3, r0
 80070b2:	3318      	adds	r3, #24
 80070b4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80070b6:	4b09      	ldr	r3, [pc, #36]	; (80070dc <USBD_CDC_TransmitPacket+0x88>)
 80070b8:	7819      	ldrb	r1, [r3, #0]
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f001 ffb3 	bl	8009032 <USBD_LL_Transmit>

    ret = USBD_OK;
 80070cc:	2300      	movs	r3, #0
 80070ce:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80070d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3710      	adds	r7, #16
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}
 80070da:	bf00      	nop
 80070dc:	20000093 	.word	0x20000093

080070e0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b084      	sub	sp, #16
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	32b0      	adds	r2, #176	; 0xb0
 80070f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070f6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	32b0      	adds	r2, #176	; 0xb0
 8007102:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d101      	bne.n	800710e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800710a:	2303      	movs	r3, #3
 800710c:	e018      	b.n	8007140 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	7c1b      	ldrb	r3, [r3, #16]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d10a      	bne.n	800712c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007116:	4b0c      	ldr	r3, [pc, #48]	; (8007148 <USBD_CDC_ReceivePacket+0x68>)
 8007118:	7819      	ldrb	r1, [r3, #0]
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007120:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f001 ffa5 	bl	8009074 <USBD_LL_PrepareReceive>
 800712a:	e008      	b.n	800713e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800712c:	4b06      	ldr	r3, [pc, #24]	; (8007148 <USBD_CDC_ReceivePacket+0x68>)
 800712e:	7819      	ldrb	r1, [r3, #0]
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007136:	2340      	movs	r3, #64	; 0x40
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f001 ff9b 	bl	8009074 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800713e:	2300      	movs	r3, #0
}
 8007140:	4618      	mov	r0, r3
 8007142:	3710      	adds	r7, #16
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}
 8007148:	20000094 	.word	0x20000094

0800714c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b086      	sub	sp, #24
 8007150:	af00      	add	r7, sp, #0
 8007152:	60f8      	str	r0, [r7, #12]
 8007154:	60b9      	str	r1, [r7, #8]
 8007156:	4613      	mov	r3, r2
 8007158:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d101      	bne.n	8007164 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007160:	2303      	movs	r3, #3
 8007162:	e01f      	b.n	80071a4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2200      	movs	r2, #0
 8007168:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	2200      	movs	r2, #0
 8007170:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2200      	movs	r2, #0
 8007178:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d003      	beq.n	800718a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	68ba      	ldr	r2, [r7, #8]
 8007186:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2201      	movs	r2, #1
 800718e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	79fa      	ldrb	r2, [r7, #7]
 8007196:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007198:	68f8      	ldr	r0, [r7, #12]
 800719a:	f001 fe15 	bl	8008dc8 <USBD_LL_Init>
 800719e:	4603      	mov	r3, r0
 80071a0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80071a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3718      	adds	r7, #24
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b084      	sub	sp, #16
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80071b6:	2300      	movs	r3, #0
 80071b8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d101      	bne.n	80071c4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80071c0:	2303      	movs	r3, #3
 80071c2:	e025      	b.n	8007210 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	683a      	ldr	r2, [r7, #0]
 80071c8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	32ae      	adds	r2, #174	; 0xae
 80071d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d00f      	beq.n	8007200 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	32ae      	adds	r2, #174	; 0xae
 80071ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071f0:	f107 020e 	add.w	r2, r7, #14
 80071f4:	4610      	mov	r0, r2
 80071f6:	4798      	blx	r3
 80071f8:	4602      	mov	r2, r0
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007206:	1c5a      	adds	r2, r3, #1
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800720e:	2300      	movs	r3, #0
}
 8007210:	4618      	mov	r0, r3
 8007212:	3710      	adds	r7, #16
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}

08007218 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b082      	sub	sp, #8
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f001 fe1d 	bl	8008e60 <USBD_LL_Start>
 8007226:	4603      	mov	r3, r0
}
 8007228:	4618      	mov	r0, r3
 800722a:	3708      	adds	r7, #8
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}

08007230 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007230:	b480      	push	{r7}
 8007232:	b083      	sub	sp, #12
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007238:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800723a:	4618      	mov	r0, r3
 800723c:	370c      	adds	r7, #12
 800723e:	46bd      	mov	sp, r7
 8007240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007244:	4770      	bx	lr

08007246 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007246:	b580      	push	{r7, lr}
 8007248:	b084      	sub	sp, #16
 800724a:	af00      	add	r7, sp, #0
 800724c:	6078      	str	r0, [r7, #4]
 800724e:	460b      	mov	r3, r1
 8007250:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007252:	2300      	movs	r3, #0
 8007254:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800725c:	2b00      	cmp	r3, #0
 800725e:	d009      	beq.n	8007274 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	78fa      	ldrb	r2, [r7, #3]
 800726a:	4611      	mov	r1, r2
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	4798      	blx	r3
 8007270:	4603      	mov	r3, r0
 8007272:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007274:	7bfb      	ldrb	r3, [r7, #15]
}
 8007276:	4618      	mov	r0, r3
 8007278:	3710      	adds	r7, #16
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}

0800727e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800727e:	b580      	push	{r7, lr}
 8007280:	b084      	sub	sp, #16
 8007282:	af00      	add	r7, sp, #0
 8007284:	6078      	str	r0, [r7, #4]
 8007286:	460b      	mov	r3, r1
 8007288:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800728a:	2300      	movs	r3, #0
 800728c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	78fa      	ldrb	r2, [r7, #3]
 8007298:	4611      	mov	r1, r2
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	4798      	blx	r3
 800729e:	4603      	mov	r3, r0
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d001      	beq.n	80072a8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80072a4:	2303      	movs	r3, #3
 80072a6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80072a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3710      	adds	r7, #16
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}

080072b2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80072b2:	b580      	push	{r7, lr}
 80072b4:	b084      	sub	sp, #16
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]
 80072ba:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80072c2:	6839      	ldr	r1, [r7, #0]
 80072c4:	4618      	mov	r0, r3
 80072c6:	f001 f908 	bl	80084da <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2201      	movs	r2, #1
 80072ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80072d8:	461a      	mov	r2, r3
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80072e6:	f003 031f 	and.w	r3, r3, #31
 80072ea:	2b02      	cmp	r3, #2
 80072ec:	d01a      	beq.n	8007324 <USBD_LL_SetupStage+0x72>
 80072ee:	2b02      	cmp	r3, #2
 80072f0:	d822      	bhi.n	8007338 <USBD_LL_SetupStage+0x86>
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d002      	beq.n	80072fc <USBD_LL_SetupStage+0x4a>
 80072f6:	2b01      	cmp	r3, #1
 80072f8:	d00a      	beq.n	8007310 <USBD_LL_SetupStage+0x5e>
 80072fa:	e01d      	b.n	8007338 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007302:	4619      	mov	r1, r3
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f000 fb5f 	bl	80079c8 <USBD_StdDevReq>
 800730a:	4603      	mov	r3, r0
 800730c:	73fb      	strb	r3, [r7, #15]
      break;
 800730e:	e020      	b.n	8007352 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007316:	4619      	mov	r1, r3
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f000 fbc7 	bl	8007aac <USBD_StdItfReq>
 800731e:	4603      	mov	r3, r0
 8007320:	73fb      	strb	r3, [r7, #15]
      break;
 8007322:	e016      	b.n	8007352 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800732a:	4619      	mov	r1, r3
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f000 fc29 	bl	8007b84 <USBD_StdEPReq>
 8007332:	4603      	mov	r3, r0
 8007334:	73fb      	strb	r3, [r7, #15]
      break;
 8007336:	e00c      	b.n	8007352 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800733e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007342:	b2db      	uxtb	r3, r3
 8007344:	4619      	mov	r1, r3
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f001 fdea 	bl	8008f20 <USBD_LL_StallEP>
 800734c:	4603      	mov	r3, r0
 800734e:	73fb      	strb	r3, [r7, #15]
      break;
 8007350:	bf00      	nop
  }

  return ret;
 8007352:	7bfb      	ldrb	r3, [r7, #15]
}
 8007354:	4618      	mov	r0, r3
 8007356:	3710      	adds	r7, #16
 8007358:	46bd      	mov	sp, r7
 800735a:	bd80      	pop	{r7, pc}

0800735c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b086      	sub	sp, #24
 8007360:	af00      	add	r7, sp, #0
 8007362:	60f8      	str	r0, [r7, #12]
 8007364:	460b      	mov	r3, r1
 8007366:	607a      	str	r2, [r7, #4]
 8007368:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800736a:	2300      	movs	r3, #0
 800736c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800736e:	7afb      	ldrb	r3, [r7, #11]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d16e      	bne.n	8007452 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800737a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007382:	2b03      	cmp	r3, #3
 8007384:	f040 8098 	bne.w	80074b8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	689a      	ldr	r2, [r3, #8]
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	68db      	ldr	r3, [r3, #12]
 8007390:	429a      	cmp	r2, r3
 8007392:	d913      	bls.n	80073bc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	689a      	ldr	r2, [r3, #8]
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	68db      	ldr	r3, [r3, #12]
 800739c:	1ad2      	subs	r2, r2, r3
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	68da      	ldr	r2, [r3, #12]
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	689b      	ldr	r3, [r3, #8]
 80073aa:	4293      	cmp	r3, r2
 80073ac:	bf28      	it	cs
 80073ae:	4613      	movcs	r3, r2
 80073b0:	461a      	mov	r2, r3
 80073b2:	6879      	ldr	r1, [r7, #4]
 80073b4:	68f8      	ldr	r0, [r7, #12]
 80073b6:	f001 f984 	bl	80086c2 <USBD_CtlContinueRx>
 80073ba:	e07d      	b.n	80074b8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80073c2:	f003 031f 	and.w	r3, r3, #31
 80073c6:	2b02      	cmp	r3, #2
 80073c8:	d014      	beq.n	80073f4 <USBD_LL_DataOutStage+0x98>
 80073ca:	2b02      	cmp	r3, #2
 80073cc:	d81d      	bhi.n	800740a <USBD_LL_DataOutStage+0xae>
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d002      	beq.n	80073d8 <USBD_LL_DataOutStage+0x7c>
 80073d2:	2b01      	cmp	r3, #1
 80073d4:	d003      	beq.n	80073de <USBD_LL_DataOutStage+0x82>
 80073d6:	e018      	b.n	800740a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80073d8:	2300      	movs	r3, #0
 80073da:	75bb      	strb	r3, [r7, #22]
            break;
 80073dc:	e018      	b.n	8007410 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80073e4:	b2db      	uxtb	r3, r3
 80073e6:	4619      	mov	r1, r3
 80073e8:	68f8      	ldr	r0, [r7, #12]
 80073ea:	f000 fa5e 	bl	80078aa <USBD_CoreFindIF>
 80073ee:	4603      	mov	r3, r0
 80073f0:	75bb      	strb	r3, [r7, #22]
            break;
 80073f2:	e00d      	b.n	8007410 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80073fa:	b2db      	uxtb	r3, r3
 80073fc:	4619      	mov	r1, r3
 80073fe:	68f8      	ldr	r0, [r7, #12]
 8007400:	f000 fa60 	bl	80078c4 <USBD_CoreFindEP>
 8007404:	4603      	mov	r3, r0
 8007406:	75bb      	strb	r3, [r7, #22]
            break;
 8007408:	e002      	b.n	8007410 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800740a:	2300      	movs	r3, #0
 800740c:	75bb      	strb	r3, [r7, #22]
            break;
 800740e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007410:	7dbb      	ldrb	r3, [r7, #22]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d119      	bne.n	800744a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800741c:	b2db      	uxtb	r3, r3
 800741e:	2b03      	cmp	r3, #3
 8007420:	d113      	bne.n	800744a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007422:	7dba      	ldrb	r2, [r7, #22]
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	32ae      	adds	r2, #174	; 0xae
 8007428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800742c:	691b      	ldr	r3, [r3, #16]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d00b      	beq.n	800744a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007432:	7dba      	ldrb	r2, [r7, #22]
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800743a:	7dba      	ldrb	r2, [r7, #22]
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	32ae      	adds	r2, #174	; 0xae
 8007440:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007444:	691b      	ldr	r3, [r3, #16]
 8007446:	68f8      	ldr	r0, [r7, #12]
 8007448:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800744a:	68f8      	ldr	r0, [r7, #12]
 800744c:	f001 f94a 	bl	80086e4 <USBD_CtlSendStatus>
 8007450:	e032      	b.n	80074b8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007452:	7afb      	ldrb	r3, [r7, #11]
 8007454:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007458:	b2db      	uxtb	r3, r3
 800745a:	4619      	mov	r1, r3
 800745c:	68f8      	ldr	r0, [r7, #12]
 800745e:	f000 fa31 	bl	80078c4 <USBD_CoreFindEP>
 8007462:	4603      	mov	r3, r0
 8007464:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007466:	7dbb      	ldrb	r3, [r7, #22]
 8007468:	2bff      	cmp	r3, #255	; 0xff
 800746a:	d025      	beq.n	80074b8 <USBD_LL_DataOutStage+0x15c>
 800746c:	7dbb      	ldrb	r3, [r7, #22]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d122      	bne.n	80074b8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007478:	b2db      	uxtb	r3, r3
 800747a:	2b03      	cmp	r3, #3
 800747c:	d117      	bne.n	80074ae <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800747e:	7dba      	ldrb	r2, [r7, #22]
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	32ae      	adds	r2, #174	; 0xae
 8007484:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007488:	699b      	ldr	r3, [r3, #24]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d00f      	beq.n	80074ae <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800748e:	7dba      	ldrb	r2, [r7, #22]
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007496:	7dba      	ldrb	r2, [r7, #22]
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	32ae      	adds	r2, #174	; 0xae
 800749c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074a0:	699b      	ldr	r3, [r3, #24]
 80074a2:	7afa      	ldrb	r2, [r7, #11]
 80074a4:	4611      	mov	r1, r2
 80074a6:	68f8      	ldr	r0, [r7, #12]
 80074a8:	4798      	blx	r3
 80074aa:	4603      	mov	r3, r0
 80074ac:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80074ae:	7dfb      	ldrb	r3, [r7, #23]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d001      	beq.n	80074b8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80074b4:	7dfb      	ldrb	r3, [r7, #23]
 80074b6:	e000      	b.n	80074ba <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80074b8:	2300      	movs	r3, #0
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3718      	adds	r7, #24
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}

080074c2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80074c2:	b580      	push	{r7, lr}
 80074c4:	b086      	sub	sp, #24
 80074c6:	af00      	add	r7, sp, #0
 80074c8:	60f8      	str	r0, [r7, #12]
 80074ca:	460b      	mov	r3, r1
 80074cc:	607a      	str	r2, [r7, #4]
 80074ce:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80074d0:	7afb      	ldrb	r3, [r7, #11]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d16f      	bne.n	80075b6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	3314      	adds	r3, #20
 80074da:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80074e2:	2b02      	cmp	r3, #2
 80074e4:	d15a      	bne.n	800759c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	689a      	ldr	r2, [r3, #8]
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	68db      	ldr	r3, [r3, #12]
 80074ee:	429a      	cmp	r2, r3
 80074f0:	d914      	bls.n	800751c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80074f2:	693b      	ldr	r3, [r7, #16]
 80074f4:	689a      	ldr	r2, [r3, #8]
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	68db      	ldr	r3, [r3, #12]
 80074fa:	1ad2      	subs	r2, r2, r3
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	689b      	ldr	r3, [r3, #8]
 8007504:	461a      	mov	r2, r3
 8007506:	6879      	ldr	r1, [r7, #4]
 8007508:	68f8      	ldr	r0, [r7, #12]
 800750a:	f001 f8ac 	bl	8008666 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800750e:	2300      	movs	r3, #0
 8007510:	2200      	movs	r2, #0
 8007512:	2100      	movs	r1, #0
 8007514:	68f8      	ldr	r0, [r7, #12]
 8007516:	f001 fdad 	bl	8009074 <USBD_LL_PrepareReceive>
 800751a:	e03f      	b.n	800759c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	68da      	ldr	r2, [r3, #12]
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	689b      	ldr	r3, [r3, #8]
 8007524:	429a      	cmp	r2, r3
 8007526:	d11c      	bne.n	8007562 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	685a      	ldr	r2, [r3, #4]
 800752c:	693b      	ldr	r3, [r7, #16]
 800752e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007530:	429a      	cmp	r2, r3
 8007532:	d316      	bcc.n	8007562 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	685a      	ldr	r2, [r3, #4]
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800753e:	429a      	cmp	r2, r3
 8007540:	d20f      	bcs.n	8007562 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007542:	2200      	movs	r2, #0
 8007544:	2100      	movs	r1, #0
 8007546:	68f8      	ldr	r0, [r7, #12]
 8007548:	f001 f88d 	bl	8008666 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	2200      	movs	r2, #0
 8007550:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007554:	2300      	movs	r3, #0
 8007556:	2200      	movs	r2, #0
 8007558:	2100      	movs	r1, #0
 800755a:	68f8      	ldr	r0, [r7, #12]
 800755c:	f001 fd8a 	bl	8009074 <USBD_LL_PrepareReceive>
 8007560:	e01c      	b.n	800759c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007568:	b2db      	uxtb	r3, r3
 800756a:	2b03      	cmp	r3, #3
 800756c:	d10f      	bne.n	800758e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007574:	68db      	ldr	r3, [r3, #12]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d009      	beq.n	800758e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2200      	movs	r2, #0
 800757e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007588:	68db      	ldr	r3, [r3, #12]
 800758a:	68f8      	ldr	r0, [r7, #12]
 800758c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800758e:	2180      	movs	r1, #128	; 0x80
 8007590:	68f8      	ldr	r0, [r7, #12]
 8007592:	f001 fcc5 	bl	8008f20 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007596:	68f8      	ldr	r0, [r7, #12]
 8007598:	f001 f8b7 	bl	800870a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d03a      	beq.n	800761c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80075a6:	68f8      	ldr	r0, [r7, #12]
 80075a8:	f7ff fe42 	bl	8007230 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2200      	movs	r2, #0
 80075b0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80075b4:	e032      	b.n	800761c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80075b6:	7afb      	ldrb	r3, [r7, #11]
 80075b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80075bc:	b2db      	uxtb	r3, r3
 80075be:	4619      	mov	r1, r3
 80075c0:	68f8      	ldr	r0, [r7, #12]
 80075c2:	f000 f97f 	bl	80078c4 <USBD_CoreFindEP>
 80075c6:	4603      	mov	r3, r0
 80075c8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80075ca:	7dfb      	ldrb	r3, [r7, #23]
 80075cc:	2bff      	cmp	r3, #255	; 0xff
 80075ce:	d025      	beq.n	800761c <USBD_LL_DataInStage+0x15a>
 80075d0:	7dfb      	ldrb	r3, [r7, #23]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d122      	bne.n	800761c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075dc:	b2db      	uxtb	r3, r3
 80075de:	2b03      	cmp	r3, #3
 80075e0:	d11c      	bne.n	800761c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80075e2:	7dfa      	ldrb	r2, [r7, #23]
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	32ae      	adds	r2, #174	; 0xae
 80075e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075ec:	695b      	ldr	r3, [r3, #20]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d014      	beq.n	800761c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80075f2:	7dfa      	ldrb	r2, [r7, #23]
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80075fa:	7dfa      	ldrb	r2, [r7, #23]
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	32ae      	adds	r2, #174	; 0xae
 8007600:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007604:	695b      	ldr	r3, [r3, #20]
 8007606:	7afa      	ldrb	r2, [r7, #11]
 8007608:	4611      	mov	r1, r2
 800760a:	68f8      	ldr	r0, [r7, #12]
 800760c:	4798      	blx	r3
 800760e:	4603      	mov	r3, r0
 8007610:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007612:	7dbb      	ldrb	r3, [r7, #22]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d001      	beq.n	800761c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007618:	7dbb      	ldrb	r3, [r7, #22]
 800761a:	e000      	b.n	800761e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800761c:	2300      	movs	r3, #0
}
 800761e:	4618      	mov	r0, r3
 8007620:	3718      	adds	r7, #24
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}

08007626 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007626:	b580      	push	{r7, lr}
 8007628:	b084      	sub	sp, #16
 800762a:	af00      	add	r7, sp, #0
 800762c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800762e:	2300      	movs	r3, #0
 8007630:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2201      	movs	r2, #1
 8007636:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2200      	movs	r2, #0
 800763e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2200      	movs	r2, #0
 8007646:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2200      	movs	r2, #0
 800764c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2200      	movs	r2, #0
 8007654:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800765e:	2b00      	cmp	r3, #0
 8007660:	d014      	beq.n	800768c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d00e      	beq.n	800768c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	687a      	ldr	r2, [r7, #4]
 8007678:	6852      	ldr	r2, [r2, #4]
 800767a:	b2d2      	uxtb	r2, r2
 800767c:	4611      	mov	r1, r2
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	4798      	blx	r3
 8007682:	4603      	mov	r3, r0
 8007684:	2b00      	cmp	r3, #0
 8007686:	d001      	beq.n	800768c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007688:	2303      	movs	r3, #3
 800768a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800768c:	2340      	movs	r3, #64	; 0x40
 800768e:	2200      	movs	r2, #0
 8007690:	2100      	movs	r1, #0
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f001 fbff 	bl	8008e96 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2201      	movs	r2, #1
 800769c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2240      	movs	r2, #64	; 0x40
 80076a4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80076a8:	2340      	movs	r3, #64	; 0x40
 80076aa:	2200      	movs	r2, #0
 80076ac:	2180      	movs	r1, #128	; 0x80
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f001 fbf1 	bl	8008e96 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2201      	movs	r2, #1
 80076b8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2240      	movs	r2, #64	; 0x40
 80076be:	621a      	str	r2, [r3, #32]

  return ret;
 80076c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3710      	adds	r7, #16
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}

080076ca <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80076ca:	b480      	push	{r7}
 80076cc:	b083      	sub	sp, #12
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	6078      	str	r0, [r7, #4]
 80076d2:	460b      	mov	r3, r1
 80076d4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	78fa      	ldrb	r2, [r7, #3]
 80076da:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80076dc:	2300      	movs	r3, #0
}
 80076de:	4618      	mov	r0, r3
 80076e0:	370c      	adds	r7, #12
 80076e2:	46bd      	mov	sp, r7
 80076e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e8:	4770      	bx	lr

080076ea <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80076ea:	b480      	push	{r7}
 80076ec:	b083      	sub	sp, #12
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076f8:	b2da      	uxtb	r2, r3
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2204      	movs	r2, #4
 8007704:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007708:	2300      	movs	r3, #0
}
 800770a:	4618      	mov	r0, r3
 800770c:	370c      	adds	r7, #12
 800770e:	46bd      	mov	sp, r7
 8007710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007714:	4770      	bx	lr

08007716 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007716:	b480      	push	{r7}
 8007718:	b083      	sub	sp, #12
 800771a:	af00      	add	r7, sp, #0
 800771c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007724:	b2db      	uxtb	r3, r3
 8007726:	2b04      	cmp	r3, #4
 8007728:	d106      	bne.n	8007738 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007730:	b2da      	uxtb	r2, r3
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007738:	2300      	movs	r3, #0
}
 800773a:	4618      	mov	r0, r3
 800773c:	370c      	adds	r7, #12
 800773e:	46bd      	mov	sp, r7
 8007740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007744:	4770      	bx	lr

08007746 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007746:	b580      	push	{r7, lr}
 8007748:	b082      	sub	sp, #8
 800774a:	af00      	add	r7, sp, #0
 800774c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007754:	b2db      	uxtb	r3, r3
 8007756:	2b03      	cmp	r3, #3
 8007758:	d110      	bne.n	800777c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007760:	2b00      	cmp	r3, #0
 8007762:	d00b      	beq.n	800777c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800776a:	69db      	ldr	r3, [r3, #28]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d005      	beq.n	800777c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007776:	69db      	ldr	r3, [r3, #28]
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800777c:	2300      	movs	r3, #0
}
 800777e:	4618      	mov	r0, r3
 8007780:	3708      	adds	r7, #8
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}

08007786 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007786:	b580      	push	{r7, lr}
 8007788:	b082      	sub	sp, #8
 800778a:	af00      	add	r7, sp, #0
 800778c:	6078      	str	r0, [r7, #4]
 800778e:	460b      	mov	r3, r1
 8007790:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	32ae      	adds	r2, #174	; 0xae
 800779c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d101      	bne.n	80077a8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80077a4:	2303      	movs	r3, #3
 80077a6:	e01c      	b.n	80077e2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077ae:	b2db      	uxtb	r3, r3
 80077b0:	2b03      	cmp	r3, #3
 80077b2:	d115      	bne.n	80077e0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	32ae      	adds	r2, #174	; 0xae
 80077be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077c2:	6a1b      	ldr	r3, [r3, #32]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d00b      	beq.n	80077e0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	32ae      	adds	r2, #174	; 0xae
 80077d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077d6:	6a1b      	ldr	r3, [r3, #32]
 80077d8:	78fa      	ldrb	r2, [r7, #3]
 80077da:	4611      	mov	r1, r2
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80077e0:	2300      	movs	r3, #0
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3708      	adds	r7, #8
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}

080077ea <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80077ea:	b580      	push	{r7, lr}
 80077ec:	b082      	sub	sp, #8
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	6078      	str	r0, [r7, #4]
 80077f2:	460b      	mov	r3, r1
 80077f4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	32ae      	adds	r2, #174	; 0xae
 8007800:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d101      	bne.n	800780c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007808:	2303      	movs	r3, #3
 800780a:	e01c      	b.n	8007846 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007812:	b2db      	uxtb	r3, r3
 8007814:	2b03      	cmp	r3, #3
 8007816:	d115      	bne.n	8007844 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	32ae      	adds	r2, #174	; 0xae
 8007822:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007828:	2b00      	cmp	r3, #0
 800782a:	d00b      	beq.n	8007844 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	32ae      	adds	r2, #174	; 0xae
 8007836:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800783a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800783c:	78fa      	ldrb	r2, [r7, #3]
 800783e:	4611      	mov	r1, r2
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007844:	2300      	movs	r3, #0
}
 8007846:	4618      	mov	r0, r3
 8007848:	3708      	adds	r7, #8
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}

0800784e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800784e:	b480      	push	{r7}
 8007850:	b083      	sub	sp, #12
 8007852:	af00      	add	r7, sp, #0
 8007854:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007856:	2300      	movs	r3, #0
}
 8007858:	4618      	mov	r0, r3
 800785a:	370c      	adds	r7, #12
 800785c:	46bd      	mov	sp, r7
 800785e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007862:	4770      	bx	lr

08007864 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b084      	sub	sp, #16
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800786c:	2300      	movs	r3, #0
 800786e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2201      	movs	r2, #1
 8007874:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800787e:	2b00      	cmp	r3, #0
 8007880:	d00e      	beq.n	80078a0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	687a      	ldr	r2, [r7, #4]
 800788c:	6852      	ldr	r2, [r2, #4]
 800788e:	b2d2      	uxtb	r2, r2
 8007890:	4611      	mov	r1, r2
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	4798      	blx	r3
 8007896:	4603      	mov	r3, r0
 8007898:	2b00      	cmp	r3, #0
 800789a:	d001      	beq.n	80078a0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800789c:	2303      	movs	r3, #3
 800789e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80078a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	3710      	adds	r7, #16
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}

080078aa <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80078aa:	b480      	push	{r7}
 80078ac:	b083      	sub	sp, #12
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	6078      	str	r0, [r7, #4]
 80078b2:	460b      	mov	r3, r1
 80078b4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80078b6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	370c      	adds	r7, #12
 80078bc:	46bd      	mov	sp, r7
 80078be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c2:	4770      	bx	lr

080078c4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b083      	sub	sp, #12
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
 80078cc:	460b      	mov	r3, r1
 80078ce:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80078d0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	370c      	adds	r7, #12
 80078d6:	46bd      	mov	sp, r7
 80078d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078dc:	4770      	bx	lr

080078de <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80078de:	b580      	push	{r7, lr}
 80078e0:	b086      	sub	sp, #24
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	6078      	str	r0, [r7, #4]
 80078e6:	460b      	mov	r3, r1
 80078e8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80078f2:	2300      	movs	r3, #0
 80078f4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	885b      	ldrh	r3, [r3, #2]
 80078fa:	b29a      	uxth	r2, r3
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	781b      	ldrb	r3, [r3, #0]
 8007900:	b29b      	uxth	r3, r3
 8007902:	429a      	cmp	r2, r3
 8007904:	d920      	bls.n	8007948 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	781b      	ldrb	r3, [r3, #0]
 800790a:	b29b      	uxth	r3, r3
 800790c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800790e:	e013      	b.n	8007938 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007910:	f107 030a 	add.w	r3, r7, #10
 8007914:	4619      	mov	r1, r3
 8007916:	6978      	ldr	r0, [r7, #20]
 8007918:	f000 f81b 	bl	8007952 <USBD_GetNextDesc>
 800791c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	785b      	ldrb	r3, [r3, #1]
 8007922:	2b05      	cmp	r3, #5
 8007924:	d108      	bne.n	8007938 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	789b      	ldrb	r3, [r3, #2]
 800792e:	78fa      	ldrb	r2, [r7, #3]
 8007930:	429a      	cmp	r2, r3
 8007932:	d008      	beq.n	8007946 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007934:	2300      	movs	r3, #0
 8007936:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	885b      	ldrh	r3, [r3, #2]
 800793c:	b29a      	uxth	r2, r3
 800793e:	897b      	ldrh	r3, [r7, #10]
 8007940:	429a      	cmp	r2, r3
 8007942:	d8e5      	bhi.n	8007910 <USBD_GetEpDesc+0x32>
 8007944:	e000      	b.n	8007948 <USBD_GetEpDesc+0x6a>
          break;
 8007946:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007948:	693b      	ldr	r3, [r7, #16]
}
 800794a:	4618      	mov	r0, r3
 800794c:	3718      	adds	r7, #24
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}

08007952 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007952:	b480      	push	{r7}
 8007954:	b085      	sub	sp, #20
 8007956:	af00      	add	r7, sp, #0
 8007958:	6078      	str	r0, [r7, #4]
 800795a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	881a      	ldrh	r2, [r3, #0]
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	781b      	ldrb	r3, [r3, #0]
 8007968:	b29b      	uxth	r3, r3
 800796a:	4413      	add	r3, r2
 800796c:	b29a      	uxth	r2, r3
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	781b      	ldrb	r3, [r3, #0]
 8007976:	461a      	mov	r2, r3
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	4413      	add	r3, r2
 800797c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800797e:	68fb      	ldr	r3, [r7, #12]
}
 8007980:	4618      	mov	r0, r3
 8007982:	3714      	adds	r7, #20
 8007984:	46bd      	mov	sp, r7
 8007986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798a:	4770      	bx	lr

0800798c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800798c:	b480      	push	{r7}
 800798e:	b087      	sub	sp, #28
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	781b      	ldrb	r3, [r3, #0]
 800799c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	3301      	adds	r3, #1
 80079a2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	781b      	ldrb	r3, [r3, #0]
 80079a8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80079aa:	8a3b      	ldrh	r3, [r7, #16]
 80079ac:	021b      	lsls	r3, r3, #8
 80079ae:	b21a      	sxth	r2, r3
 80079b0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80079b4:	4313      	orrs	r3, r2
 80079b6:	b21b      	sxth	r3, r3
 80079b8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80079ba:	89fb      	ldrh	r3, [r7, #14]
}
 80079bc:	4618      	mov	r0, r3
 80079be:	371c      	adds	r7, #28
 80079c0:	46bd      	mov	sp, r7
 80079c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c6:	4770      	bx	lr

080079c8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b084      	sub	sp, #16
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80079d2:	2300      	movs	r3, #0
 80079d4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	781b      	ldrb	r3, [r3, #0]
 80079da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80079de:	2b40      	cmp	r3, #64	; 0x40
 80079e0:	d005      	beq.n	80079ee <USBD_StdDevReq+0x26>
 80079e2:	2b40      	cmp	r3, #64	; 0x40
 80079e4:	d857      	bhi.n	8007a96 <USBD_StdDevReq+0xce>
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d00f      	beq.n	8007a0a <USBD_StdDevReq+0x42>
 80079ea:	2b20      	cmp	r3, #32
 80079ec:	d153      	bne.n	8007a96 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	32ae      	adds	r2, #174	; 0xae
 80079f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079fc:	689b      	ldr	r3, [r3, #8]
 80079fe:	6839      	ldr	r1, [r7, #0]
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	4798      	blx	r3
 8007a04:	4603      	mov	r3, r0
 8007a06:	73fb      	strb	r3, [r7, #15]
      break;
 8007a08:	e04a      	b.n	8007aa0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	785b      	ldrb	r3, [r3, #1]
 8007a0e:	2b09      	cmp	r3, #9
 8007a10:	d83b      	bhi.n	8007a8a <USBD_StdDevReq+0xc2>
 8007a12:	a201      	add	r2, pc, #4	; (adr r2, 8007a18 <USBD_StdDevReq+0x50>)
 8007a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a18:	08007a6d 	.word	0x08007a6d
 8007a1c:	08007a81 	.word	0x08007a81
 8007a20:	08007a8b 	.word	0x08007a8b
 8007a24:	08007a77 	.word	0x08007a77
 8007a28:	08007a8b 	.word	0x08007a8b
 8007a2c:	08007a4b 	.word	0x08007a4b
 8007a30:	08007a41 	.word	0x08007a41
 8007a34:	08007a8b 	.word	0x08007a8b
 8007a38:	08007a63 	.word	0x08007a63
 8007a3c:	08007a55 	.word	0x08007a55
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007a40:	6839      	ldr	r1, [r7, #0]
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f000 fa3c 	bl	8007ec0 <USBD_GetDescriptor>
          break;
 8007a48:	e024      	b.n	8007a94 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007a4a:	6839      	ldr	r1, [r7, #0]
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f000 fba1 	bl	8008194 <USBD_SetAddress>
          break;
 8007a52:	e01f      	b.n	8007a94 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007a54:	6839      	ldr	r1, [r7, #0]
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f000 fbe0 	bl	800821c <USBD_SetConfig>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	73fb      	strb	r3, [r7, #15]
          break;
 8007a60:	e018      	b.n	8007a94 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007a62:	6839      	ldr	r1, [r7, #0]
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f000 fc83 	bl	8008370 <USBD_GetConfig>
          break;
 8007a6a:	e013      	b.n	8007a94 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007a6c:	6839      	ldr	r1, [r7, #0]
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f000 fcb4 	bl	80083dc <USBD_GetStatus>
          break;
 8007a74:	e00e      	b.n	8007a94 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007a76:	6839      	ldr	r1, [r7, #0]
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f000 fce3 	bl	8008444 <USBD_SetFeature>
          break;
 8007a7e:	e009      	b.n	8007a94 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007a80:	6839      	ldr	r1, [r7, #0]
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f000 fd07 	bl	8008496 <USBD_ClrFeature>
          break;
 8007a88:	e004      	b.n	8007a94 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007a8a:	6839      	ldr	r1, [r7, #0]
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f000 fd5e 	bl	800854e <USBD_CtlError>
          break;
 8007a92:	bf00      	nop
      }
      break;
 8007a94:	e004      	b.n	8007aa0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007a96:	6839      	ldr	r1, [r7, #0]
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f000 fd58 	bl	800854e <USBD_CtlError>
      break;
 8007a9e:	bf00      	nop
  }

  return ret;
 8007aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3710      	adds	r7, #16
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}
 8007aaa:	bf00      	nop

08007aac <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b084      	sub	sp, #16
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	781b      	ldrb	r3, [r3, #0]
 8007abe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ac2:	2b40      	cmp	r3, #64	; 0x40
 8007ac4:	d005      	beq.n	8007ad2 <USBD_StdItfReq+0x26>
 8007ac6:	2b40      	cmp	r3, #64	; 0x40
 8007ac8:	d852      	bhi.n	8007b70 <USBD_StdItfReq+0xc4>
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d001      	beq.n	8007ad2 <USBD_StdItfReq+0x26>
 8007ace:	2b20      	cmp	r3, #32
 8007ad0:	d14e      	bne.n	8007b70 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ad8:	b2db      	uxtb	r3, r3
 8007ada:	3b01      	subs	r3, #1
 8007adc:	2b02      	cmp	r3, #2
 8007ade:	d840      	bhi.n	8007b62 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	889b      	ldrh	r3, [r3, #4]
 8007ae4:	b2db      	uxtb	r3, r3
 8007ae6:	2b01      	cmp	r3, #1
 8007ae8:	d836      	bhi.n	8007b58 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	889b      	ldrh	r3, [r3, #4]
 8007aee:	b2db      	uxtb	r3, r3
 8007af0:	4619      	mov	r1, r3
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f7ff fed9 	bl	80078aa <USBD_CoreFindIF>
 8007af8:	4603      	mov	r3, r0
 8007afa:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007afc:	7bbb      	ldrb	r3, [r7, #14]
 8007afe:	2bff      	cmp	r3, #255	; 0xff
 8007b00:	d01d      	beq.n	8007b3e <USBD_StdItfReq+0x92>
 8007b02:	7bbb      	ldrb	r3, [r7, #14]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d11a      	bne.n	8007b3e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007b08:	7bba      	ldrb	r2, [r7, #14]
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	32ae      	adds	r2, #174	; 0xae
 8007b0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b12:	689b      	ldr	r3, [r3, #8]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d00f      	beq.n	8007b38 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007b18:	7bba      	ldrb	r2, [r7, #14]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007b20:	7bba      	ldrb	r2, [r7, #14]
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	32ae      	adds	r2, #174	; 0xae
 8007b26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b2a:	689b      	ldr	r3, [r3, #8]
 8007b2c:	6839      	ldr	r1, [r7, #0]
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	4798      	blx	r3
 8007b32:	4603      	mov	r3, r0
 8007b34:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007b36:	e004      	b.n	8007b42 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007b38:	2303      	movs	r3, #3
 8007b3a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007b3c:	e001      	b.n	8007b42 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007b3e:	2303      	movs	r3, #3
 8007b40:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	88db      	ldrh	r3, [r3, #6]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d110      	bne.n	8007b6c <USBD_StdItfReq+0xc0>
 8007b4a:	7bfb      	ldrb	r3, [r7, #15]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d10d      	bne.n	8007b6c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f000 fdc7 	bl	80086e4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007b56:	e009      	b.n	8007b6c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007b58:	6839      	ldr	r1, [r7, #0]
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f000 fcf7 	bl	800854e <USBD_CtlError>
          break;
 8007b60:	e004      	b.n	8007b6c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007b62:	6839      	ldr	r1, [r7, #0]
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f000 fcf2 	bl	800854e <USBD_CtlError>
          break;
 8007b6a:	e000      	b.n	8007b6e <USBD_StdItfReq+0xc2>
          break;
 8007b6c:	bf00      	nop
      }
      break;
 8007b6e:	e004      	b.n	8007b7a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007b70:	6839      	ldr	r1, [r7, #0]
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f000 fceb 	bl	800854e <USBD_CtlError>
      break;
 8007b78:	bf00      	nop
  }

  return ret;
 8007b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3710      	adds	r7, #16
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}

08007b84 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b084      	sub	sp, #16
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
 8007b8c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	889b      	ldrh	r3, [r3, #4]
 8007b96:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	781b      	ldrb	r3, [r3, #0]
 8007b9c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ba0:	2b40      	cmp	r3, #64	; 0x40
 8007ba2:	d007      	beq.n	8007bb4 <USBD_StdEPReq+0x30>
 8007ba4:	2b40      	cmp	r3, #64	; 0x40
 8007ba6:	f200 817f 	bhi.w	8007ea8 <USBD_StdEPReq+0x324>
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d02a      	beq.n	8007c04 <USBD_StdEPReq+0x80>
 8007bae:	2b20      	cmp	r3, #32
 8007bb0:	f040 817a 	bne.w	8007ea8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007bb4:	7bbb      	ldrb	r3, [r7, #14]
 8007bb6:	4619      	mov	r1, r3
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f7ff fe83 	bl	80078c4 <USBD_CoreFindEP>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007bc2:	7b7b      	ldrb	r3, [r7, #13]
 8007bc4:	2bff      	cmp	r3, #255	; 0xff
 8007bc6:	f000 8174 	beq.w	8007eb2 <USBD_StdEPReq+0x32e>
 8007bca:	7b7b      	ldrb	r3, [r7, #13]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	f040 8170 	bne.w	8007eb2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007bd2:	7b7a      	ldrb	r2, [r7, #13]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007bda:	7b7a      	ldrb	r2, [r7, #13]
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	32ae      	adds	r2, #174	; 0xae
 8007be0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007be4:	689b      	ldr	r3, [r3, #8]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	f000 8163 	beq.w	8007eb2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007bec:	7b7a      	ldrb	r2, [r7, #13]
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	32ae      	adds	r2, #174	; 0xae
 8007bf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bf6:	689b      	ldr	r3, [r3, #8]
 8007bf8:	6839      	ldr	r1, [r7, #0]
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	4798      	blx	r3
 8007bfe:	4603      	mov	r3, r0
 8007c00:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007c02:	e156      	b.n	8007eb2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	785b      	ldrb	r3, [r3, #1]
 8007c08:	2b03      	cmp	r3, #3
 8007c0a:	d008      	beq.n	8007c1e <USBD_StdEPReq+0x9a>
 8007c0c:	2b03      	cmp	r3, #3
 8007c0e:	f300 8145 	bgt.w	8007e9c <USBD_StdEPReq+0x318>
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	f000 809b 	beq.w	8007d4e <USBD_StdEPReq+0x1ca>
 8007c18:	2b01      	cmp	r3, #1
 8007c1a:	d03c      	beq.n	8007c96 <USBD_StdEPReq+0x112>
 8007c1c:	e13e      	b.n	8007e9c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c24:	b2db      	uxtb	r3, r3
 8007c26:	2b02      	cmp	r3, #2
 8007c28:	d002      	beq.n	8007c30 <USBD_StdEPReq+0xac>
 8007c2a:	2b03      	cmp	r3, #3
 8007c2c:	d016      	beq.n	8007c5c <USBD_StdEPReq+0xd8>
 8007c2e:	e02c      	b.n	8007c8a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007c30:	7bbb      	ldrb	r3, [r7, #14]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d00d      	beq.n	8007c52 <USBD_StdEPReq+0xce>
 8007c36:	7bbb      	ldrb	r3, [r7, #14]
 8007c38:	2b80      	cmp	r3, #128	; 0x80
 8007c3a:	d00a      	beq.n	8007c52 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007c3c:	7bbb      	ldrb	r3, [r7, #14]
 8007c3e:	4619      	mov	r1, r3
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f001 f96d 	bl	8008f20 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007c46:	2180      	movs	r1, #128	; 0x80
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f001 f969 	bl	8008f20 <USBD_LL_StallEP>
 8007c4e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007c50:	e020      	b.n	8007c94 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007c52:	6839      	ldr	r1, [r7, #0]
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f000 fc7a 	bl	800854e <USBD_CtlError>
              break;
 8007c5a:	e01b      	b.n	8007c94 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	885b      	ldrh	r3, [r3, #2]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d10e      	bne.n	8007c82 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007c64:	7bbb      	ldrb	r3, [r7, #14]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d00b      	beq.n	8007c82 <USBD_StdEPReq+0xfe>
 8007c6a:	7bbb      	ldrb	r3, [r7, #14]
 8007c6c:	2b80      	cmp	r3, #128	; 0x80
 8007c6e:	d008      	beq.n	8007c82 <USBD_StdEPReq+0xfe>
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	88db      	ldrh	r3, [r3, #6]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d104      	bne.n	8007c82 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007c78:	7bbb      	ldrb	r3, [r7, #14]
 8007c7a:	4619      	mov	r1, r3
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f001 f94f 	bl	8008f20 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f000 fd2e 	bl	80086e4 <USBD_CtlSendStatus>

              break;
 8007c88:	e004      	b.n	8007c94 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007c8a:	6839      	ldr	r1, [r7, #0]
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f000 fc5e 	bl	800854e <USBD_CtlError>
              break;
 8007c92:	bf00      	nop
          }
          break;
 8007c94:	e107      	b.n	8007ea6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c9c:	b2db      	uxtb	r3, r3
 8007c9e:	2b02      	cmp	r3, #2
 8007ca0:	d002      	beq.n	8007ca8 <USBD_StdEPReq+0x124>
 8007ca2:	2b03      	cmp	r3, #3
 8007ca4:	d016      	beq.n	8007cd4 <USBD_StdEPReq+0x150>
 8007ca6:	e04b      	b.n	8007d40 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ca8:	7bbb      	ldrb	r3, [r7, #14]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d00d      	beq.n	8007cca <USBD_StdEPReq+0x146>
 8007cae:	7bbb      	ldrb	r3, [r7, #14]
 8007cb0:	2b80      	cmp	r3, #128	; 0x80
 8007cb2:	d00a      	beq.n	8007cca <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007cb4:	7bbb      	ldrb	r3, [r7, #14]
 8007cb6:	4619      	mov	r1, r3
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f001 f931 	bl	8008f20 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007cbe:	2180      	movs	r1, #128	; 0x80
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f001 f92d 	bl	8008f20 <USBD_LL_StallEP>
 8007cc6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007cc8:	e040      	b.n	8007d4c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007cca:	6839      	ldr	r1, [r7, #0]
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f000 fc3e 	bl	800854e <USBD_CtlError>
              break;
 8007cd2:	e03b      	b.n	8007d4c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	885b      	ldrh	r3, [r3, #2]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d136      	bne.n	8007d4a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007cdc:	7bbb      	ldrb	r3, [r7, #14]
 8007cde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d004      	beq.n	8007cf0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007ce6:	7bbb      	ldrb	r3, [r7, #14]
 8007ce8:	4619      	mov	r1, r3
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f001 f937 	bl	8008f5e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f000 fcf7 	bl	80086e4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007cf6:	7bbb      	ldrb	r3, [r7, #14]
 8007cf8:	4619      	mov	r1, r3
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f7ff fde2 	bl	80078c4 <USBD_CoreFindEP>
 8007d00:	4603      	mov	r3, r0
 8007d02:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007d04:	7b7b      	ldrb	r3, [r7, #13]
 8007d06:	2bff      	cmp	r3, #255	; 0xff
 8007d08:	d01f      	beq.n	8007d4a <USBD_StdEPReq+0x1c6>
 8007d0a:	7b7b      	ldrb	r3, [r7, #13]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d11c      	bne.n	8007d4a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007d10:	7b7a      	ldrb	r2, [r7, #13]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007d18:	7b7a      	ldrb	r2, [r7, #13]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	32ae      	adds	r2, #174	; 0xae
 8007d1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d22:	689b      	ldr	r3, [r3, #8]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d010      	beq.n	8007d4a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007d28:	7b7a      	ldrb	r2, [r7, #13]
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	32ae      	adds	r2, #174	; 0xae
 8007d2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d32:	689b      	ldr	r3, [r3, #8]
 8007d34:	6839      	ldr	r1, [r7, #0]
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	4798      	blx	r3
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007d3e:	e004      	b.n	8007d4a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007d40:	6839      	ldr	r1, [r7, #0]
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f000 fc03 	bl	800854e <USBD_CtlError>
              break;
 8007d48:	e000      	b.n	8007d4c <USBD_StdEPReq+0x1c8>
              break;
 8007d4a:	bf00      	nop
          }
          break;
 8007d4c:	e0ab      	b.n	8007ea6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d54:	b2db      	uxtb	r3, r3
 8007d56:	2b02      	cmp	r3, #2
 8007d58:	d002      	beq.n	8007d60 <USBD_StdEPReq+0x1dc>
 8007d5a:	2b03      	cmp	r3, #3
 8007d5c:	d032      	beq.n	8007dc4 <USBD_StdEPReq+0x240>
 8007d5e:	e097      	b.n	8007e90 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007d60:	7bbb      	ldrb	r3, [r7, #14]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d007      	beq.n	8007d76 <USBD_StdEPReq+0x1f2>
 8007d66:	7bbb      	ldrb	r3, [r7, #14]
 8007d68:	2b80      	cmp	r3, #128	; 0x80
 8007d6a:	d004      	beq.n	8007d76 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007d6c:	6839      	ldr	r1, [r7, #0]
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f000 fbed 	bl	800854e <USBD_CtlError>
                break;
 8007d74:	e091      	b.n	8007e9a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007d76:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	da0b      	bge.n	8007d96 <USBD_StdEPReq+0x212>
 8007d7e:	7bbb      	ldrb	r3, [r7, #14]
 8007d80:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d84:	4613      	mov	r3, r2
 8007d86:	009b      	lsls	r3, r3, #2
 8007d88:	4413      	add	r3, r2
 8007d8a:	009b      	lsls	r3, r3, #2
 8007d8c:	3310      	adds	r3, #16
 8007d8e:	687a      	ldr	r2, [r7, #4]
 8007d90:	4413      	add	r3, r2
 8007d92:	3304      	adds	r3, #4
 8007d94:	e00b      	b.n	8007dae <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007d96:	7bbb      	ldrb	r3, [r7, #14]
 8007d98:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007d9c:	4613      	mov	r3, r2
 8007d9e:	009b      	lsls	r3, r3, #2
 8007da0:	4413      	add	r3, r2
 8007da2:	009b      	lsls	r3, r3, #2
 8007da4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007da8:	687a      	ldr	r2, [r7, #4]
 8007daa:	4413      	add	r3, r2
 8007dac:	3304      	adds	r3, #4
 8007dae:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	2200      	movs	r2, #0
 8007db4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	2202      	movs	r2, #2
 8007dba:	4619      	mov	r1, r3
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f000 fc37 	bl	8008630 <USBD_CtlSendData>
              break;
 8007dc2:	e06a      	b.n	8007e9a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007dc4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	da11      	bge.n	8007df0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007dcc:	7bbb      	ldrb	r3, [r7, #14]
 8007dce:	f003 020f 	and.w	r2, r3, #15
 8007dd2:	6879      	ldr	r1, [r7, #4]
 8007dd4:	4613      	mov	r3, r2
 8007dd6:	009b      	lsls	r3, r3, #2
 8007dd8:	4413      	add	r3, r2
 8007dda:	009b      	lsls	r3, r3, #2
 8007ddc:	440b      	add	r3, r1
 8007dde:	3324      	adds	r3, #36	; 0x24
 8007de0:	881b      	ldrh	r3, [r3, #0]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d117      	bne.n	8007e16 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007de6:	6839      	ldr	r1, [r7, #0]
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f000 fbb0 	bl	800854e <USBD_CtlError>
                  break;
 8007dee:	e054      	b.n	8007e9a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007df0:	7bbb      	ldrb	r3, [r7, #14]
 8007df2:	f003 020f 	and.w	r2, r3, #15
 8007df6:	6879      	ldr	r1, [r7, #4]
 8007df8:	4613      	mov	r3, r2
 8007dfa:	009b      	lsls	r3, r3, #2
 8007dfc:	4413      	add	r3, r2
 8007dfe:	009b      	lsls	r3, r3, #2
 8007e00:	440b      	add	r3, r1
 8007e02:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007e06:	881b      	ldrh	r3, [r3, #0]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d104      	bne.n	8007e16 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007e0c:	6839      	ldr	r1, [r7, #0]
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f000 fb9d 	bl	800854e <USBD_CtlError>
                  break;
 8007e14:	e041      	b.n	8007e9a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e16:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	da0b      	bge.n	8007e36 <USBD_StdEPReq+0x2b2>
 8007e1e:	7bbb      	ldrb	r3, [r7, #14]
 8007e20:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007e24:	4613      	mov	r3, r2
 8007e26:	009b      	lsls	r3, r3, #2
 8007e28:	4413      	add	r3, r2
 8007e2a:	009b      	lsls	r3, r3, #2
 8007e2c:	3310      	adds	r3, #16
 8007e2e:	687a      	ldr	r2, [r7, #4]
 8007e30:	4413      	add	r3, r2
 8007e32:	3304      	adds	r3, #4
 8007e34:	e00b      	b.n	8007e4e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007e36:	7bbb      	ldrb	r3, [r7, #14]
 8007e38:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e3c:	4613      	mov	r3, r2
 8007e3e:	009b      	lsls	r3, r3, #2
 8007e40:	4413      	add	r3, r2
 8007e42:	009b      	lsls	r3, r3, #2
 8007e44:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007e48:	687a      	ldr	r2, [r7, #4]
 8007e4a:	4413      	add	r3, r2
 8007e4c:	3304      	adds	r3, #4
 8007e4e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007e50:	7bbb      	ldrb	r3, [r7, #14]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d002      	beq.n	8007e5c <USBD_StdEPReq+0x2d8>
 8007e56:	7bbb      	ldrb	r3, [r7, #14]
 8007e58:	2b80      	cmp	r3, #128	; 0x80
 8007e5a:	d103      	bne.n	8007e64 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	601a      	str	r2, [r3, #0]
 8007e62:	e00e      	b.n	8007e82 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007e64:	7bbb      	ldrb	r3, [r7, #14]
 8007e66:	4619      	mov	r1, r3
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f001 f897 	bl	8008f9c <USBD_LL_IsStallEP>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d003      	beq.n	8007e7c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	2201      	movs	r2, #1
 8007e78:	601a      	str	r2, [r3, #0]
 8007e7a:	e002      	b.n	8007e82 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	2202      	movs	r2, #2
 8007e86:	4619      	mov	r1, r3
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f000 fbd1 	bl	8008630 <USBD_CtlSendData>
              break;
 8007e8e:	e004      	b.n	8007e9a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007e90:	6839      	ldr	r1, [r7, #0]
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f000 fb5b 	bl	800854e <USBD_CtlError>
              break;
 8007e98:	bf00      	nop
          }
          break;
 8007e9a:	e004      	b.n	8007ea6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007e9c:	6839      	ldr	r1, [r7, #0]
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f000 fb55 	bl	800854e <USBD_CtlError>
          break;
 8007ea4:	bf00      	nop
      }
      break;
 8007ea6:	e005      	b.n	8007eb4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007ea8:	6839      	ldr	r1, [r7, #0]
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f000 fb4f 	bl	800854e <USBD_CtlError>
      break;
 8007eb0:	e000      	b.n	8007eb4 <USBD_StdEPReq+0x330>
      break;
 8007eb2:	bf00      	nop
  }

  return ret;
 8007eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3710      	adds	r7, #16
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}
	...

08007ec0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b084      	sub	sp, #16
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
 8007ec8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	885b      	ldrh	r3, [r3, #2]
 8007eda:	0a1b      	lsrs	r3, r3, #8
 8007edc:	b29b      	uxth	r3, r3
 8007ede:	3b01      	subs	r3, #1
 8007ee0:	2b06      	cmp	r3, #6
 8007ee2:	f200 8128 	bhi.w	8008136 <USBD_GetDescriptor+0x276>
 8007ee6:	a201      	add	r2, pc, #4	; (adr r2, 8007eec <USBD_GetDescriptor+0x2c>)
 8007ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eec:	08007f09 	.word	0x08007f09
 8007ef0:	08007f21 	.word	0x08007f21
 8007ef4:	08007f61 	.word	0x08007f61
 8007ef8:	08008137 	.word	0x08008137
 8007efc:	08008137 	.word	0x08008137
 8007f00:	080080d7 	.word	0x080080d7
 8007f04:	08008103 	.word	0x08008103
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	687a      	ldr	r2, [r7, #4]
 8007f12:	7c12      	ldrb	r2, [r2, #16]
 8007f14:	f107 0108 	add.w	r1, r7, #8
 8007f18:	4610      	mov	r0, r2
 8007f1a:	4798      	blx	r3
 8007f1c:	60f8      	str	r0, [r7, #12]
      break;
 8007f1e:	e112      	b.n	8008146 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	7c1b      	ldrb	r3, [r3, #16]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d10d      	bne.n	8007f44 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f30:	f107 0208 	add.w	r2, r7, #8
 8007f34:	4610      	mov	r0, r2
 8007f36:	4798      	blx	r3
 8007f38:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	3301      	adds	r3, #1
 8007f3e:	2202      	movs	r2, #2
 8007f40:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007f42:	e100      	b.n	8008146 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f4c:	f107 0208 	add.w	r2, r7, #8
 8007f50:	4610      	mov	r0, r2
 8007f52:	4798      	blx	r3
 8007f54:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	3301      	adds	r3, #1
 8007f5a:	2202      	movs	r2, #2
 8007f5c:	701a      	strb	r2, [r3, #0]
      break;
 8007f5e:	e0f2      	b.n	8008146 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	885b      	ldrh	r3, [r3, #2]
 8007f64:	b2db      	uxtb	r3, r3
 8007f66:	2b05      	cmp	r3, #5
 8007f68:	f200 80ac 	bhi.w	80080c4 <USBD_GetDescriptor+0x204>
 8007f6c:	a201      	add	r2, pc, #4	; (adr r2, 8007f74 <USBD_GetDescriptor+0xb4>)
 8007f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f72:	bf00      	nop
 8007f74:	08007f8d 	.word	0x08007f8d
 8007f78:	08007fc1 	.word	0x08007fc1
 8007f7c:	08007ff5 	.word	0x08007ff5
 8007f80:	08008029 	.word	0x08008029
 8007f84:	0800805d 	.word	0x0800805d
 8007f88:	08008091 	.word	0x08008091
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f92:	685b      	ldr	r3, [r3, #4]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d00b      	beq.n	8007fb0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f9e:	685b      	ldr	r3, [r3, #4]
 8007fa0:	687a      	ldr	r2, [r7, #4]
 8007fa2:	7c12      	ldrb	r2, [r2, #16]
 8007fa4:	f107 0108 	add.w	r1, r7, #8
 8007fa8:	4610      	mov	r0, r2
 8007faa:	4798      	blx	r3
 8007fac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007fae:	e091      	b.n	80080d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007fb0:	6839      	ldr	r1, [r7, #0]
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f000 facb 	bl	800854e <USBD_CtlError>
            err++;
 8007fb8:	7afb      	ldrb	r3, [r7, #11]
 8007fba:	3301      	adds	r3, #1
 8007fbc:	72fb      	strb	r3, [r7, #11]
          break;
 8007fbe:	e089      	b.n	80080d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fc6:	689b      	ldr	r3, [r3, #8]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d00b      	beq.n	8007fe4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fd2:	689b      	ldr	r3, [r3, #8]
 8007fd4:	687a      	ldr	r2, [r7, #4]
 8007fd6:	7c12      	ldrb	r2, [r2, #16]
 8007fd8:	f107 0108 	add.w	r1, r7, #8
 8007fdc:	4610      	mov	r0, r2
 8007fde:	4798      	blx	r3
 8007fe0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007fe2:	e077      	b.n	80080d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007fe4:	6839      	ldr	r1, [r7, #0]
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f000 fab1 	bl	800854e <USBD_CtlError>
            err++;
 8007fec:	7afb      	ldrb	r3, [r7, #11]
 8007fee:	3301      	adds	r3, #1
 8007ff0:	72fb      	strb	r3, [r7, #11]
          break;
 8007ff2:	e06f      	b.n	80080d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ffa:	68db      	ldr	r3, [r3, #12]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d00b      	beq.n	8008018 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008006:	68db      	ldr	r3, [r3, #12]
 8008008:	687a      	ldr	r2, [r7, #4]
 800800a:	7c12      	ldrb	r2, [r2, #16]
 800800c:	f107 0108 	add.w	r1, r7, #8
 8008010:	4610      	mov	r0, r2
 8008012:	4798      	blx	r3
 8008014:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008016:	e05d      	b.n	80080d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008018:	6839      	ldr	r1, [r7, #0]
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f000 fa97 	bl	800854e <USBD_CtlError>
            err++;
 8008020:	7afb      	ldrb	r3, [r7, #11]
 8008022:	3301      	adds	r3, #1
 8008024:	72fb      	strb	r3, [r7, #11]
          break;
 8008026:	e055      	b.n	80080d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800802e:	691b      	ldr	r3, [r3, #16]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d00b      	beq.n	800804c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800803a:	691b      	ldr	r3, [r3, #16]
 800803c:	687a      	ldr	r2, [r7, #4]
 800803e:	7c12      	ldrb	r2, [r2, #16]
 8008040:	f107 0108 	add.w	r1, r7, #8
 8008044:	4610      	mov	r0, r2
 8008046:	4798      	blx	r3
 8008048:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800804a:	e043      	b.n	80080d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800804c:	6839      	ldr	r1, [r7, #0]
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f000 fa7d 	bl	800854e <USBD_CtlError>
            err++;
 8008054:	7afb      	ldrb	r3, [r7, #11]
 8008056:	3301      	adds	r3, #1
 8008058:	72fb      	strb	r3, [r7, #11]
          break;
 800805a:	e03b      	b.n	80080d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008062:	695b      	ldr	r3, [r3, #20]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d00b      	beq.n	8008080 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800806e:	695b      	ldr	r3, [r3, #20]
 8008070:	687a      	ldr	r2, [r7, #4]
 8008072:	7c12      	ldrb	r2, [r2, #16]
 8008074:	f107 0108 	add.w	r1, r7, #8
 8008078:	4610      	mov	r0, r2
 800807a:	4798      	blx	r3
 800807c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800807e:	e029      	b.n	80080d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008080:	6839      	ldr	r1, [r7, #0]
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f000 fa63 	bl	800854e <USBD_CtlError>
            err++;
 8008088:	7afb      	ldrb	r3, [r7, #11]
 800808a:	3301      	adds	r3, #1
 800808c:	72fb      	strb	r3, [r7, #11]
          break;
 800808e:	e021      	b.n	80080d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008096:	699b      	ldr	r3, [r3, #24]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d00b      	beq.n	80080b4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080a2:	699b      	ldr	r3, [r3, #24]
 80080a4:	687a      	ldr	r2, [r7, #4]
 80080a6:	7c12      	ldrb	r2, [r2, #16]
 80080a8:	f107 0108 	add.w	r1, r7, #8
 80080ac:	4610      	mov	r0, r2
 80080ae:	4798      	blx	r3
 80080b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80080b2:	e00f      	b.n	80080d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80080b4:	6839      	ldr	r1, [r7, #0]
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f000 fa49 	bl	800854e <USBD_CtlError>
            err++;
 80080bc:	7afb      	ldrb	r3, [r7, #11]
 80080be:	3301      	adds	r3, #1
 80080c0:	72fb      	strb	r3, [r7, #11]
          break;
 80080c2:	e007      	b.n	80080d4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80080c4:	6839      	ldr	r1, [r7, #0]
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f000 fa41 	bl	800854e <USBD_CtlError>
          err++;
 80080cc:	7afb      	ldrb	r3, [r7, #11]
 80080ce:	3301      	adds	r3, #1
 80080d0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80080d2:	bf00      	nop
      }
      break;
 80080d4:	e037      	b.n	8008146 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	7c1b      	ldrb	r3, [r3, #16]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d109      	bne.n	80080f2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080e6:	f107 0208 	add.w	r2, r7, #8
 80080ea:	4610      	mov	r0, r2
 80080ec:	4798      	blx	r3
 80080ee:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80080f0:	e029      	b.n	8008146 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80080f2:	6839      	ldr	r1, [r7, #0]
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f000 fa2a 	bl	800854e <USBD_CtlError>
        err++;
 80080fa:	7afb      	ldrb	r3, [r7, #11]
 80080fc:	3301      	adds	r3, #1
 80080fe:	72fb      	strb	r3, [r7, #11]
      break;
 8008100:	e021      	b.n	8008146 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	7c1b      	ldrb	r3, [r3, #16]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d10d      	bne.n	8008126 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008112:	f107 0208 	add.w	r2, r7, #8
 8008116:	4610      	mov	r0, r2
 8008118:	4798      	blx	r3
 800811a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	3301      	adds	r3, #1
 8008120:	2207      	movs	r2, #7
 8008122:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008124:	e00f      	b.n	8008146 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008126:	6839      	ldr	r1, [r7, #0]
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f000 fa10 	bl	800854e <USBD_CtlError>
        err++;
 800812e:	7afb      	ldrb	r3, [r7, #11]
 8008130:	3301      	adds	r3, #1
 8008132:	72fb      	strb	r3, [r7, #11]
      break;
 8008134:	e007      	b.n	8008146 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008136:	6839      	ldr	r1, [r7, #0]
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f000 fa08 	bl	800854e <USBD_CtlError>
      err++;
 800813e:	7afb      	ldrb	r3, [r7, #11]
 8008140:	3301      	adds	r3, #1
 8008142:	72fb      	strb	r3, [r7, #11]
      break;
 8008144:	bf00      	nop
  }

  if (err != 0U)
 8008146:	7afb      	ldrb	r3, [r7, #11]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d11e      	bne.n	800818a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	88db      	ldrh	r3, [r3, #6]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d016      	beq.n	8008182 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008154:	893b      	ldrh	r3, [r7, #8]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d00e      	beq.n	8008178 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	88da      	ldrh	r2, [r3, #6]
 800815e:	893b      	ldrh	r3, [r7, #8]
 8008160:	4293      	cmp	r3, r2
 8008162:	bf28      	it	cs
 8008164:	4613      	movcs	r3, r2
 8008166:	b29b      	uxth	r3, r3
 8008168:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800816a:	893b      	ldrh	r3, [r7, #8]
 800816c:	461a      	mov	r2, r3
 800816e:	68f9      	ldr	r1, [r7, #12]
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f000 fa5d 	bl	8008630 <USBD_CtlSendData>
 8008176:	e009      	b.n	800818c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008178:	6839      	ldr	r1, [r7, #0]
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f000 f9e7 	bl	800854e <USBD_CtlError>
 8008180:	e004      	b.n	800818c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f000 faae 	bl	80086e4 <USBD_CtlSendStatus>
 8008188:	e000      	b.n	800818c <USBD_GetDescriptor+0x2cc>
    return;
 800818a:	bf00      	nop
  }
}
 800818c:	3710      	adds	r7, #16
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}
 8008192:	bf00      	nop

08008194 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b084      	sub	sp, #16
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
 800819c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	889b      	ldrh	r3, [r3, #4]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d131      	bne.n	800820a <USBD_SetAddress+0x76>
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	88db      	ldrh	r3, [r3, #6]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d12d      	bne.n	800820a <USBD_SetAddress+0x76>
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	885b      	ldrh	r3, [r3, #2]
 80081b2:	2b7f      	cmp	r3, #127	; 0x7f
 80081b4:	d829      	bhi.n	800820a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	885b      	ldrh	r3, [r3, #2]
 80081ba:	b2db      	uxtb	r3, r3
 80081bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081c0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081c8:	b2db      	uxtb	r3, r3
 80081ca:	2b03      	cmp	r3, #3
 80081cc:	d104      	bne.n	80081d8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80081ce:	6839      	ldr	r1, [r7, #0]
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f000 f9bc 	bl	800854e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081d6:	e01d      	b.n	8008214 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	7bfa      	ldrb	r2, [r7, #15]
 80081dc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80081e0:	7bfb      	ldrb	r3, [r7, #15]
 80081e2:	4619      	mov	r1, r3
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f000 ff05 	bl	8008ff4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f000 fa7a 	bl	80086e4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80081f0:	7bfb      	ldrb	r3, [r7, #15]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d004      	beq.n	8008200 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2202      	movs	r2, #2
 80081fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081fe:	e009      	b.n	8008214 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2201      	movs	r2, #1
 8008204:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008208:	e004      	b.n	8008214 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800820a:	6839      	ldr	r1, [r7, #0]
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f000 f99e 	bl	800854e <USBD_CtlError>
  }
}
 8008212:	bf00      	nop
 8008214:	bf00      	nop
 8008216:	3710      	adds	r7, #16
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}

0800821c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b084      	sub	sp, #16
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
 8008224:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008226:	2300      	movs	r3, #0
 8008228:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	885b      	ldrh	r3, [r3, #2]
 800822e:	b2da      	uxtb	r2, r3
 8008230:	4b4e      	ldr	r3, [pc, #312]	; (800836c <USBD_SetConfig+0x150>)
 8008232:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008234:	4b4d      	ldr	r3, [pc, #308]	; (800836c <USBD_SetConfig+0x150>)
 8008236:	781b      	ldrb	r3, [r3, #0]
 8008238:	2b01      	cmp	r3, #1
 800823a:	d905      	bls.n	8008248 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800823c:	6839      	ldr	r1, [r7, #0]
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f000 f985 	bl	800854e <USBD_CtlError>
    return USBD_FAIL;
 8008244:	2303      	movs	r3, #3
 8008246:	e08c      	b.n	8008362 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800824e:	b2db      	uxtb	r3, r3
 8008250:	2b02      	cmp	r3, #2
 8008252:	d002      	beq.n	800825a <USBD_SetConfig+0x3e>
 8008254:	2b03      	cmp	r3, #3
 8008256:	d029      	beq.n	80082ac <USBD_SetConfig+0x90>
 8008258:	e075      	b.n	8008346 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800825a:	4b44      	ldr	r3, [pc, #272]	; (800836c <USBD_SetConfig+0x150>)
 800825c:	781b      	ldrb	r3, [r3, #0]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d020      	beq.n	80082a4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008262:	4b42      	ldr	r3, [pc, #264]	; (800836c <USBD_SetConfig+0x150>)
 8008264:	781b      	ldrb	r3, [r3, #0]
 8008266:	461a      	mov	r2, r3
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800826c:	4b3f      	ldr	r3, [pc, #252]	; (800836c <USBD_SetConfig+0x150>)
 800826e:	781b      	ldrb	r3, [r3, #0]
 8008270:	4619      	mov	r1, r3
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f7fe ffe7 	bl	8007246 <USBD_SetClassConfig>
 8008278:	4603      	mov	r3, r0
 800827a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800827c:	7bfb      	ldrb	r3, [r7, #15]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d008      	beq.n	8008294 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008282:	6839      	ldr	r1, [r7, #0]
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f000 f962 	bl	800854e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2202      	movs	r2, #2
 800828e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008292:	e065      	b.n	8008360 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f000 fa25 	bl	80086e4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2203      	movs	r2, #3
 800829e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80082a2:	e05d      	b.n	8008360 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f000 fa1d 	bl	80086e4 <USBD_CtlSendStatus>
      break;
 80082aa:	e059      	b.n	8008360 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80082ac:	4b2f      	ldr	r3, [pc, #188]	; (800836c <USBD_SetConfig+0x150>)
 80082ae:	781b      	ldrb	r3, [r3, #0]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d112      	bne.n	80082da <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2202      	movs	r2, #2
 80082b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80082bc:	4b2b      	ldr	r3, [pc, #172]	; (800836c <USBD_SetConfig+0x150>)
 80082be:	781b      	ldrb	r3, [r3, #0]
 80082c0:	461a      	mov	r2, r3
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80082c6:	4b29      	ldr	r3, [pc, #164]	; (800836c <USBD_SetConfig+0x150>)
 80082c8:	781b      	ldrb	r3, [r3, #0]
 80082ca:	4619      	mov	r1, r3
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	f7fe ffd6 	bl	800727e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f000 fa06 	bl	80086e4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80082d8:	e042      	b.n	8008360 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80082da:	4b24      	ldr	r3, [pc, #144]	; (800836c <USBD_SetConfig+0x150>)
 80082dc:	781b      	ldrb	r3, [r3, #0]
 80082de:	461a      	mov	r2, r3
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	685b      	ldr	r3, [r3, #4]
 80082e4:	429a      	cmp	r2, r3
 80082e6:	d02a      	beq.n	800833e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	685b      	ldr	r3, [r3, #4]
 80082ec:	b2db      	uxtb	r3, r3
 80082ee:	4619      	mov	r1, r3
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f7fe ffc4 	bl	800727e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80082f6:	4b1d      	ldr	r3, [pc, #116]	; (800836c <USBD_SetConfig+0x150>)
 80082f8:	781b      	ldrb	r3, [r3, #0]
 80082fa:	461a      	mov	r2, r3
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008300:	4b1a      	ldr	r3, [pc, #104]	; (800836c <USBD_SetConfig+0x150>)
 8008302:	781b      	ldrb	r3, [r3, #0]
 8008304:	4619      	mov	r1, r3
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f7fe ff9d 	bl	8007246 <USBD_SetClassConfig>
 800830c:	4603      	mov	r3, r0
 800830e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008310:	7bfb      	ldrb	r3, [r7, #15]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d00f      	beq.n	8008336 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008316:	6839      	ldr	r1, [r7, #0]
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f000 f918 	bl	800854e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	b2db      	uxtb	r3, r3
 8008324:	4619      	mov	r1, r3
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f7fe ffa9 	bl	800727e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2202      	movs	r2, #2
 8008330:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008334:	e014      	b.n	8008360 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f000 f9d4 	bl	80086e4 <USBD_CtlSendStatus>
      break;
 800833c:	e010      	b.n	8008360 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f000 f9d0 	bl	80086e4 <USBD_CtlSendStatus>
      break;
 8008344:	e00c      	b.n	8008360 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008346:	6839      	ldr	r1, [r7, #0]
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f000 f900 	bl	800854e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800834e:	4b07      	ldr	r3, [pc, #28]	; (800836c <USBD_SetConfig+0x150>)
 8008350:	781b      	ldrb	r3, [r3, #0]
 8008352:	4619      	mov	r1, r3
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f7fe ff92 	bl	800727e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800835a:	2303      	movs	r3, #3
 800835c:	73fb      	strb	r3, [r7, #15]
      break;
 800835e:	bf00      	nop
  }

  return ret;
 8008360:	7bfb      	ldrb	r3, [r7, #15]
}
 8008362:	4618      	mov	r0, r3
 8008364:	3710      	adds	r7, #16
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}
 800836a:	bf00      	nop
 800836c:	200003b8 	.word	0x200003b8

08008370 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b082      	sub	sp, #8
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
 8008378:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	88db      	ldrh	r3, [r3, #6]
 800837e:	2b01      	cmp	r3, #1
 8008380:	d004      	beq.n	800838c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008382:	6839      	ldr	r1, [r7, #0]
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f000 f8e2 	bl	800854e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800838a:	e023      	b.n	80083d4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008392:	b2db      	uxtb	r3, r3
 8008394:	2b02      	cmp	r3, #2
 8008396:	dc02      	bgt.n	800839e <USBD_GetConfig+0x2e>
 8008398:	2b00      	cmp	r3, #0
 800839a:	dc03      	bgt.n	80083a4 <USBD_GetConfig+0x34>
 800839c:	e015      	b.n	80083ca <USBD_GetConfig+0x5a>
 800839e:	2b03      	cmp	r3, #3
 80083a0:	d00b      	beq.n	80083ba <USBD_GetConfig+0x4a>
 80083a2:	e012      	b.n	80083ca <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2200      	movs	r2, #0
 80083a8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	3308      	adds	r3, #8
 80083ae:	2201      	movs	r2, #1
 80083b0:	4619      	mov	r1, r3
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f000 f93c 	bl	8008630 <USBD_CtlSendData>
        break;
 80083b8:	e00c      	b.n	80083d4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	3304      	adds	r3, #4
 80083be:	2201      	movs	r2, #1
 80083c0:	4619      	mov	r1, r3
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f000 f934 	bl	8008630 <USBD_CtlSendData>
        break;
 80083c8:	e004      	b.n	80083d4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80083ca:	6839      	ldr	r1, [r7, #0]
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f000 f8be 	bl	800854e <USBD_CtlError>
        break;
 80083d2:	bf00      	nop
}
 80083d4:	bf00      	nop
 80083d6:	3708      	adds	r7, #8
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}

080083dc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b082      	sub	sp, #8
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
 80083e4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083ec:	b2db      	uxtb	r3, r3
 80083ee:	3b01      	subs	r3, #1
 80083f0:	2b02      	cmp	r3, #2
 80083f2:	d81e      	bhi.n	8008432 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	88db      	ldrh	r3, [r3, #6]
 80083f8:	2b02      	cmp	r3, #2
 80083fa:	d004      	beq.n	8008406 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80083fc:	6839      	ldr	r1, [r7, #0]
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f000 f8a5 	bl	800854e <USBD_CtlError>
        break;
 8008404:	e01a      	b.n	800843c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2201      	movs	r2, #1
 800840a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008412:	2b00      	cmp	r3, #0
 8008414:	d005      	beq.n	8008422 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	68db      	ldr	r3, [r3, #12]
 800841a:	f043 0202 	orr.w	r2, r3, #2
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	330c      	adds	r3, #12
 8008426:	2202      	movs	r2, #2
 8008428:	4619      	mov	r1, r3
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f000 f900 	bl	8008630 <USBD_CtlSendData>
      break;
 8008430:	e004      	b.n	800843c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008432:	6839      	ldr	r1, [r7, #0]
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f000 f88a 	bl	800854e <USBD_CtlError>
      break;
 800843a:	bf00      	nop
  }
}
 800843c:	bf00      	nop
 800843e:	3708      	adds	r7, #8
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}

08008444 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b082      	sub	sp, #8
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
 800844c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	885b      	ldrh	r3, [r3, #2]
 8008452:	2b01      	cmp	r3, #1
 8008454:	d107      	bne.n	8008466 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2201      	movs	r2, #1
 800845a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f000 f940 	bl	80086e4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008464:	e013      	b.n	800848e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	885b      	ldrh	r3, [r3, #2]
 800846a:	2b02      	cmp	r3, #2
 800846c:	d10b      	bne.n	8008486 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	889b      	ldrh	r3, [r3, #4]
 8008472:	0a1b      	lsrs	r3, r3, #8
 8008474:	b29b      	uxth	r3, r3
 8008476:	b2da      	uxtb	r2, r3
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f000 f930 	bl	80086e4 <USBD_CtlSendStatus>
}
 8008484:	e003      	b.n	800848e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008486:	6839      	ldr	r1, [r7, #0]
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f000 f860 	bl	800854e <USBD_CtlError>
}
 800848e:	bf00      	nop
 8008490:	3708      	adds	r7, #8
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}

08008496 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008496:	b580      	push	{r7, lr}
 8008498:	b082      	sub	sp, #8
 800849a:	af00      	add	r7, sp, #0
 800849c:	6078      	str	r0, [r7, #4]
 800849e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084a6:	b2db      	uxtb	r3, r3
 80084a8:	3b01      	subs	r3, #1
 80084aa:	2b02      	cmp	r3, #2
 80084ac:	d80b      	bhi.n	80084c6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	885b      	ldrh	r3, [r3, #2]
 80084b2:	2b01      	cmp	r3, #1
 80084b4:	d10c      	bne.n	80084d0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2200      	movs	r2, #0
 80084ba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f000 f910 	bl	80086e4 <USBD_CtlSendStatus>
      }
      break;
 80084c4:	e004      	b.n	80084d0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80084c6:	6839      	ldr	r1, [r7, #0]
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f000 f840 	bl	800854e <USBD_CtlError>
      break;
 80084ce:	e000      	b.n	80084d2 <USBD_ClrFeature+0x3c>
      break;
 80084d0:	bf00      	nop
  }
}
 80084d2:	bf00      	nop
 80084d4:	3708      	adds	r7, #8
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}

080084da <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80084da:	b580      	push	{r7, lr}
 80084dc:	b084      	sub	sp, #16
 80084de:	af00      	add	r7, sp, #0
 80084e0:	6078      	str	r0, [r7, #4]
 80084e2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	781a      	ldrb	r2, [r3, #0]
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	3301      	adds	r3, #1
 80084f4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	781a      	ldrb	r2, [r3, #0]
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	3301      	adds	r3, #1
 8008502:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008504:	68f8      	ldr	r0, [r7, #12]
 8008506:	f7ff fa41 	bl	800798c <SWAPBYTE>
 800850a:	4603      	mov	r3, r0
 800850c:	461a      	mov	r2, r3
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	3301      	adds	r3, #1
 8008516:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	3301      	adds	r3, #1
 800851c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800851e:	68f8      	ldr	r0, [r7, #12]
 8008520:	f7ff fa34 	bl	800798c <SWAPBYTE>
 8008524:	4603      	mov	r3, r0
 8008526:	461a      	mov	r2, r3
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	3301      	adds	r3, #1
 8008530:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	3301      	adds	r3, #1
 8008536:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008538:	68f8      	ldr	r0, [r7, #12]
 800853a:	f7ff fa27 	bl	800798c <SWAPBYTE>
 800853e:	4603      	mov	r3, r0
 8008540:	461a      	mov	r2, r3
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	80da      	strh	r2, [r3, #6]
}
 8008546:	bf00      	nop
 8008548:	3710      	adds	r7, #16
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}

0800854e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800854e:	b580      	push	{r7, lr}
 8008550:	b082      	sub	sp, #8
 8008552:	af00      	add	r7, sp, #0
 8008554:	6078      	str	r0, [r7, #4]
 8008556:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008558:	2180      	movs	r1, #128	; 0x80
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f000 fce0 	bl	8008f20 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008560:	2100      	movs	r1, #0
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f000 fcdc 	bl	8008f20 <USBD_LL_StallEP>
}
 8008568:	bf00      	nop
 800856a:	3708      	adds	r7, #8
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}

08008570 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b086      	sub	sp, #24
 8008574:	af00      	add	r7, sp, #0
 8008576:	60f8      	str	r0, [r7, #12]
 8008578:	60b9      	str	r1, [r7, #8]
 800857a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800857c:	2300      	movs	r3, #0
 800857e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d036      	beq.n	80085f4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800858a:	6938      	ldr	r0, [r7, #16]
 800858c:	f000 f836 	bl	80085fc <USBD_GetLen>
 8008590:	4603      	mov	r3, r0
 8008592:	3301      	adds	r3, #1
 8008594:	b29b      	uxth	r3, r3
 8008596:	005b      	lsls	r3, r3, #1
 8008598:	b29a      	uxth	r2, r3
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800859e:	7dfb      	ldrb	r3, [r7, #23]
 80085a0:	68ba      	ldr	r2, [r7, #8]
 80085a2:	4413      	add	r3, r2
 80085a4:	687a      	ldr	r2, [r7, #4]
 80085a6:	7812      	ldrb	r2, [r2, #0]
 80085a8:	701a      	strb	r2, [r3, #0]
  idx++;
 80085aa:	7dfb      	ldrb	r3, [r7, #23]
 80085ac:	3301      	adds	r3, #1
 80085ae:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80085b0:	7dfb      	ldrb	r3, [r7, #23]
 80085b2:	68ba      	ldr	r2, [r7, #8]
 80085b4:	4413      	add	r3, r2
 80085b6:	2203      	movs	r2, #3
 80085b8:	701a      	strb	r2, [r3, #0]
  idx++;
 80085ba:	7dfb      	ldrb	r3, [r7, #23]
 80085bc:	3301      	adds	r3, #1
 80085be:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80085c0:	e013      	b.n	80085ea <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80085c2:	7dfb      	ldrb	r3, [r7, #23]
 80085c4:	68ba      	ldr	r2, [r7, #8]
 80085c6:	4413      	add	r3, r2
 80085c8:	693a      	ldr	r2, [r7, #16]
 80085ca:	7812      	ldrb	r2, [r2, #0]
 80085cc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80085ce:	693b      	ldr	r3, [r7, #16]
 80085d0:	3301      	adds	r3, #1
 80085d2:	613b      	str	r3, [r7, #16]
    idx++;
 80085d4:	7dfb      	ldrb	r3, [r7, #23]
 80085d6:	3301      	adds	r3, #1
 80085d8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80085da:	7dfb      	ldrb	r3, [r7, #23]
 80085dc:	68ba      	ldr	r2, [r7, #8]
 80085de:	4413      	add	r3, r2
 80085e0:	2200      	movs	r2, #0
 80085e2:	701a      	strb	r2, [r3, #0]
    idx++;
 80085e4:	7dfb      	ldrb	r3, [r7, #23]
 80085e6:	3301      	adds	r3, #1
 80085e8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80085ea:	693b      	ldr	r3, [r7, #16]
 80085ec:	781b      	ldrb	r3, [r3, #0]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d1e7      	bne.n	80085c2 <USBD_GetString+0x52>
 80085f2:	e000      	b.n	80085f6 <USBD_GetString+0x86>
    return;
 80085f4:	bf00      	nop
  }
}
 80085f6:	3718      	adds	r7, #24
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}

080085fc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b085      	sub	sp, #20
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008604:	2300      	movs	r3, #0
 8008606:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800860c:	e005      	b.n	800861a <USBD_GetLen+0x1e>
  {
    len++;
 800860e:	7bfb      	ldrb	r3, [r7, #15]
 8008610:	3301      	adds	r3, #1
 8008612:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	3301      	adds	r3, #1
 8008618:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	781b      	ldrb	r3, [r3, #0]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d1f5      	bne.n	800860e <USBD_GetLen+0x12>
  }

  return len;
 8008622:	7bfb      	ldrb	r3, [r7, #15]
}
 8008624:	4618      	mov	r0, r3
 8008626:	3714      	adds	r7, #20
 8008628:	46bd      	mov	sp, r7
 800862a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862e:	4770      	bx	lr

08008630 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b084      	sub	sp, #16
 8008634:	af00      	add	r7, sp, #0
 8008636:	60f8      	str	r0, [r7, #12]
 8008638:	60b9      	str	r1, [r7, #8]
 800863a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	2202      	movs	r2, #2
 8008640:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	687a      	ldr	r2, [r7, #4]
 8008648:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	687a      	ldr	r2, [r7, #4]
 800864e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	68ba      	ldr	r2, [r7, #8]
 8008654:	2100      	movs	r1, #0
 8008656:	68f8      	ldr	r0, [r7, #12]
 8008658:	f000 fceb 	bl	8009032 <USBD_LL_Transmit>

  return USBD_OK;
 800865c:	2300      	movs	r3, #0
}
 800865e:	4618      	mov	r0, r3
 8008660:	3710      	adds	r7, #16
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}

08008666 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008666:	b580      	push	{r7, lr}
 8008668:	b084      	sub	sp, #16
 800866a:	af00      	add	r7, sp, #0
 800866c:	60f8      	str	r0, [r7, #12]
 800866e:	60b9      	str	r1, [r7, #8]
 8008670:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	68ba      	ldr	r2, [r7, #8]
 8008676:	2100      	movs	r1, #0
 8008678:	68f8      	ldr	r0, [r7, #12]
 800867a:	f000 fcda 	bl	8009032 <USBD_LL_Transmit>

  return USBD_OK;
 800867e:	2300      	movs	r3, #0
}
 8008680:	4618      	mov	r0, r3
 8008682:	3710      	adds	r7, #16
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}

08008688 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b084      	sub	sp, #16
 800868c:	af00      	add	r7, sp, #0
 800868e:	60f8      	str	r0, [r7, #12]
 8008690:	60b9      	str	r1, [r7, #8]
 8008692:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	2203      	movs	r2, #3
 8008698:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	687a      	ldr	r2, [r7, #4]
 80086a0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	687a      	ldr	r2, [r7, #4]
 80086a8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	68ba      	ldr	r2, [r7, #8]
 80086b0:	2100      	movs	r1, #0
 80086b2:	68f8      	ldr	r0, [r7, #12]
 80086b4:	f000 fcde 	bl	8009074 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80086b8:	2300      	movs	r3, #0
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3710      	adds	r7, #16
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}

080086c2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80086c2:	b580      	push	{r7, lr}
 80086c4:	b084      	sub	sp, #16
 80086c6:	af00      	add	r7, sp, #0
 80086c8:	60f8      	str	r0, [r7, #12]
 80086ca:	60b9      	str	r1, [r7, #8]
 80086cc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	68ba      	ldr	r2, [r7, #8]
 80086d2:	2100      	movs	r1, #0
 80086d4:	68f8      	ldr	r0, [r7, #12]
 80086d6:	f000 fccd 	bl	8009074 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80086da:	2300      	movs	r3, #0
}
 80086dc:	4618      	mov	r0, r3
 80086de:	3710      	adds	r7, #16
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}

080086e4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b082      	sub	sp, #8
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2204      	movs	r2, #4
 80086f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80086f4:	2300      	movs	r3, #0
 80086f6:	2200      	movs	r2, #0
 80086f8:	2100      	movs	r1, #0
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f000 fc99 	bl	8009032 <USBD_LL_Transmit>

  return USBD_OK;
 8008700:	2300      	movs	r3, #0
}
 8008702:	4618      	mov	r0, r3
 8008704:	3708      	adds	r7, #8
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}

0800870a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800870a:	b580      	push	{r7, lr}
 800870c:	b082      	sub	sp, #8
 800870e:	af00      	add	r7, sp, #0
 8008710:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2205      	movs	r2, #5
 8008716:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800871a:	2300      	movs	r3, #0
 800871c:	2200      	movs	r2, #0
 800871e:	2100      	movs	r1, #0
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f000 fca7 	bl	8009074 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008726:	2300      	movs	r3, #0
}
 8008728:	4618      	mov	r0, r3
 800872a:	3708      	adds	r7, #8
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}

08008730 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008734:	2200      	movs	r2, #0
 8008736:	4912      	ldr	r1, [pc, #72]	; (8008780 <MX_USB_DEVICE_Init+0x50>)
 8008738:	4812      	ldr	r0, [pc, #72]	; (8008784 <MX_USB_DEVICE_Init+0x54>)
 800873a:	f7fe fd07 	bl	800714c <USBD_Init>
 800873e:	4603      	mov	r3, r0
 8008740:	2b00      	cmp	r3, #0
 8008742:	d001      	beq.n	8008748 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008744:	f7f8 f99e 	bl	8000a84 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008748:	490f      	ldr	r1, [pc, #60]	; (8008788 <MX_USB_DEVICE_Init+0x58>)
 800874a:	480e      	ldr	r0, [pc, #56]	; (8008784 <MX_USB_DEVICE_Init+0x54>)
 800874c:	f7fe fd2e 	bl	80071ac <USBD_RegisterClass>
 8008750:	4603      	mov	r3, r0
 8008752:	2b00      	cmp	r3, #0
 8008754:	d001      	beq.n	800875a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008756:	f7f8 f995 	bl	8000a84 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800875a:	490c      	ldr	r1, [pc, #48]	; (800878c <MX_USB_DEVICE_Init+0x5c>)
 800875c:	4809      	ldr	r0, [pc, #36]	; (8008784 <MX_USB_DEVICE_Init+0x54>)
 800875e:	f7fe fc1f 	bl	8006fa0 <USBD_CDC_RegisterInterface>
 8008762:	4603      	mov	r3, r0
 8008764:	2b00      	cmp	r3, #0
 8008766:	d001      	beq.n	800876c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008768:	f7f8 f98c 	bl	8000a84 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800876c:	4805      	ldr	r0, [pc, #20]	; (8008784 <MX_USB_DEVICE_Init+0x54>)
 800876e:	f7fe fd53 	bl	8007218 <USBD_Start>
 8008772:	4603      	mov	r3, r0
 8008774:	2b00      	cmp	r3, #0
 8008776:	d001      	beq.n	800877c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008778:	f7f8 f984 	bl	8000a84 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800877c:	bf00      	nop
 800877e:	bd80      	pop	{r7, pc}
 8008780:	200000ac 	.word	0x200000ac
 8008784:	200003bc 	.word	0x200003bc
 8008788:	20000018 	.word	0x20000018
 800878c:	20000098 	.word	0x20000098

08008790 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008794:	2200      	movs	r2, #0
 8008796:	4905      	ldr	r1, [pc, #20]	; (80087ac <CDC_Init_FS+0x1c>)
 8008798:	4805      	ldr	r0, [pc, #20]	; (80087b0 <CDC_Init_FS+0x20>)
 800879a:	f7fe fc1b 	bl	8006fd4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800879e:	4905      	ldr	r1, [pc, #20]	; (80087b4 <CDC_Init_FS+0x24>)
 80087a0:	4803      	ldr	r0, [pc, #12]	; (80087b0 <CDC_Init_FS+0x20>)
 80087a2:	f7fe fc39 	bl	8007018 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80087a6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	bd80      	pop	{r7, pc}
 80087ac:	20000e98 	.word	0x20000e98
 80087b0:	200003bc 	.word	0x200003bc
 80087b4:	20000698 	.word	0x20000698

080087b8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80087b8:	b480      	push	{r7}
 80087ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80087bc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80087be:	4618      	mov	r0, r3
 80087c0:	46bd      	mov	sp, r7
 80087c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c6:	4770      	bx	lr

080087c8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b083      	sub	sp, #12
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	4603      	mov	r3, r0
 80087d0:	6039      	str	r1, [r7, #0]
 80087d2:	71fb      	strb	r3, [r7, #7]
 80087d4:	4613      	mov	r3, r2
 80087d6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80087d8:	79fb      	ldrb	r3, [r7, #7]
 80087da:	2b23      	cmp	r3, #35	; 0x23
 80087dc:	d84a      	bhi.n	8008874 <CDC_Control_FS+0xac>
 80087de:	a201      	add	r2, pc, #4	; (adr r2, 80087e4 <CDC_Control_FS+0x1c>)
 80087e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087e4:	08008875 	.word	0x08008875
 80087e8:	08008875 	.word	0x08008875
 80087ec:	08008875 	.word	0x08008875
 80087f0:	08008875 	.word	0x08008875
 80087f4:	08008875 	.word	0x08008875
 80087f8:	08008875 	.word	0x08008875
 80087fc:	08008875 	.word	0x08008875
 8008800:	08008875 	.word	0x08008875
 8008804:	08008875 	.word	0x08008875
 8008808:	08008875 	.word	0x08008875
 800880c:	08008875 	.word	0x08008875
 8008810:	08008875 	.word	0x08008875
 8008814:	08008875 	.word	0x08008875
 8008818:	08008875 	.word	0x08008875
 800881c:	08008875 	.word	0x08008875
 8008820:	08008875 	.word	0x08008875
 8008824:	08008875 	.word	0x08008875
 8008828:	08008875 	.word	0x08008875
 800882c:	08008875 	.word	0x08008875
 8008830:	08008875 	.word	0x08008875
 8008834:	08008875 	.word	0x08008875
 8008838:	08008875 	.word	0x08008875
 800883c:	08008875 	.word	0x08008875
 8008840:	08008875 	.word	0x08008875
 8008844:	08008875 	.word	0x08008875
 8008848:	08008875 	.word	0x08008875
 800884c:	08008875 	.word	0x08008875
 8008850:	08008875 	.word	0x08008875
 8008854:	08008875 	.word	0x08008875
 8008858:	08008875 	.word	0x08008875
 800885c:	08008875 	.word	0x08008875
 8008860:	08008875 	.word	0x08008875
 8008864:	08008875 	.word	0x08008875
 8008868:	08008875 	.word	0x08008875
 800886c:	08008875 	.word	0x08008875
 8008870:	08008875 	.word	0x08008875
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008874:	bf00      	nop
  }

  return (USBD_OK);
 8008876:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008878:	4618      	mov	r0, r3
 800887a:	370c      	adds	r7, #12
 800887c:	46bd      	mov	sp, r7
 800887e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008882:	4770      	bx	lr

08008884 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b082      	sub	sp, #8
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
 800888c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800888e:	6879      	ldr	r1, [r7, #4]
 8008890:	4805      	ldr	r0, [pc, #20]	; (80088a8 <CDC_Receive_FS+0x24>)
 8008892:	f7fe fbc1 	bl	8007018 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008896:	4804      	ldr	r0, [pc, #16]	; (80088a8 <CDC_Receive_FS+0x24>)
 8008898:	f7fe fc22 	bl	80070e0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800889c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3708      	adds	r7, #8
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}
 80088a6:	bf00      	nop
 80088a8:	200003bc 	.word	0x200003bc

080088ac <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b084      	sub	sp, #16
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
 80088b4:	460b      	mov	r3, r1
 80088b6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80088b8:	2300      	movs	r3, #0
 80088ba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80088bc:	4b0d      	ldr	r3, [pc, #52]	; (80088f4 <CDC_Transmit_FS+0x48>)
 80088be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80088c2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d001      	beq.n	80088d2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80088ce:	2301      	movs	r3, #1
 80088d0:	e00b      	b.n	80088ea <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80088d2:	887b      	ldrh	r3, [r7, #2]
 80088d4:	461a      	mov	r2, r3
 80088d6:	6879      	ldr	r1, [r7, #4]
 80088d8:	4806      	ldr	r0, [pc, #24]	; (80088f4 <CDC_Transmit_FS+0x48>)
 80088da:	f7fe fb7b 	bl	8006fd4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80088de:	4805      	ldr	r0, [pc, #20]	; (80088f4 <CDC_Transmit_FS+0x48>)
 80088e0:	f7fe fbb8 	bl	8007054 <USBD_CDC_TransmitPacket>
 80088e4:	4603      	mov	r3, r0
 80088e6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80088e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	3710      	adds	r7, #16
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}
 80088f2:	bf00      	nop
 80088f4:	200003bc 	.word	0x200003bc

080088f8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b087      	sub	sp, #28
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	60f8      	str	r0, [r7, #12]
 8008900:	60b9      	str	r1, [r7, #8]
 8008902:	4613      	mov	r3, r2
 8008904:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008906:	2300      	movs	r3, #0
 8008908:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800890a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800890e:	4618      	mov	r0, r3
 8008910:	371c      	adds	r7, #28
 8008912:	46bd      	mov	sp, r7
 8008914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008918:	4770      	bx	lr
	...

0800891c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800891c:	b480      	push	{r7}
 800891e:	b083      	sub	sp, #12
 8008920:	af00      	add	r7, sp, #0
 8008922:	4603      	mov	r3, r0
 8008924:	6039      	str	r1, [r7, #0]
 8008926:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	2212      	movs	r2, #18
 800892c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800892e:	4b03      	ldr	r3, [pc, #12]	; (800893c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008930:	4618      	mov	r0, r3
 8008932:	370c      	adds	r7, #12
 8008934:	46bd      	mov	sp, r7
 8008936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893a:	4770      	bx	lr
 800893c:	200000c8 	.word	0x200000c8

08008940 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008940:	b480      	push	{r7}
 8008942:	b083      	sub	sp, #12
 8008944:	af00      	add	r7, sp, #0
 8008946:	4603      	mov	r3, r0
 8008948:	6039      	str	r1, [r7, #0]
 800894a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	2204      	movs	r2, #4
 8008950:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008952:	4b03      	ldr	r3, [pc, #12]	; (8008960 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008954:	4618      	mov	r0, r3
 8008956:	370c      	adds	r7, #12
 8008958:	46bd      	mov	sp, r7
 800895a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895e:	4770      	bx	lr
 8008960:	200000dc 	.word	0x200000dc

08008964 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b082      	sub	sp, #8
 8008968:	af00      	add	r7, sp, #0
 800896a:	4603      	mov	r3, r0
 800896c:	6039      	str	r1, [r7, #0]
 800896e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008970:	79fb      	ldrb	r3, [r7, #7]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d105      	bne.n	8008982 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008976:	683a      	ldr	r2, [r7, #0]
 8008978:	4907      	ldr	r1, [pc, #28]	; (8008998 <USBD_FS_ProductStrDescriptor+0x34>)
 800897a:	4808      	ldr	r0, [pc, #32]	; (800899c <USBD_FS_ProductStrDescriptor+0x38>)
 800897c:	f7ff fdf8 	bl	8008570 <USBD_GetString>
 8008980:	e004      	b.n	800898c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008982:	683a      	ldr	r2, [r7, #0]
 8008984:	4904      	ldr	r1, [pc, #16]	; (8008998 <USBD_FS_ProductStrDescriptor+0x34>)
 8008986:	4805      	ldr	r0, [pc, #20]	; (800899c <USBD_FS_ProductStrDescriptor+0x38>)
 8008988:	f7ff fdf2 	bl	8008570 <USBD_GetString>
  }
  return USBD_StrDesc;
 800898c:	4b02      	ldr	r3, [pc, #8]	; (8008998 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800898e:	4618      	mov	r0, r3
 8008990:	3708      	adds	r7, #8
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}
 8008996:	bf00      	nop
 8008998:	20001698 	.word	0x20001698
 800899c:	08009bd0 	.word	0x08009bd0

080089a0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b082      	sub	sp, #8
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	4603      	mov	r3, r0
 80089a8:	6039      	str	r1, [r7, #0]
 80089aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80089ac:	683a      	ldr	r2, [r7, #0]
 80089ae:	4904      	ldr	r1, [pc, #16]	; (80089c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80089b0:	4804      	ldr	r0, [pc, #16]	; (80089c4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80089b2:	f7ff fddd 	bl	8008570 <USBD_GetString>
  return USBD_StrDesc;
 80089b6:	4b02      	ldr	r3, [pc, #8]	; (80089c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	3708      	adds	r7, #8
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}
 80089c0:	20001698 	.word	0x20001698
 80089c4:	08009be8 	.word	0x08009be8

080089c8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b082      	sub	sp, #8
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	4603      	mov	r3, r0
 80089d0:	6039      	str	r1, [r7, #0]
 80089d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	221a      	movs	r2, #26
 80089d8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80089da:	f000 f843 	bl	8008a64 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80089de:	4b02      	ldr	r3, [pc, #8]	; (80089e8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80089e0:	4618      	mov	r0, r3
 80089e2:	3708      	adds	r7, #8
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bd80      	pop	{r7, pc}
 80089e8:	200000e0 	.word	0x200000e0

080089ec <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b082      	sub	sp, #8
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	4603      	mov	r3, r0
 80089f4:	6039      	str	r1, [r7, #0]
 80089f6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80089f8:	79fb      	ldrb	r3, [r7, #7]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d105      	bne.n	8008a0a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80089fe:	683a      	ldr	r2, [r7, #0]
 8008a00:	4907      	ldr	r1, [pc, #28]	; (8008a20 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008a02:	4808      	ldr	r0, [pc, #32]	; (8008a24 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008a04:	f7ff fdb4 	bl	8008570 <USBD_GetString>
 8008a08:	e004      	b.n	8008a14 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008a0a:	683a      	ldr	r2, [r7, #0]
 8008a0c:	4904      	ldr	r1, [pc, #16]	; (8008a20 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008a0e:	4805      	ldr	r0, [pc, #20]	; (8008a24 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008a10:	f7ff fdae 	bl	8008570 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008a14:	4b02      	ldr	r3, [pc, #8]	; (8008a20 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	3708      	adds	r7, #8
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}
 8008a1e:	bf00      	nop
 8008a20:	20001698 	.word	0x20001698
 8008a24:	08009bfc 	.word	0x08009bfc

08008a28 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b082      	sub	sp, #8
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	4603      	mov	r3, r0
 8008a30:	6039      	str	r1, [r7, #0]
 8008a32:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008a34:	79fb      	ldrb	r3, [r7, #7]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d105      	bne.n	8008a46 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008a3a:	683a      	ldr	r2, [r7, #0]
 8008a3c:	4907      	ldr	r1, [pc, #28]	; (8008a5c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008a3e:	4808      	ldr	r0, [pc, #32]	; (8008a60 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008a40:	f7ff fd96 	bl	8008570 <USBD_GetString>
 8008a44:	e004      	b.n	8008a50 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008a46:	683a      	ldr	r2, [r7, #0]
 8008a48:	4904      	ldr	r1, [pc, #16]	; (8008a5c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008a4a:	4805      	ldr	r0, [pc, #20]	; (8008a60 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008a4c:	f7ff fd90 	bl	8008570 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008a50:	4b02      	ldr	r3, [pc, #8]	; (8008a5c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	3708      	adds	r7, #8
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}
 8008a5a:	bf00      	nop
 8008a5c:	20001698 	.word	0x20001698
 8008a60:	08009c08 	.word	0x08009c08

08008a64 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b084      	sub	sp, #16
 8008a68:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008a6a:	4b0f      	ldr	r3, [pc, #60]	; (8008aa8 <Get_SerialNum+0x44>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008a70:	4b0e      	ldr	r3, [pc, #56]	; (8008aac <Get_SerialNum+0x48>)
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008a76:	4b0e      	ldr	r3, [pc, #56]	; (8008ab0 <Get_SerialNum+0x4c>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008a7c:	68fa      	ldr	r2, [r7, #12]
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	4413      	add	r3, r2
 8008a82:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d009      	beq.n	8008a9e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008a8a:	2208      	movs	r2, #8
 8008a8c:	4909      	ldr	r1, [pc, #36]	; (8008ab4 <Get_SerialNum+0x50>)
 8008a8e:	68f8      	ldr	r0, [r7, #12]
 8008a90:	f000 f814 	bl	8008abc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008a94:	2204      	movs	r2, #4
 8008a96:	4908      	ldr	r1, [pc, #32]	; (8008ab8 <Get_SerialNum+0x54>)
 8008a98:	68b8      	ldr	r0, [r7, #8]
 8008a9a:	f000 f80f 	bl	8008abc <IntToUnicode>
  }
}
 8008a9e:	bf00      	nop
 8008aa0:	3710      	adds	r7, #16
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}
 8008aa6:	bf00      	nop
 8008aa8:	1fff7a10 	.word	0x1fff7a10
 8008aac:	1fff7a14 	.word	0x1fff7a14
 8008ab0:	1fff7a18 	.word	0x1fff7a18
 8008ab4:	200000e2 	.word	0x200000e2
 8008ab8:	200000f2 	.word	0x200000f2

08008abc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008abc:	b480      	push	{r7}
 8008abe:	b087      	sub	sp, #28
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	60f8      	str	r0, [r7, #12]
 8008ac4:	60b9      	str	r1, [r7, #8]
 8008ac6:	4613      	mov	r3, r2
 8008ac8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008aca:	2300      	movs	r3, #0
 8008acc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008ace:	2300      	movs	r3, #0
 8008ad0:	75fb      	strb	r3, [r7, #23]
 8008ad2:	e027      	b.n	8008b24 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	0f1b      	lsrs	r3, r3, #28
 8008ad8:	2b09      	cmp	r3, #9
 8008ada:	d80b      	bhi.n	8008af4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	0f1b      	lsrs	r3, r3, #28
 8008ae0:	b2da      	uxtb	r2, r3
 8008ae2:	7dfb      	ldrb	r3, [r7, #23]
 8008ae4:	005b      	lsls	r3, r3, #1
 8008ae6:	4619      	mov	r1, r3
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	440b      	add	r3, r1
 8008aec:	3230      	adds	r2, #48	; 0x30
 8008aee:	b2d2      	uxtb	r2, r2
 8008af0:	701a      	strb	r2, [r3, #0]
 8008af2:	e00a      	b.n	8008b0a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	0f1b      	lsrs	r3, r3, #28
 8008af8:	b2da      	uxtb	r2, r3
 8008afa:	7dfb      	ldrb	r3, [r7, #23]
 8008afc:	005b      	lsls	r3, r3, #1
 8008afe:	4619      	mov	r1, r3
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	440b      	add	r3, r1
 8008b04:	3237      	adds	r2, #55	; 0x37
 8008b06:	b2d2      	uxtb	r2, r2
 8008b08:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	011b      	lsls	r3, r3, #4
 8008b0e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008b10:	7dfb      	ldrb	r3, [r7, #23]
 8008b12:	005b      	lsls	r3, r3, #1
 8008b14:	3301      	adds	r3, #1
 8008b16:	68ba      	ldr	r2, [r7, #8]
 8008b18:	4413      	add	r3, r2
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008b1e:	7dfb      	ldrb	r3, [r7, #23]
 8008b20:	3301      	adds	r3, #1
 8008b22:	75fb      	strb	r3, [r7, #23]
 8008b24:	7dfa      	ldrb	r2, [r7, #23]
 8008b26:	79fb      	ldrb	r3, [r7, #7]
 8008b28:	429a      	cmp	r2, r3
 8008b2a:	d3d3      	bcc.n	8008ad4 <IntToUnicode+0x18>
  }
}
 8008b2c:	bf00      	nop
 8008b2e:	bf00      	nop
 8008b30:	371c      	adds	r7, #28
 8008b32:	46bd      	mov	sp, r7
 8008b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b38:	4770      	bx	lr
	...

08008b3c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b08a      	sub	sp, #40	; 0x28
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008b44:	f107 0314 	add.w	r3, r7, #20
 8008b48:	2200      	movs	r2, #0
 8008b4a:	601a      	str	r2, [r3, #0]
 8008b4c:	605a      	str	r2, [r3, #4]
 8008b4e:	609a      	str	r2, [r3, #8]
 8008b50:	60da      	str	r2, [r3, #12]
 8008b52:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008b5c:	d13a      	bne.n	8008bd4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008b5e:	2300      	movs	r3, #0
 8008b60:	613b      	str	r3, [r7, #16]
 8008b62:	4b1e      	ldr	r3, [pc, #120]	; (8008bdc <HAL_PCD_MspInit+0xa0>)
 8008b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b66:	4a1d      	ldr	r2, [pc, #116]	; (8008bdc <HAL_PCD_MspInit+0xa0>)
 8008b68:	f043 0301 	orr.w	r3, r3, #1
 8008b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8008b6e:	4b1b      	ldr	r3, [pc, #108]	; (8008bdc <HAL_PCD_MspInit+0xa0>)
 8008b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b72:	f003 0301 	and.w	r3, r3, #1
 8008b76:	613b      	str	r3, [r7, #16]
 8008b78:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008b7a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008b7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b80:	2302      	movs	r3, #2
 8008b82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b84:	2300      	movs	r3, #0
 8008b86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008b88:	2303      	movs	r3, #3
 8008b8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008b8c:	230a      	movs	r3, #10
 8008b8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008b90:	f107 0314 	add.w	r3, r7, #20
 8008b94:	4619      	mov	r1, r3
 8008b96:	4812      	ldr	r0, [pc, #72]	; (8008be0 <HAL_PCD_MspInit+0xa4>)
 8008b98:	f7f9 fdb0 	bl	80026fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008b9c:	4b0f      	ldr	r3, [pc, #60]	; (8008bdc <HAL_PCD_MspInit+0xa0>)
 8008b9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ba0:	4a0e      	ldr	r2, [pc, #56]	; (8008bdc <HAL_PCD_MspInit+0xa0>)
 8008ba2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ba6:	6353      	str	r3, [r2, #52]	; 0x34
 8008ba8:	2300      	movs	r3, #0
 8008baa:	60fb      	str	r3, [r7, #12]
 8008bac:	4b0b      	ldr	r3, [pc, #44]	; (8008bdc <HAL_PCD_MspInit+0xa0>)
 8008bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bb0:	4a0a      	ldr	r2, [pc, #40]	; (8008bdc <HAL_PCD_MspInit+0xa0>)
 8008bb2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008bb6:	6453      	str	r3, [r2, #68]	; 0x44
 8008bb8:	4b08      	ldr	r3, [pc, #32]	; (8008bdc <HAL_PCD_MspInit+0xa0>)
 8008bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008bc0:	60fb      	str	r3, [r7, #12]
 8008bc2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	2100      	movs	r1, #0
 8008bc8:	2043      	movs	r0, #67	; 0x43
 8008bca:	f7f9 fa76 	bl	80020ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008bce:	2043      	movs	r0, #67	; 0x43
 8008bd0:	f7f9 fa8f 	bl	80020f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008bd4:	bf00      	nop
 8008bd6:	3728      	adds	r7, #40	; 0x28
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd80      	pop	{r7, pc}
 8008bdc:	40023800 	.word	0x40023800
 8008be0:	40020000 	.word	0x40020000

08008be4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b082      	sub	sp, #8
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008bf8:	4619      	mov	r1, r3
 8008bfa:	4610      	mov	r0, r2
 8008bfc:	f7fe fb59 	bl	80072b2 <USBD_LL_SetupStage>
}
 8008c00:	bf00      	nop
 8008c02:	3708      	adds	r7, #8
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bd80      	pop	{r7, pc}

08008c08 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b082      	sub	sp, #8
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
 8008c10:	460b      	mov	r3, r1
 8008c12:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008c1a:	78fa      	ldrb	r2, [r7, #3]
 8008c1c:	6879      	ldr	r1, [r7, #4]
 8008c1e:	4613      	mov	r3, r2
 8008c20:	00db      	lsls	r3, r3, #3
 8008c22:	4413      	add	r3, r2
 8008c24:	009b      	lsls	r3, r3, #2
 8008c26:	440b      	add	r3, r1
 8008c28:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008c2c:	681a      	ldr	r2, [r3, #0]
 8008c2e:	78fb      	ldrb	r3, [r7, #3]
 8008c30:	4619      	mov	r1, r3
 8008c32:	f7fe fb93 	bl	800735c <USBD_LL_DataOutStage>
}
 8008c36:	bf00      	nop
 8008c38:	3708      	adds	r7, #8
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}

08008c3e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c3e:	b580      	push	{r7, lr}
 8008c40:	b082      	sub	sp, #8
 8008c42:	af00      	add	r7, sp, #0
 8008c44:	6078      	str	r0, [r7, #4]
 8008c46:	460b      	mov	r3, r1
 8008c48:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008c50:	78fa      	ldrb	r2, [r7, #3]
 8008c52:	6879      	ldr	r1, [r7, #4]
 8008c54:	4613      	mov	r3, r2
 8008c56:	00db      	lsls	r3, r3, #3
 8008c58:	4413      	add	r3, r2
 8008c5a:	009b      	lsls	r3, r3, #2
 8008c5c:	440b      	add	r3, r1
 8008c5e:	334c      	adds	r3, #76	; 0x4c
 8008c60:	681a      	ldr	r2, [r3, #0]
 8008c62:	78fb      	ldrb	r3, [r7, #3]
 8008c64:	4619      	mov	r1, r3
 8008c66:	f7fe fc2c 	bl	80074c2 <USBD_LL_DataInStage>
}
 8008c6a:	bf00      	nop
 8008c6c:	3708      	adds	r7, #8
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}

08008c72 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c72:	b580      	push	{r7, lr}
 8008c74:	b082      	sub	sp, #8
 8008c76:	af00      	add	r7, sp, #0
 8008c78:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008c80:	4618      	mov	r0, r3
 8008c82:	f7fe fd60 	bl	8007746 <USBD_LL_SOF>
}
 8008c86:	bf00      	nop
 8008c88:	3708      	adds	r7, #8
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}

08008c8e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c8e:	b580      	push	{r7, lr}
 8008c90:	b084      	sub	sp, #16
 8008c92:	af00      	add	r7, sp, #0
 8008c94:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008c96:	2301      	movs	r3, #1
 8008c98:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	68db      	ldr	r3, [r3, #12]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d102      	bne.n	8008ca8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	73fb      	strb	r3, [r7, #15]
 8008ca6:	e008      	b.n	8008cba <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	68db      	ldr	r3, [r3, #12]
 8008cac:	2b02      	cmp	r3, #2
 8008cae:	d102      	bne.n	8008cb6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	73fb      	strb	r3, [r7, #15]
 8008cb4:	e001      	b.n	8008cba <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008cb6:	f7f7 fee5 	bl	8000a84 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008cc0:	7bfa      	ldrb	r2, [r7, #15]
 8008cc2:	4611      	mov	r1, r2
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	f7fe fd00 	bl	80076ca <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	f7fe fca8 	bl	8007626 <USBD_LL_Reset>
}
 8008cd6:	bf00      	nop
 8008cd8:	3710      	adds	r7, #16
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}
	...

08008ce0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b082      	sub	sp, #8
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008cee:	4618      	mov	r0, r3
 8008cf0:	f7fe fcfb 	bl	80076ea <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	687a      	ldr	r2, [r7, #4]
 8008d00:	6812      	ldr	r2, [r2, #0]
 8008d02:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008d06:	f043 0301 	orr.w	r3, r3, #1
 8008d0a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	6a1b      	ldr	r3, [r3, #32]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d005      	beq.n	8008d20 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008d14:	4b04      	ldr	r3, [pc, #16]	; (8008d28 <HAL_PCD_SuspendCallback+0x48>)
 8008d16:	691b      	ldr	r3, [r3, #16]
 8008d18:	4a03      	ldr	r2, [pc, #12]	; (8008d28 <HAL_PCD_SuspendCallback+0x48>)
 8008d1a:	f043 0306 	orr.w	r3, r3, #6
 8008d1e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008d20:	bf00      	nop
 8008d22:	3708      	adds	r7, #8
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}
 8008d28:	e000ed00 	.word	0xe000ed00

08008d2c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b082      	sub	sp, #8
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f7fe fceb 	bl	8007716 <USBD_LL_Resume>
}
 8008d40:	bf00      	nop
 8008d42:	3708      	adds	r7, #8
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}

08008d48 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b082      	sub	sp, #8
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
 8008d50:	460b      	mov	r3, r1
 8008d52:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008d5a:	78fa      	ldrb	r2, [r7, #3]
 8008d5c:	4611      	mov	r1, r2
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f7fe fd43 	bl	80077ea <USBD_LL_IsoOUTIncomplete>
}
 8008d64:	bf00      	nop
 8008d66:	3708      	adds	r7, #8
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}

08008d6c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b082      	sub	sp, #8
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
 8008d74:	460b      	mov	r3, r1
 8008d76:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008d7e:	78fa      	ldrb	r2, [r7, #3]
 8008d80:	4611      	mov	r1, r2
 8008d82:	4618      	mov	r0, r3
 8008d84:	f7fe fcff 	bl	8007786 <USBD_LL_IsoINIncomplete>
}
 8008d88:	bf00      	nop
 8008d8a:	3708      	adds	r7, #8
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}

08008d90 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b082      	sub	sp, #8
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008d9e:	4618      	mov	r0, r3
 8008da0:	f7fe fd55 	bl	800784e <USBD_LL_DevConnected>
}
 8008da4:	bf00      	nop
 8008da6:	3708      	adds	r7, #8
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bd80      	pop	{r7, pc}

08008dac <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b082      	sub	sp, #8
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008dba:	4618      	mov	r0, r3
 8008dbc:	f7fe fd52 	bl	8007864 <USBD_LL_DevDisconnected>
}
 8008dc0:	bf00      	nop
 8008dc2:	3708      	adds	r7, #8
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}

08008dc8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b082      	sub	sp, #8
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	781b      	ldrb	r3, [r3, #0]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d13c      	bne.n	8008e52 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008dd8:	4a20      	ldr	r2, [pc, #128]	; (8008e5c <USBD_LL_Init+0x94>)
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	4a1e      	ldr	r2, [pc, #120]	; (8008e5c <USBD_LL_Init+0x94>)
 8008de4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008de8:	4b1c      	ldr	r3, [pc, #112]	; (8008e5c <USBD_LL_Init+0x94>)
 8008dea:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008dee:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008df0:	4b1a      	ldr	r3, [pc, #104]	; (8008e5c <USBD_LL_Init+0x94>)
 8008df2:	2204      	movs	r2, #4
 8008df4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008df6:	4b19      	ldr	r3, [pc, #100]	; (8008e5c <USBD_LL_Init+0x94>)
 8008df8:	2202      	movs	r2, #2
 8008dfa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008dfc:	4b17      	ldr	r3, [pc, #92]	; (8008e5c <USBD_LL_Init+0x94>)
 8008dfe:	2200      	movs	r2, #0
 8008e00:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008e02:	4b16      	ldr	r3, [pc, #88]	; (8008e5c <USBD_LL_Init+0x94>)
 8008e04:	2202      	movs	r2, #2
 8008e06:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008e08:	4b14      	ldr	r3, [pc, #80]	; (8008e5c <USBD_LL_Init+0x94>)
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008e0e:	4b13      	ldr	r3, [pc, #76]	; (8008e5c <USBD_LL_Init+0x94>)
 8008e10:	2200      	movs	r2, #0
 8008e12:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008e14:	4b11      	ldr	r3, [pc, #68]	; (8008e5c <USBD_LL_Init+0x94>)
 8008e16:	2200      	movs	r2, #0
 8008e18:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008e1a:	4b10      	ldr	r3, [pc, #64]	; (8008e5c <USBD_LL_Init+0x94>)
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008e20:	4b0e      	ldr	r3, [pc, #56]	; (8008e5c <USBD_LL_Init+0x94>)
 8008e22:	2200      	movs	r2, #0
 8008e24:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008e26:	480d      	ldr	r0, [pc, #52]	; (8008e5c <USBD_LL_Init+0x94>)
 8008e28:	f7f9 fe04 	bl	8002a34 <HAL_PCD_Init>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d001      	beq.n	8008e36 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008e32:	f7f7 fe27 	bl	8000a84 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008e36:	2180      	movs	r1, #128	; 0x80
 8008e38:	4808      	ldr	r0, [pc, #32]	; (8008e5c <USBD_LL_Init+0x94>)
 8008e3a:	f7fb f85c 	bl	8003ef6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008e3e:	2240      	movs	r2, #64	; 0x40
 8008e40:	2100      	movs	r1, #0
 8008e42:	4806      	ldr	r0, [pc, #24]	; (8008e5c <USBD_LL_Init+0x94>)
 8008e44:	f7fb f810 	bl	8003e68 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008e48:	2280      	movs	r2, #128	; 0x80
 8008e4a:	2101      	movs	r1, #1
 8008e4c:	4803      	ldr	r0, [pc, #12]	; (8008e5c <USBD_LL_Init+0x94>)
 8008e4e:	f7fb f80b 	bl	8003e68 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008e52:	2300      	movs	r3, #0
}
 8008e54:	4618      	mov	r0, r3
 8008e56:	3708      	adds	r7, #8
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	bd80      	pop	{r7, pc}
 8008e5c:	20001898 	.word	0x20001898

08008e60 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b084      	sub	sp, #16
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e68:	2300      	movs	r3, #0
 8008e6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008e76:	4618      	mov	r0, r3
 8008e78:	f7f9 fef9 	bl	8002c6e <HAL_PCD_Start>
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e80:	7bfb      	ldrb	r3, [r7, #15]
 8008e82:	4618      	mov	r0, r3
 8008e84:	f000 f942 	bl	800910c <USBD_Get_USB_Status>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	3710      	adds	r7, #16
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}

08008e96 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008e96:	b580      	push	{r7, lr}
 8008e98:	b084      	sub	sp, #16
 8008e9a:	af00      	add	r7, sp, #0
 8008e9c:	6078      	str	r0, [r7, #4]
 8008e9e:	4608      	mov	r0, r1
 8008ea0:	4611      	mov	r1, r2
 8008ea2:	461a      	mov	r2, r3
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	70fb      	strb	r3, [r7, #3]
 8008ea8:	460b      	mov	r3, r1
 8008eaa:	70bb      	strb	r3, [r7, #2]
 8008eac:	4613      	mov	r3, r2
 8008eae:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008ebe:	78bb      	ldrb	r3, [r7, #2]
 8008ec0:	883a      	ldrh	r2, [r7, #0]
 8008ec2:	78f9      	ldrb	r1, [r7, #3]
 8008ec4:	f7fa fbca 	bl	800365c <HAL_PCD_EP_Open>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ecc:	7bfb      	ldrb	r3, [r7, #15]
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f000 f91c 	bl	800910c <USBD_Get_USB_Status>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ed8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	3710      	adds	r7, #16
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}

08008ee2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ee2:	b580      	push	{r7, lr}
 8008ee4:	b084      	sub	sp, #16
 8008ee6:	af00      	add	r7, sp, #0
 8008ee8:	6078      	str	r0, [r7, #4]
 8008eea:	460b      	mov	r3, r1
 8008eec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008efc:	78fa      	ldrb	r2, [r7, #3]
 8008efe:	4611      	mov	r1, r2
 8008f00:	4618      	mov	r0, r3
 8008f02:	f7fa fc13 	bl	800372c <HAL_PCD_EP_Close>
 8008f06:	4603      	mov	r3, r0
 8008f08:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f0a:	7bfb      	ldrb	r3, [r7, #15]
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	f000 f8fd 	bl	800910c <USBD_Get_USB_Status>
 8008f12:	4603      	mov	r3, r0
 8008f14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f16:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f18:	4618      	mov	r0, r3
 8008f1a:	3710      	adds	r7, #16
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bd80      	pop	{r7, pc}

08008f20 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b084      	sub	sp, #16
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
 8008f28:	460b      	mov	r3, r1
 8008f2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f30:	2300      	movs	r3, #0
 8008f32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008f3a:	78fa      	ldrb	r2, [r7, #3]
 8008f3c:	4611      	mov	r1, r2
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f7fa fceb 	bl	800391a <HAL_PCD_EP_SetStall>
 8008f44:	4603      	mov	r3, r0
 8008f46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f48:	7bfb      	ldrb	r3, [r7, #15]
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	f000 f8de 	bl	800910c <USBD_Get_USB_Status>
 8008f50:	4603      	mov	r3, r0
 8008f52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f54:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f56:	4618      	mov	r0, r3
 8008f58:	3710      	adds	r7, #16
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}

08008f5e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f5e:	b580      	push	{r7, lr}
 8008f60:	b084      	sub	sp, #16
 8008f62:	af00      	add	r7, sp, #0
 8008f64:	6078      	str	r0, [r7, #4]
 8008f66:	460b      	mov	r3, r1
 8008f68:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008f78:	78fa      	ldrb	r2, [r7, #3]
 8008f7a:	4611      	mov	r1, r2
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	f7fa fd30 	bl	80039e2 <HAL_PCD_EP_ClrStall>
 8008f82:	4603      	mov	r3, r0
 8008f84:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f86:	7bfb      	ldrb	r3, [r7, #15]
 8008f88:	4618      	mov	r0, r3
 8008f8a:	f000 f8bf 	bl	800910c <USBD_Get_USB_Status>
 8008f8e:	4603      	mov	r3, r0
 8008f90:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f92:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f94:	4618      	mov	r0, r3
 8008f96:	3710      	adds	r7, #16
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bd80      	pop	{r7, pc}

08008f9c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	b085      	sub	sp, #20
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
 8008fa4:	460b      	mov	r3, r1
 8008fa6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008fae:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008fb0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	da0b      	bge.n	8008fd0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008fb8:	78fb      	ldrb	r3, [r7, #3]
 8008fba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008fbe:	68f9      	ldr	r1, [r7, #12]
 8008fc0:	4613      	mov	r3, r2
 8008fc2:	00db      	lsls	r3, r3, #3
 8008fc4:	4413      	add	r3, r2
 8008fc6:	009b      	lsls	r3, r3, #2
 8008fc8:	440b      	add	r3, r1
 8008fca:	333e      	adds	r3, #62	; 0x3e
 8008fcc:	781b      	ldrb	r3, [r3, #0]
 8008fce:	e00b      	b.n	8008fe8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008fd0:	78fb      	ldrb	r3, [r7, #3]
 8008fd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008fd6:	68f9      	ldr	r1, [r7, #12]
 8008fd8:	4613      	mov	r3, r2
 8008fda:	00db      	lsls	r3, r3, #3
 8008fdc:	4413      	add	r3, r2
 8008fde:	009b      	lsls	r3, r3, #2
 8008fe0:	440b      	add	r3, r1
 8008fe2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008fe6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	3714      	adds	r7, #20
 8008fec:	46bd      	mov	sp, r7
 8008fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff2:	4770      	bx	lr

08008ff4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b084      	sub	sp, #16
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
 8008ffc:	460b      	mov	r3, r1
 8008ffe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009000:	2300      	movs	r3, #0
 8009002:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009004:	2300      	movs	r3, #0
 8009006:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800900e:	78fa      	ldrb	r2, [r7, #3]
 8009010:	4611      	mov	r1, r2
 8009012:	4618      	mov	r0, r3
 8009014:	f7fa fafd 	bl	8003612 <HAL_PCD_SetAddress>
 8009018:	4603      	mov	r3, r0
 800901a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800901c:	7bfb      	ldrb	r3, [r7, #15]
 800901e:	4618      	mov	r0, r3
 8009020:	f000 f874 	bl	800910c <USBD_Get_USB_Status>
 8009024:	4603      	mov	r3, r0
 8009026:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009028:	7bbb      	ldrb	r3, [r7, #14]
}
 800902a:	4618      	mov	r0, r3
 800902c:	3710      	adds	r7, #16
 800902e:	46bd      	mov	sp, r7
 8009030:	bd80      	pop	{r7, pc}

08009032 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009032:	b580      	push	{r7, lr}
 8009034:	b086      	sub	sp, #24
 8009036:	af00      	add	r7, sp, #0
 8009038:	60f8      	str	r0, [r7, #12]
 800903a:	607a      	str	r2, [r7, #4]
 800903c:	603b      	str	r3, [r7, #0]
 800903e:	460b      	mov	r3, r1
 8009040:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009042:	2300      	movs	r3, #0
 8009044:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009046:	2300      	movs	r3, #0
 8009048:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009050:	7af9      	ldrb	r1, [r7, #11]
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	687a      	ldr	r2, [r7, #4]
 8009056:	f7fa fc16 	bl	8003886 <HAL_PCD_EP_Transmit>
 800905a:	4603      	mov	r3, r0
 800905c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800905e:	7dfb      	ldrb	r3, [r7, #23]
 8009060:	4618      	mov	r0, r3
 8009062:	f000 f853 	bl	800910c <USBD_Get_USB_Status>
 8009066:	4603      	mov	r3, r0
 8009068:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800906a:	7dbb      	ldrb	r3, [r7, #22]
}
 800906c:	4618      	mov	r0, r3
 800906e:	3718      	adds	r7, #24
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}

08009074 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b086      	sub	sp, #24
 8009078:	af00      	add	r7, sp, #0
 800907a:	60f8      	str	r0, [r7, #12]
 800907c:	607a      	str	r2, [r7, #4]
 800907e:	603b      	str	r3, [r7, #0]
 8009080:	460b      	mov	r3, r1
 8009082:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009084:	2300      	movs	r3, #0
 8009086:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009088:	2300      	movs	r3, #0
 800908a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009092:	7af9      	ldrb	r1, [r7, #11]
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	687a      	ldr	r2, [r7, #4]
 8009098:	f7fa fb92 	bl	80037c0 <HAL_PCD_EP_Receive>
 800909c:	4603      	mov	r3, r0
 800909e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090a0:	7dfb      	ldrb	r3, [r7, #23]
 80090a2:	4618      	mov	r0, r3
 80090a4:	f000 f832 	bl	800910c <USBD_Get_USB_Status>
 80090a8:	4603      	mov	r3, r0
 80090aa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80090ac:	7dbb      	ldrb	r3, [r7, #22]
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	3718      	adds	r7, #24
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}

080090b6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80090b6:	b580      	push	{r7, lr}
 80090b8:	b082      	sub	sp, #8
 80090ba:	af00      	add	r7, sp, #0
 80090bc:	6078      	str	r0, [r7, #4]
 80090be:	460b      	mov	r3, r1
 80090c0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80090c8:	78fa      	ldrb	r2, [r7, #3]
 80090ca:	4611      	mov	r1, r2
 80090cc:	4618      	mov	r0, r3
 80090ce:	f7fa fbc2 	bl	8003856 <HAL_PCD_EP_GetRxCount>
 80090d2:	4603      	mov	r3, r0
}
 80090d4:	4618      	mov	r0, r3
 80090d6:	3708      	adds	r7, #8
 80090d8:	46bd      	mov	sp, r7
 80090da:	bd80      	pop	{r7, pc}

080090dc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80090dc:	b480      	push	{r7}
 80090de:	b083      	sub	sp, #12
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80090e4:	4b03      	ldr	r3, [pc, #12]	; (80090f4 <USBD_static_malloc+0x18>)
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	370c      	adds	r7, #12
 80090ea:	46bd      	mov	sp, r7
 80090ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f0:	4770      	bx	lr
 80090f2:	bf00      	nop
 80090f4:	20001da4 	.word	0x20001da4

080090f8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80090f8:	b480      	push	{r7}
 80090fa:	b083      	sub	sp, #12
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]

}
 8009100:	bf00      	nop
 8009102:	370c      	adds	r7, #12
 8009104:	46bd      	mov	sp, r7
 8009106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910a:	4770      	bx	lr

0800910c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800910c:	b480      	push	{r7}
 800910e:	b085      	sub	sp, #20
 8009110:	af00      	add	r7, sp, #0
 8009112:	4603      	mov	r3, r0
 8009114:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009116:	2300      	movs	r3, #0
 8009118:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800911a:	79fb      	ldrb	r3, [r7, #7]
 800911c:	2b03      	cmp	r3, #3
 800911e:	d817      	bhi.n	8009150 <USBD_Get_USB_Status+0x44>
 8009120:	a201      	add	r2, pc, #4	; (adr r2, 8009128 <USBD_Get_USB_Status+0x1c>)
 8009122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009126:	bf00      	nop
 8009128:	08009139 	.word	0x08009139
 800912c:	0800913f 	.word	0x0800913f
 8009130:	08009145 	.word	0x08009145
 8009134:	0800914b 	.word	0x0800914b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009138:	2300      	movs	r3, #0
 800913a:	73fb      	strb	r3, [r7, #15]
    break;
 800913c:	e00b      	b.n	8009156 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800913e:	2303      	movs	r3, #3
 8009140:	73fb      	strb	r3, [r7, #15]
    break;
 8009142:	e008      	b.n	8009156 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009144:	2301      	movs	r3, #1
 8009146:	73fb      	strb	r3, [r7, #15]
    break;
 8009148:	e005      	b.n	8009156 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800914a:	2303      	movs	r3, #3
 800914c:	73fb      	strb	r3, [r7, #15]
    break;
 800914e:	e002      	b.n	8009156 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009150:	2303      	movs	r3, #3
 8009152:	73fb      	strb	r3, [r7, #15]
    break;
 8009154:	bf00      	nop
  }
  return usb_status;
 8009156:	7bfb      	ldrb	r3, [r7, #15]
}
 8009158:	4618      	mov	r0, r3
 800915a:	3714      	adds	r7, #20
 800915c:	46bd      	mov	sp, r7
 800915e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009162:	4770      	bx	lr

08009164 <__errno>:
 8009164:	4b01      	ldr	r3, [pc, #4]	; (800916c <__errno+0x8>)
 8009166:	6818      	ldr	r0, [r3, #0]
 8009168:	4770      	bx	lr
 800916a:	bf00      	nop
 800916c:	200000fc 	.word	0x200000fc

08009170 <__libc_init_array>:
 8009170:	b570      	push	{r4, r5, r6, lr}
 8009172:	4d0d      	ldr	r5, [pc, #52]	; (80091a8 <__libc_init_array+0x38>)
 8009174:	4c0d      	ldr	r4, [pc, #52]	; (80091ac <__libc_init_array+0x3c>)
 8009176:	1b64      	subs	r4, r4, r5
 8009178:	10a4      	asrs	r4, r4, #2
 800917a:	2600      	movs	r6, #0
 800917c:	42a6      	cmp	r6, r4
 800917e:	d109      	bne.n	8009194 <__libc_init_array+0x24>
 8009180:	4d0b      	ldr	r5, [pc, #44]	; (80091b0 <__libc_init_array+0x40>)
 8009182:	4c0c      	ldr	r4, [pc, #48]	; (80091b4 <__libc_init_array+0x44>)
 8009184:	f000 fc8e 	bl	8009aa4 <_init>
 8009188:	1b64      	subs	r4, r4, r5
 800918a:	10a4      	asrs	r4, r4, #2
 800918c:	2600      	movs	r6, #0
 800918e:	42a6      	cmp	r6, r4
 8009190:	d105      	bne.n	800919e <__libc_init_array+0x2e>
 8009192:	bd70      	pop	{r4, r5, r6, pc}
 8009194:	f855 3b04 	ldr.w	r3, [r5], #4
 8009198:	4798      	blx	r3
 800919a:	3601      	adds	r6, #1
 800919c:	e7ee      	b.n	800917c <__libc_init_array+0xc>
 800919e:	f855 3b04 	ldr.w	r3, [r5], #4
 80091a2:	4798      	blx	r3
 80091a4:	3601      	adds	r6, #1
 80091a6:	e7f2      	b.n	800918e <__libc_init_array+0x1e>
 80091a8:	08009c74 	.word	0x08009c74
 80091ac:	08009c74 	.word	0x08009c74
 80091b0:	08009c74 	.word	0x08009c74
 80091b4:	08009c78 	.word	0x08009c78

080091b8 <memset>:
 80091b8:	4402      	add	r2, r0
 80091ba:	4603      	mov	r3, r0
 80091bc:	4293      	cmp	r3, r2
 80091be:	d100      	bne.n	80091c2 <memset+0xa>
 80091c0:	4770      	bx	lr
 80091c2:	f803 1b01 	strb.w	r1, [r3], #1
 80091c6:	e7f9      	b.n	80091bc <memset+0x4>

080091c8 <siprintf>:
 80091c8:	b40e      	push	{r1, r2, r3}
 80091ca:	b500      	push	{lr}
 80091cc:	b09c      	sub	sp, #112	; 0x70
 80091ce:	ab1d      	add	r3, sp, #116	; 0x74
 80091d0:	9002      	str	r0, [sp, #8]
 80091d2:	9006      	str	r0, [sp, #24]
 80091d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80091d8:	4809      	ldr	r0, [pc, #36]	; (8009200 <siprintf+0x38>)
 80091da:	9107      	str	r1, [sp, #28]
 80091dc:	9104      	str	r1, [sp, #16]
 80091de:	4909      	ldr	r1, [pc, #36]	; (8009204 <siprintf+0x3c>)
 80091e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80091e4:	9105      	str	r1, [sp, #20]
 80091e6:	6800      	ldr	r0, [r0, #0]
 80091e8:	9301      	str	r3, [sp, #4]
 80091ea:	a902      	add	r1, sp, #8
 80091ec:	f000 f868 	bl	80092c0 <_svfiprintf_r>
 80091f0:	9b02      	ldr	r3, [sp, #8]
 80091f2:	2200      	movs	r2, #0
 80091f4:	701a      	strb	r2, [r3, #0]
 80091f6:	b01c      	add	sp, #112	; 0x70
 80091f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80091fc:	b003      	add	sp, #12
 80091fe:	4770      	bx	lr
 8009200:	200000fc 	.word	0x200000fc
 8009204:	ffff0208 	.word	0xffff0208

08009208 <__ssputs_r>:
 8009208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800920c:	688e      	ldr	r6, [r1, #8]
 800920e:	429e      	cmp	r6, r3
 8009210:	4682      	mov	sl, r0
 8009212:	460c      	mov	r4, r1
 8009214:	4690      	mov	r8, r2
 8009216:	461f      	mov	r7, r3
 8009218:	d838      	bhi.n	800928c <__ssputs_r+0x84>
 800921a:	898a      	ldrh	r2, [r1, #12]
 800921c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009220:	d032      	beq.n	8009288 <__ssputs_r+0x80>
 8009222:	6825      	ldr	r5, [r4, #0]
 8009224:	6909      	ldr	r1, [r1, #16]
 8009226:	eba5 0901 	sub.w	r9, r5, r1
 800922a:	6965      	ldr	r5, [r4, #20]
 800922c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009230:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009234:	3301      	adds	r3, #1
 8009236:	444b      	add	r3, r9
 8009238:	106d      	asrs	r5, r5, #1
 800923a:	429d      	cmp	r5, r3
 800923c:	bf38      	it	cc
 800923e:	461d      	movcc	r5, r3
 8009240:	0553      	lsls	r3, r2, #21
 8009242:	d531      	bpl.n	80092a8 <__ssputs_r+0xa0>
 8009244:	4629      	mov	r1, r5
 8009246:	f000 fb63 	bl	8009910 <_malloc_r>
 800924a:	4606      	mov	r6, r0
 800924c:	b950      	cbnz	r0, 8009264 <__ssputs_r+0x5c>
 800924e:	230c      	movs	r3, #12
 8009250:	f8ca 3000 	str.w	r3, [sl]
 8009254:	89a3      	ldrh	r3, [r4, #12]
 8009256:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800925a:	81a3      	strh	r3, [r4, #12]
 800925c:	f04f 30ff 	mov.w	r0, #4294967295
 8009260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009264:	6921      	ldr	r1, [r4, #16]
 8009266:	464a      	mov	r2, r9
 8009268:	f000 fabe 	bl	80097e8 <memcpy>
 800926c:	89a3      	ldrh	r3, [r4, #12]
 800926e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009272:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009276:	81a3      	strh	r3, [r4, #12]
 8009278:	6126      	str	r6, [r4, #16]
 800927a:	6165      	str	r5, [r4, #20]
 800927c:	444e      	add	r6, r9
 800927e:	eba5 0509 	sub.w	r5, r5, r9
 8009282:	6026      	str	r6, [r4, #0]
 8009284:	60a5      	str	r5, [r4, #8]
 8009286:	463e      	mov	r6, r7
 8009288:	42be      	cmp	r6, r7
 800928a:	d900      	bls.n	800928e <__ssputs_r+0x86>
 800928c:	463e      	mov	r6, r7
 800928e:	6820      	ldr	r0, [r4, #0]
 8009290:	4632      	mov	r2, r6
 8009292:	4641      	mov	r1, r8
 8009294:	f000 fab6 	bl	8009804 <memmove>
 8009298:	68a3      	ldr	r3, [r4, #8]
 800929a:	1b9b      	subs	r3, r3, r6
 800929c:	60a3      	str	r3, [r4, #8]
 800929e:	6823      	ldr	r3, [r4, #0]
 80092a0:	4433      	add	r3, r6
 80092a2:	6023      	str	r3, [r4, #0]
 80092a4:	2000      	movs	r0, #0
 80092a6:	e7db      	b.n	8009260 <__ssputs_r+0x58>
 80092a8:	462a      	mov	r2, r5
 80092aa:	f000 fba5 	bl	80099f8 <_realloc_r>
 80092ae:	4606      	mov	r6, r0
 80092b0:	2800      	cmp	r0, #0
 80092b2:	d1e1      	bne.n	8009278 <__ssputs_r+0x70>
 80092b4:	6921      	ldr	r1, [r4, #16]
 80092b6:	4650      	mov	r0, sl
 80092b8:	f000 fabe 	bl	8009838 <_free_r>
 80092bc:	e7c7      	b.n	800924e <__ssputs_r+0x46>
	...

080092c0 <_svfiprintf_r>:
 80092c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092c4:	4698      	mov	r8, r3
 80092c6:	898b      	ldrh	r3, [r1, #12]
 80092c8:	061b      	lsls	r3, r3, #24
 80092ca:	b09d      	sub	sp, #116	; 0x74
 80092cc:	4607      	mov	r7, r0
 80092ce:	460d      	mov	r5, r1
 80092d0:	4614      	mov	r4, r2
 80092d2:	d50e      	bpl.n	80092f2 <_svfiprintf_r+0x32>
 80092d4:	690b      	ldr	r3, [r1, #16]
 80092d6:	b963      	cbnz	r3, 80092f2 <_svfiprintf_r+0x32>
 80092d8:	2140      	movs	r1, #64	; 0x40
 80092da:	f000 fb19 	bl	8009910 <_malloc_r>
 80092de:	6028      	str	r0, [r5, #0]
 80092e0:	6128      	str	r0, [r5, #16]
 80092e2:	b920      	cbnz	r0, 80092ee <_svfiprintf_r+0x2e>
 80092e4:	230c      	movs	r3, #12
 80092e6:	603b      	str	r3, [r7, #0]
 80092e8:	f04f 30ff 	mov.w	r0, #4294967295
 80092ec:	e0d1      	b.n	8009492 <_svfiprintf_r+0x1d2>
 80092ee:	2340      	movs	r3, #64	; 0x40
 80092f0:	616b      	str	r3, [r5, #20]
 80092f2:	2300      	movs	r3, #0
 80092f4:	9309      	str	r3, [sp, #36]	; 0x24
 80092f6:	2320      	movs	r3, #32
 80092f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80092fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8009300:	2330      	movs	r3, #48	; 0x30
 8009302:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80094ac <_svfiprintf_r+0x1ec>
 8009306:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800930a:	f04f 0901 	mov.w	r9, #1
 800930e:	4623      	mov	r3, r4
 8009310:	469a      	mov	sl, r3
 8009312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009316:	b10a      	cbz	r2, 800931c <_svfiprintf_r+0x5c>
 8009318:	2a25      	cmp	r2, #37	; 0x25
 800931a:	d1f9      	bne.n	8009310 <_svfiprintf_r+0x50>
 800931c:	ebba 0b04 	subs.w	fp, sl, r4
 8009320:	d00b      	beq.n	800933a <_svfiprintf_r+0x7a>
 8009322:	465b      	mov	r3, fp
 8009324:	4622      	mov	r2, r4
 8009326:	4629      	mov	r1, r5
 8009328:	4638      	mov	r0, r7
 800932a:	f7ff ff6d 	bl	8009208 <__ssputs_r>
 800932e:	3001      	adds	r0, #1
 8009330:	f000 80aa 	beq.w	8009488 <_svfiprintf_r+0x1c8>
 8009334:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009336:	445a      	add	r2, fp
 8009338:	9209      	str	r2, [sp, #36]	; 0x24
 800933a:	f89a 3000 	ldrb.w	r3, [sl]
 800933e:	2b00      	cmp	r3, #0
 8009340:	f000 80a2 	beq.w	8009488 <_svfiprintf_r+0x1c8>
 8009344:	2300      	movs	r3, #0
 8009346:	f04f 32ff 	mov.w	r2, #4294967295
 800934a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800934e:	f10a 0a01 	add.w	sl, sl, #1
 8009352:	9304      	str	r3, [sp, #16]
 8009354:	9307      	str	r3, [sp, #28]
 8009356:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800935a:	931a      	str	r3, [sp, #104]	; 0x68
 800935c:	4654      	mov	r4, sl
 800935e:	2205      	movs	r2, #5
 8009360:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009364:	4851      	ldr	r0, [pc, #324]	; (80094ac <_svfiprintf_r+0x1ec>)
 8009366:	f7f6 ff3b 	bl	80001e0 <memchr>
 800936a:	9a04      	ldr	r2, [sp, #16]
 800936c:	b9d8      	cbnz	r0, 80093a6 <_svfiprintf_r+0xe6>
 800936e:	06d0      	lsls	r0, r2, #27
 8009370:	bf44      	itt	mi
 8009372:	2320      	movmi	r3, #32
 8009374:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009378:	0711      	lsls	r1, r2, #28
 800937a:	bf44      	itt	mi
 800937c:	232b      	movmi	r3, #43	; 0x2b
 800937e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009382:	f89a 3000 	ldrb.w	r3, [sl]
 8009386:	2b2a      	cmp	r3, #42	; 0x2a
 8009388:	d015      	beq.n	80093b6 <_svfiprintf_r+0xf6>
 800938a:	9a07      	ldr	r2, [sp, #28]
 800938c:	4654      	mov	r4, sl
 800938e:	2000      	movs	r0, #0
 8009390:	f04f 0c0a 	mov.w	ip, #10
 8009394:	4621      	mov	r1, r4
 8009396:	f811 3b01 	ldrb.w	r3, [r1], #1
 800939a:	3b30      	subs	r3, #48	; 0x30
 800939c:	2b09      	cmp	r3, #9
 800939e:	d94e      	bls.n	800943e <_svfiprintf_r+0x17e>
 80093a0:	b1b0      	cbz	r0, 80093d0 <_svfiprintf_r+0x110>
 80093a2:	9207      	str	r2, [sp, #28]
 80093a4:	e014      	b.n	80093d0 <_svfiprintf_r+0x110>
 80093a6:	eba0 0308 	sub.w	r3, r0, r8
 80093aa:	fa09 f303 	lsl.w	r3, r9, r3
 80093ae:	4313      	orrs	r3, r2
 80093b0:	9304      	str	r3, [sp, #16]
 80093b2:	46a2      	mov	sl, r4
 80093b4:	e7d2      	b.n	800935c <_svfiprintf_r+0x9c>
 80093b6:	9b03      	ldr	r3, [sp, #12]
 80093b8:	1d19      	adds	r1, r3, #4
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	9103      	str	r1, [sp, #12]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	bfbb      	ittet	lt
 80093c2:	425b      	neglt	r3, r3
 80093c4:	f042 0202 	orrlt.w	r2, r2, #2
 80093c8:	9307      	strge	r3, [sp, #28]
 80093ca:	9307      	strlt	r3, [sp, #28]
 80093cc:	bfb8      	it	lt
 80093ce:	9204      	strlt	r2, [sp, #16]
 80093d0:	7823      	ldrb	r3, [r4, #0]
 80093d2:	2b2e      	cmp	r3, #46	; 0x2e
 80093d4:	d10c      	bne.n	80093f0 <_svfiprintf_r+0x130>
 80093d6:	7863      	ldrb	r3, [r4, #1]
 80093d8:	2b2a      	cmp	r3, #42	; 0x2a
 80093da:	d135      	bne.n	8009448 <_svfiprintf_r+0x188>
 80093dc:	9b03      	ldr	r3, [sp, #12]
 80093de:	1d1a      	adds	r2, r3, #4
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	9203      	str	r2, [sp, #12]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	bfb8      	it	lt
 80093e8:	f04f 33ff 	movlt.w	r3, #4294967295
 80093ec:	3402      	adds	r4, #2
 80093ee:	9305      	str	r3, [sp, #20]
 80093f0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80094bc <_svfiprintf_r+0x1fc>
 80093f4:	7821      	ldrb	r1, [r4, #0]
 80093f6:	2203      	movs	r2, #3
 80093f8:	4650      	mov	r0, sl
 80093fa:	f7f6 fef1 	bl	80001e0 <memchr>
 80093fe:	b140      	cbz	r0, 8009412 <_svfiprintf_r+0x152>
 8009400:	2340      	movs	r3, #64	; 0x40
 8009402:	eba0 000a 	sub.w	r0, r0, sl
 8009406:	fa03 f000 	lsl.w	r0, r3, r0
 800940a:	9b04      	ldr	r3, [sp, #16]
 800940c:	4303      	orrs	r3, r0
 800940e:	3401      	adds	r4, #1
 8009410:	9304      	str	r3, [sp, #16]
 8009412:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009416:	4826      	ldr	r0, [pc, #152]	; (80094b0 <_svfiprintf_r+0x1f0>)
 8009418:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800941c:	2206      	movs	r2, #6
 800941e:	f7f6 fedf 	bl	80001e0 <memchr>
 8009422:	2800      	cmp	r0, #0
 8009424:	d038      	beq.n	8009498 <_svfiprintf_r+0x1d8>
 8009426:	4b23      	ldr	r3, [pc, #140]	; (80094b4 <_svfiprintf_r+0x1f4>)
 8009428:	bb1b      	cbnz	r3, 8009472 <_svfiprintf_r+0x1b2>
 800942a:	9b03      	ldr	r3, [sp, #12]
 800942c:	3307      	adds	r3, #7
 800942e:	f023 0307 	bic.w	r3, r3, #7
 8009432:	3308      	adds	r3, #8
 8009434:	9303      	str	r3, [sp, #12]
 8009436:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009438:	4433      	add	r3, r6
 800943a:	9309      	str	r3, [sp, #36]	; 0x24
 800943c:	e767      	b.n	800930e <_svfiprintf_r+0x4e>
 800943e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009442:	460c      	mov	r4, r1
 8009444:	2001      	movs	r0, #1
 8009446:	e7a5      	b.n	8009394 <_svfiprintf_r+0xd4>
 8009448:	2300      	movs	r3, #0
 800944a:	3401      	adds	r4, #1
 800944c:	9305      	str	r3, [sp, #20]
 800944e:	4619      	mov	r1, r3
 8009450:	f04f 0c0a 	mov.w	ip, #10
 8009454:	4620      	mov	r0, r4
 8009456:	f810 2b01 	ldrb.w	r2, [r0], #1
 800945a:	3a30      	subs	r2, #48	; 0x30
 800945c:	2a09      	cmp	r2, #9
 800945e:	d903      	bls.n	8009468 <_svfiprintf_r+0x1a8>
 8009460:	2b00      	cmp	r3, #0
 8009462:	d0c5      	beq.n	80093f0 <_svfiprintf_r+0x130>
 8009464:	9105      	str	r1, [sp, #20]
 8009466:	e7c3      	b.n	80093f0 <_svfiprintf_r+0x130>
 8009468:	fb0c 2101 	mla	r1, ip, r1, r2
 800946c:	4604      	mov	r4, r0
 800946e:	2301      	movs	r3, #1
 8009470:	e7f0      	b.n	8009454 <_svfiprintf_r+0x194>
 8009472:	ab03      	add	r3, sp, #12
 8009474:	9300      	str	r3, [sp, #0]
 8009476:	462a      	mov	r2, r5
 8009478:	4b0f      	ldr	r3, [pc, #60]	; (80094b8 <_svfiprintf_r+0x1f8>)
 800947a:	a904      	add	r1, sp, #16
 800947c:	4638      	mov	r0, r7
 800947e:	f3af 8000 	nop.w
 8009482:	1c42      	adds	r2, r0, #1
 8009484:	4606      	mov	r6, r0
 8009486:	d1d6      	bne.n	8009436 <_svfiprintf_r+0x176>
 8009488:	89ab      	ldrh	r3, [r5, #12]
 800948a:	065b      	lsls	r3, r3, #25
 800948c:	f53f af2c 	bmi.w	80092e8 <_svfiprintf_r+0x28>
 8009490:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009492:	b01d      	add	sp, #116	; 0x74
 8009494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009498:	ab03      	add	r3, sp, #12
 800949a:	9300      	str	r3, [sp, #0]
 800949c:	462a      	mov	r2, r5
 800949e:	4b06      	ldr	r3, [pc, #24]	; (80094b8 <_svfiprintf_r+0x1f8>)
 80094a0:	a904      	add	r1, sp, #16
 80094a2:	4638      	mov	r0, r7
 80094a4:	f000 f87a 	bl	800959c <_printf_i>
 80094a8:	e7eb      	b.n	8009482 <_svfiprintf_r+0x1c2>
 80094aa:	bf00      	nop
 80094ac:	08009c38 	.word	0x08009c38
 80094b0:	08009c42 	.word	0x08009c42
 80094b4:	00000000 	.word	0x00000000
 80094b8:	08009209 	.word	0x08009209
 80094bc:	08009c3e 	.word	0x08009c3e

080094c0 <_printf_common>:
 80094c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094c4:	4616      	mov	r6, r2
 80094c6:	4699      	mov	r9, r3
 80094c8:	688a      	ldr	r2, [r1, #8]
 80094ca:	690b      	ldr	r3, [r1, #16]
 80094cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80094d0:	4293      	cmp	r3, r2
 80094d2:	bfb8      	it	lt
 80094d4:	4613      	movlt	r3, r2
 80094d6:	6033      	str	r3, [r6, #0]
 80094d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80094dc:	4607      	mov	r7, r0
 80094de:	460c      	mov	r4, r1
 80094e0:	b10a      	cbz	r2, 80094e6 <_printf_common+0x26>
 80094e2:	3301      	adds	r3, #1
 80094e4:	6033      	str	r3, [r6, #0]
 80094e6:	6823      	ldr	r3, [r4, #0]
 80094e8:	0699      	lsls	r1, r3, #26
 80094ea:	bf42      	ittt	mi
 80094ec:	6833      	ldrmi	r3, [r6, #0]
 80094ee:	3302      	addmi	r3, #2
 80094f0:	6033      	strmi	r3, [r6, #0]
 80094f2:	6825      	ldr	r5, [r4, #0]
 80094f4:	f015 0506 	ands.w	r5, r5, #6
 80094f8:	d106      	bne.n	8009508 <_printf_common+0x48>
 80094fa:	f104 0a19 	add.w	sl, r4, #25
 80094fe:	68e3      	ldr	r3, [r4, #12]
 8009500:	6832      	ldr	r2, [r6, #0]
 8009502:	1a9b      	subs	r3, r3, r2
 8009504:	42ab      	cmp	r3, r5
 8009506:	dc26      	bgt.n	8009556 <_printf_common+0x96>
 8009508:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800950c:	1e13      	subs	r3, r2, #0
 800950e:	6822      	ldr	r2, [r4, #0]
 8009510:	bf18      	it	ne
 8009512:	2301      	movne	r3, #1
 8009514:	0692      	lsls	r2, r2, #26
 8009516:	d42b      	bmi.n	8009570 <_printf_common+0xb0>
 8009518:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800951c:	4649      	mov	r1, r9
 800951e:	4638      	mov	r0, r7
 8009520:	47c0      	blx	r8
 8009522:	3001      	adds	r0, #1
 8009524:	d01e      	beq.n	8009564 <_printf_common+0xa4>
 8009526:	6823      	ldr	r3, [r4, #0]
 8009528:	68e5      	ldr	r5, [r4, #12]
 800952a:	6832      	ldr	r2, [r6, #0]
 800952c:	f003 0306 	and.w	r3, r3, #6
 8009530:	2b04      	cmp	r3, #4
 8009532:	bf08      	it	eq
 8009534:	1aad      	subeq	r5, r5, r2
 8009536:	68a3      	ldr	r3, [r4, #8]
 8009538:	6922      	ldr	r2, [r4, #16]
 800953a:	bf0c      	ite	eq
 800953c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009540:	2500      	movne	r5, #0
 8009542:	4293      	cmp	r3, r2
 8009544:	bfc4      	itt	gt
 8009546:	1a9b      	subgt	r3, r3, r2
 8009548:	18ed      	addgt	r5, r5, r3
 800954a:	2600      	movs	r6, #0
 800954c:	341a      	adds	r4, #26
 800954e:	42b5      	cmp	r5, r6
 8009550:	d11a      	bne.n	8009588 <_printf_common+0xc8>
 8009552:	2000      	movs	r0, #0
 8009554:	e008      	b.n	8009568 <_printf_common+0xa8>
 8009556:	2301      	movs	r3, #1
 8009558:	4652      	mov	r2, sl
 800955a:	4649      	mov	r1, r9
 800955c:	4638      	mov	r0, r7
 800955e:	47c0      	blx	r8
 8009560:	3001      	adds	r0, #1
 8009562:	d103      	bne.n	800956c <_printf_common+0xac>
 8009564:	f04f 30ff 	mov.w	r0, #4294967295
 8009568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800956c:	3501      	adds	r5, #1
 800956e:	e7c6      	b.n	80094fe <_printf_common+0x3e>
 8009570:	18e1      	adds	r1, r4, r3
 8009572:	1c5a      	adds	r2, r3, #1
 8009574:	2030      	movs	r0, #48	; 0x30
 8009576:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800957a:	4422      	add	r2, r4
 800957c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009580:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009584:	3302      	adds	r3, #2
 8009586:	e7c7      	b.n	8009518 <_printf_common+0x58>
 8009588:	2301      	movs	r3, #1
 800958a:	4622      	mov	r2, r4
 800958c:	4649      	mov	r1, r9
 800958e:	4638      	mov	r0, r7
 8009590:	47c0      	blx	r8
 8009592:	3001      	adds	r0, #1
 8009594:	d0e6      	beq.n	8009564 <_printf_common+0xa4>
 8009596:	3601      	adds	r6, #1
 8009598:	e7d9      	b.n	800954e <_printf_common+0x8e>
	...

0800959c <_printf_i>:
 800959c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80095a0:	7e0f      	ldrb	r7, [r1, #24]
 80095a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80095a4:	2f78      	cmp	r7, #120	; 0x78
 80095a6:	4691      	mov	r9, r2
 80095a8:	4680      	mov	r8, r0
 80095aa:	460c      	mov	r4, r1
 80095ac:	469a      	mov	sl, r3
 80095ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80095b2:	d807      	bhi.n	80095c4 <_printf_i+0x28>
 80095b4:	2f62      	cmp	r7, #98	; 0x62
 80095b6:	d80a      	bhi.n	80095ce <_printf_i+0x32>
 80095b8:	2f00      	cmp	r7, #0
 80095ba:	f000 80d8 	beq.w	800976e <_printf_i+0x1d2>
 80095be:	2f58      	cmp	r7, #88	; 0x58
 80095c0:	f000 80a3 	beq.w	800970a <_printf_i+0x16e>
 80095c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80095c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80095cc:	e03a      	b.n	8009644 <_printf_i+0xa8>
 80095ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80095d2:	2b15      	cmp	r3, #21
 80095d4:	d8f6      	bhi.n	80095c4 <_printf_i+0x28>
 80095d6:	a101      	add	r1, pc, #4	; (adr r1, 80095dc <_printf_i+0x40>)
 80095d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80095dc:	08009635 	.word	0x08009635
 80095e0:	08009649 	.word	0x08009649
 80095e4:	080095c5 	.word	0x080095c5
 80095e8:	080095c5 	.word	0x080095c5
 80095ec:	080095c5 	.word	0x080095c5
 80095f0:	080095c5 	.word	0x080095c5
 80095f4:	08009649 	.word	0x08009649
 80095f8:	080095c5 	.word	0x080095c5
 80095fc:	080095c5 	.word	0x080095c5
 8009600:	080095c5 	.word	0x080095c5
 8009604:	080095c5 	.word	0x080095c5
 8009608:	08009755 	.word	0x08009755
 800960c:	08009679 	.word	0x08009679
 8009610:	08009737 	.word	0x08009737
 8009614:	080095c5 	.word	0x080095c5
 8009618:	080095c5 	.word	0x080095c5
 800961c:	08009777 	.word	0x08009777
 8009620:	080095c5 	.word	0x080095c5
 8009624:	08009679 	.word	0x08009679
 8009628:	080095c5 	.word	0x080095c5
 800962c:	080095c5 	.word	0x080095c5
 8009630:	0800973f 	.word	0x0800973f
 8009634:	682b      	ldr	r3, [r5, #0]
 8009636:	1d1a      	adds	r2, r3, #4
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	602a      	str	r2, [r5, #0]
 800963c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009640:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009644:	2301      	movs	r3, #1
 8009646:	e0a3      	b.n	8009790 <_printf_i+0x1f4>
 8009648:	6820      	ldr	r0, [r4, #0]
 800964a:	6829      	ldr	r1, [r5, #0]
 800964c:	0606      	lsls	r6, r0, #24
 800964e:	f101 0304 	add.w	r3, r1, #4
 8009652:	d50a      	bpl.n	800966a <_printf_i+0xce>
 8009654:	680e      	ldr	r6, [r1, #0]
 8009656:	602b      	str	r3, [r5, #0]
 8009658:	2e00      	cmp	r6, #0
 800965a:	da03      	bge.n	8009664 <_printf_i+0xc8>
 800965c:	232d      	movs	r3, #45	; 0x2d
 800965e:	4276      	negs	r6, r6
 8009660:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009664:	485e      	ldr	r0, [pc, #376]	; (80097e0 <_printf_i+0x244>)
 8009666:	230a      	movs	r3, #10
 8009668:	e019      	b.n	800969e <_printf_i+0x102>
 800966a:	680e      	ldr	r6, [r1, #0]
 800966c:	602b      	str	r3, [r5, #0]
 800966e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009672:	bf18      	it	ne
 8009674:	b236      	sxthne	r6, r6
 8009676:	e7ef      	b.n	8009658 <_printf_i+0xbc>
 8009678:	682b      	ldr	r3, [r5, #0]
 800967a:	6820      	ldr	r0, [r4, #0]
 800967c:	1d19      	adds	r1, r3, #4
 800967e:	6029      	str	r1, [r5, #0]
 8009680:	0601      	lsls	r1, r0, #24
 8009682:	d501      	bpl.n	8009688 <_printf_i+0xec>
 8009684:	681e      	ldr	r6, [r3, #0]
 8009686:	e002      	b.n	800968e <_printf_i+0xf2>
 8009688:	0646      	lsls	r6, r0, #25
 800968a:	d5fb      	bpl.n	8009684 <_printf_i+0xe8>
 800968c:	881e      	ldrh	r6, [r3, #0]
 800968e:	4854      	ldr	r0, [pc, #336]	; (80097e0 <_printf_i+0x244>)
 8009690:	2f6f      	cmp	r7, #111	; 0x6f
 8009692:	bf0c      	ite	eq
 8009694:	2308      	moveq	r3, #8
 8009696:	230a      	movne	r3, #10
 8009698:	2100      	movs	r1, #0
 800969a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800969e:	6865      	ldr	r5, [r4, #4]
 80096a0:	60a5      	str	r5, [r4, #8]
 80096a2:	2d00      	cmp	r5, #0
 80096a4:	bfa2      	ittt	ge
 80096a6:	6821      	ldrge	r1, [r4, #0]
 80096a8:	f021 0104 	bicge.w	r1, r1, #4
 80096ac:	6021      	strge	r1, [r4, #0]
 80096ae:	b90e      	cbnz	r6, 80096b4 <_printf_i+0x118>
 80096b0:	2d00      	cmp	r5, #0
 80096b2:	d04d      	beq.n	8009750 <_printf_i+0x1b4>
 80096b4:	4615      	mov	r5, r2
 80096b6:	fbb6 f1f3 	udiv	r1, r6, r3
 80096ba:	fb03 6711 	mls	r7, r3, r1, r6
 80096be:	5dc7      	ldrb	r7, [r0, r7]
 80096c0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80096c4:	4637      	mov	r7, r6
 80096c6:	42bb      	cmp	r3, r7
 80096c8:	460e      	mov	r6, r1
 80096ca:	d9f4      	bls.n	80096b6 <_printf_i+0x11a>
 80096cc:	2b08      	cmp	r3, #8
 80096ce:	d10b      	bne.n	80096e8 <_printf_i+0x14c>
 80096d0:	6823      	ldr	r3, [r4, #0]
 80096d2:	07de      	lsls	r6, r3, #31
 80096d4:	d508      	bpl.n	80096e8 <_printf_i+0x14c>
 80096d6:	6923      	ldr	r3, [r4, #16]
 80096d8:	6861      	ldr	r1, [r4, #4]
 80096da:	4299      	cmp	r1, r3
 80096dc:	bfde      	ittt	le
 80096de:	2330      	movle	r3, #48	; 0x30
 80096e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80096e4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80096e8:	1b52      	subs	r2, r2, r5
 80096ea:	6122      	str	r2, [r4, #16]
 80096ec:	f8cd a000 	str.w	sl, [sp]
 80096f0:	464b      	mov	r3, r9
 80096f2:	aa03      	add	r2, sp, #12
 80096f4:	4621      	mov	r1, r4
 80096f6:	4640      	mov	r0, r8
 80096f8:	f7ff fee2 	bl	80094c0 <_printf_common>
 80096fc:	3001      	adds	r0, #1
 80096fe:	d14c      	bne.n	800979a <_printf_i+0x1fe>
 8009700:	f04f 30ff 	mov.w	r0, #4294967295
 8009704:	b004      	add	sp, #16
 8009706:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800970a:	4835      	ldr	r0, [pc, #212]	; (80097e0 <_printf_i+0x244>)
 800970c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009710:	6829      	ldr	r1, [r5, #0]
 8009712:	6823      	ldr	r3, [r4, #0]
 8009714:	f851 6b04 	ldr.w	r6, [r1], #4
 8009718:	6029      	str	r1, [r5, #0]
 800971a:	061d      	lsls	r5, r3, #24
 800971c:	d514      	bpl.n	8009748 <_printf_i+0x1ac>
 800971e:	07df      	lsls	r7, r3, #31
 8009720:	bf44      	itt	mi
 8009722:	f043 0320 	orrmi.w	r3, r3, #32
 8009726:	6023      	strmi	r3, [r4, #0]
 8009728:	b91e      	cbnz	r6, 8009732 <_printf_i+0x196>
 800972a:	6823      	ldr	r3, [r4, #0]
 800972c:	f023 0320 	bic.w	r3, r3, #32
 8009730:	6023      	str	r3, [r4, #0]
 8009732:	2310      	movs	r3, #16
 8009734:	e7b0      	b.n	8009698 <_printf_i+0xfc>
 8009736:	6823      	ldr	r3, [r4, #0]
 8009738:	f043 0320 	orr.w	r3, r3, #32
 800973c:	6023      	str	r3, [r4, #0]
 800973e:	2378      	movs	r3, #120	; 0x78
 8009740:	4828      	ldr	r0, [pc, #160]	; (80097e4 <_printf_i+0x248>)
 8009742:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009746:	e7e3      	b.n	8009710 <_printf_i+0x174>
 8009748:	0659      	lsls	r1, r3, #25
 800974a:	bf48      	it	mi
 800974c:	b2b6      	uxthmi	r6, r6
 800974e:	e7e6      	b.n	800971e <_printf_i+0x182>
 8009750:	4615      	mov	r5, r2
 8009752:	e7bb      	b.n	80096cc <_printf_i+0x130>
 8009754:	682b      	ldr	r3, [r5, #0]
 8009756:	6826      	ldr	r6, [r4, #0]
 8009758:	6961      	ldr	r1, [r4, #20]
 800975a:	1d18      	adds	r0, r3, #4
 800975c:	6028      	str	r0, [r5, #0]
 800975e:	0635      	lsls	r5, r6, #24
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	d501      	bpl.n	8009768 <_printf_i+0x1cc>
 8009764:	6019      	str	r1, [r3, #0]
 8009766:	e002      	b.n	800976e <_printf_i+0x1d2>
 8009768:	0670      	lsls	r0, r6, #25
 800976a:	d5fb      	bpl.n	8009764 <_printf_i+0x1c8>
 800976c:	8019      	strh	r1, [r3, #0]
 800976e:	2300      	movs	r3, #0
 8009770:	6123      	str	r3, [r4, #16]
 8009772:	4615      	mov	r5, r2
 8009774:	e7ba      	b.n	80096ec <_printf_i+0x150>
 8009776:	682b      	ldr	r3, [r5, #0]
 8009778:	1d1a      	adds	r2, r3, #4
 800977a:	602a      	str	r2, [r5, #0]
 800977c:	681d      	ldr	r5, [r3, #0]
 800977e:	6862      	ldr	r2, [r4, #4]
 8009780:	2100      	movs	r1, #0
 8009782:	4628      	mov	r0, r5
 8009784:	f7f6 fd2c 	bl	80001e0 <memchr>
 8009788:	b108      	cbz	r0, 800978e <_printf_i+0x1f2>
 800978a:	1b40      	subs	r0, r0, r5
 800978c:	6060      	str	r0, [r4, #4]
 800978e:	6863      	ldr	r3, [r4, #4]
 8009790:	6123      	str	r3, [r4, #16]
 8009792:	2300      	movs	r3, #0
 8009794:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009798:	e7a8      	b.n	80096ec <_printf_i+0x150>
 800979a:	6923      	ldr	r3, [r4, #16]
 800979c:	462a      	mov	r2, r5
 800979e:	4649      	mov	r1, r9
 80097a0:	4640      	mov	r0, r8
 80097a2:	47d0      	blx	sl
 80097a4:	3001      	adds	r0, #1
 80097a6:	d0ab      	beq.n	8009700 <_printf_i+0x164>
 80097a8:	6823      	ldr	r3, [r4, #0]
 80097aa:	079b      	lsls	r3, r3, #30
 80097ac:	d413      	bmi.n	80097d6 <_printf_i+0x23a>
 80097ae:	68e0      	ldr	r0, [r4, #12]
 80097b0:	9b03      	ldr	r3, [sp, #12]
 80097b2:	4298      	cmp	r0, r3
 80097b4:	bfb8      	it	lt
 80097b6:	4618      	movlt	r0, r3
 80097b8:	e7a4      	b.n	8009704 <_printf_i+0x168>
 80097ba:	2301      	movs	r3, #1
 80097bc:	4632      	mov	r2, r6
 80097be:	4649      	mov	r1, r9
 80097c0:	4640      	mov	r0, r8
 80097c2:	47d0      	blx	sl
 80097c4:	3001      	adds	r0, #1
 80097c6:	d09b      	beq.n	8009700 <_printf_i+0x164>
 80097c8:	3501      	adds	r5, #1
 80097ca:	68e3      	ldr	r3, [r4, #12]
 80097cc:	9903      	ldr	r1, [sp, #12]
 80097ce:	1a5b      	subs	r3, r3, r1
 80097d0:	42ab      	cmp	r3, r5
 80097d2:	dcf2      	bgt.n	80097ba <_printf_i+0x21e>
 80097d4:	e7eb      	b.n	80097ae <_printf_i+0x212>
 80097d6:	2500      	movs	r5, #0
 80097d8:	f104 0619 	add.w	r6, r4, #25
 80097dc:	e7f5      	b.n	80097ca <_printf_i+0x22e>
 80097de:	bf00      	nop
 80097e0:	08009c49 	.word	0x08009c49
 80097e4:	08009c5a 	.word	0x08009c5a

080097e8 <memcpy>:
 80097e8:	440a      	add	r2, r1
 80097ea:	4291      	cmp	r1, r2
 80097ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80097f0:	d100      	bne.n	80097f4 <memcpy+0xc>
 80097f2:	4770      	bx	lr
 80097f4:	b510      	push	{r4, lr}
 80097f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80097fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80097fe:	4291      	cmp	r1, r2
 8009800:	d1f9      	bne.n	80097f6 <memcpy+0xe>
 8009802:	bd10      	pop	{r4, pc}

08009804 <memmove>:
 8009804:	4288      	cmp	r0, r1
 8009806:	b510      	push	{r4, lr}
 8009808:	eb01 0402 	add.w	r4, r1, r2
 800980c:	d902      	bls.n	8009814 <memmove+0x10>
 800980e:	4284      	cmp	r4, r0
 8009810:	4623      	mov	r3, r4
 8009812:	d807      	bhi.n	8009824 <memmove+0x20>
 8009814:	1e43      	subs	r3, r0, #1
 8009816:	42a1      	cmp	r1, r4
 8009818:	d008      	beq.n	800982c <memmove+0x28>
 800981a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800981e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009822:	e7f8      	b.n	8009816 <memmove+0x12>
 8009824:	4402      	add	r2, r0
 8009826:	4601      	mov	r1, r0
 8009828:	428a      	cmp	r2, r1
 800982a:	d100      	bne.n	800982e <memmove+0x2a>
 800982c:	bd10      	pop	{r4, pc}
 800982e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009832:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009836:	e7f7      	b.n	8009828 <memmove+0x24>

08009838 <_free_r>:
 8009838:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800983a:	2900      	cmp	r1, #0
 800983c:	d044      	beq.n	80098c8 <_free_r+0x90>
 800983e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009842:	9001      	str	r0, [sp, #4]
 8009844:	2b00      	cmp	r3, #0
 8009846:	f1a1 0404 	sub.w	r4, r1, #4
 800984a:	bfb8      	it	lt
 800984c:	18e4      	addlt	r4, r4, r3
 800984e:	f000 f913 	bl	8009a78 <__malloc_lock>
 8009852:	4a1e      	ldr	r2, [pc, #120]	; (80098cc <_free_r+0x94>)
 8009854:	9801      	ldr	r0, [sp, #4]
 8009856:	6813      	ldr	r3, [r2, #0]
 8009858:	b933      	cbnz	r3, 8009868 <_free_r+0x30>
 800985a:	6063      	str	r3, [r4, #4]
 800985c:	6014      	str	r4, [r2, #0]
 800985e:	b003      	add	sp, #12
 8009860:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009864:	f000 b90e 	b.w	8009a84 <__malloc_unlock>
 8009868:	42a3      	cmp	r3, r4
 800986a:	d908      	bls.n	800987e <_free_r+0x46>
 800986c:	6825      	ldr	r5, [r4, #0]
 800986e:	1961      	adds	r1, r4, r5
 8009870:	428b      	cmp	r3, r1
 8009872:	bf01      	itttt	eq
 8009874:	6819      	ldreq	r1, [r3, #0]
 8009876:	685b      	ldreq	r3, [r3, #4]
 8009878:	1949      	addeq	r1, r1, r5
 800987a:	6021      	streq	r1, [r4, #0]
 800987c:	e7ed      	b.n	800985a <_free_r+0x22>
 800987e:	461a      	mov	r2, r3
 8009880:	685b      	ldr	r3, [r3, #4]
 8009882:	b10b      	cbz	r3, 8009888 <_free_r+0x50>
 8009884:	42a3      	cmp	r3, r4
 8009886:	d9fa      	bls.n	800987e <_free_r+0x46>
 8009888:	6811      	ldr	r1, [r2, #0]
 800988a:	1855      	adds	r5, r2, r1
 800988c:	42a5      	cmp	r5, r4
 800988e:	d10b      	bne.n	80098a8 <_free_r+0x70>
 8009890:	6824      	ldr	r4, [r4, #0]
 8009892:	4421      	add	r1, r4
 8009894:	1854      	adds	r4, r2, r1
 8009896:	42a3      	cmp	r3, r4
 8009898:	6011      	str	r1, [r2, #0]
 800989a:	d1e0      	bne.n	800985e <_free_r+0x26>
 800989c:	681c      	ldr	r4, [r3, #0]
 800989e:	685b      	ldr	r3, [r3, #4]
 80098a0:	6053      	str	r3, [r2, #4]
 80098a2:	4421      	add	r1, r4
 80098a4:	6011      	str	r1, [r2, #0]
 80098a6:	e7da      	b.n	800985e <_free_r+0x26>
 80098a8:	d902      	bls.n	80098b0 <_free_r+0x78>
 80098aa:	230c      	movs	r3, #12
 80098ac:	6003      	str	r3, [r0, #0]
 80098ae:	e7d6      	b.n	800985e <_free_r+0x26>
 80098b0:	6825      	ldr	r5, [r4, #0]
 80098b2:	1961      	adds	r1, r4, r5
 80098b4:	428b      	cmp	r3, r1
 80098b6:	bf04      	itt	eq
 80098b8:	6819      	ldreq	r1, [r3, #0]
 80098ba:	685b      	ldreq	r3, [r3, #4]
 80098bc:	6063      	str	r3, [r4, #4]
 80098be:	bf04      	itt	eq
 80098c0:	1949      	addeq	r1, r1, r5
 80098c2:	6021      	streq	r1, [r4, #0]
 80098c4:	6054      	str	r4, [r2, #4]
 80098c6:	e7ca      	b.n	800985e <_free_r+0x26>
 80098c8:	b003      	add	sp, #12
 80098ca:	bd30      	pop	{r4, r5, pc}
 80098cc:	20001fc4 	.word	0x20001fc4

080098d0 <sbrk_aligned>:
 80098d0:	b570      	push	{r4, r5, r6, lr}
 80098d2:	4e0e      	ldr	r6, [pc, #56]	; (800990c <sbrk_aligned+0x3c>)
 80098d4:	460c      	mov	r4, r1
 80098d6:	6831      	ldr	r1, [r6, #0]
 80098d8:	4605      	mov	r5, r0
 80098da:	b911      	cbnz	r1, 80098e2 <sbrk_aligned+0x12>
 80098dc:	f000 f8bc 	bl	8009a58 <_sbrk_r>
 80098e0:	6030      	str	r0, [r6, #0]
 80098e2:	4621      	mov	r1, r4
 80098e4:	4628      	mov	r0, r5
 80098e6:	f000 f8b7 	bl	8009a58 <_sbrk_r>
 80098ea:	1c43      	adds	r3, r0, #1
 80098ec:	d00a      	beq.n	8009904 <sbrk_aligned+0x34>
 80098ee:	1cc4      	adds	r4, r0, #3
 80098f0:	f024 0403 	bic.w	r4, r4, #3
 80098f4:	42a0      	cmp	r0, r4
 80098f6:	d007      	beq.n	8009908 <sbrk_aligned+0x38>
 80098f8:	1a21      	subs	r1, r4, r0
 80098fa:	4628      	mov	r0, r5
 80098fc:	f000 f8ac 	bl	8009a58 <_sbrk_r>
 8009900:	3001      	adds	r0, #1
 8009902:	d101      	bne.n	8009908 <sbrk_aligned+0x38>
 8009904:	f04f 34ff 	mov.w	r4, #4294967295
 8009908:	4620      	mov	r0, r4
 800990a:	bd70      	pop	{r4, r5, r6, pc}
 800990c:	20001fc8 	.word	0x20001fc8

08009910 <_malloc_r>:
 8009910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009914:	1ccd      	adds	r5, r1, #3
 8009916:	f025 0503 	bic.w	r5, r5, #3
 800991a:	3508      	adds	r5, #8
 800991c:	2d0c      	cmp	r5, #12
 800991e:	bf38      	it	cc
 8009920:	250c      	movcc	r5, #12
 8009922:	2d00      	cmp	r5, #0
 8009924:	4607      	mov	r7, r0
 8009926:	db01      	blt.n	800992c <_malloc_r+0x1c>
 8009928:	42a9      	cmp	r1, r5
 800992a:	d905      	bls.n	8009938 <_malloc_r+0x28>
 800992c:	230c      	movs	r3, #12
 800992e:	603b      	str	r3, [r7, #0]
 8009930:	2600      	movs	r6, #0
 8009932:	4630      	mov	r0, r6
 8009934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009938:	4e2e      	ldr	r6, [pc, #184]	; (80099f4 <_malloc_r+0xe4>)
 800993a:	f000 f89d 	bl	8009a78 <__malloc_lock>
 800993e:	6833      	ldr	r3, [r6, #0]
 8009940:	461c      	mov	r4, r3
 8009942:	bb34      	cbnz	r4, 8009992 <_malloc_r+0x82>
 8009944:	4629      	mov	r1, r5
 8009946:	4638      	mov	r0, r7
 8009948:	f7ff ffc2 	bl	80098d0 <sbrk_aligned>
 800994c:	1c43      	adds	r3, r0, #1
 800994e:	4604      	mov	r4, r0
 8009950:	d14d      	bne.n	80099ee <_malloc_r+0xde>
 8009952:	6834      	ldr	r4, [r6, #0]
 8009954:	4626      	mov	r6, r4
 8009956:	2e00      	cmp	r6, #0
 8009958:	d140      	bne.n	80099dc <_malloc_r+0xcc>
 800995a:	6823      	ldr	r3, [r4, #0]
 800995c:	4631      	mov	r1, r6
 800995e:	4638      	mov	r0, r7
 8009960:	eb04 0803 	add.w	r8, r4, r3
 8009964:	f000 f878 	bl	8009a58 <_sbrk_r>
 8009968:	4580      	cmp	r8, r0
 800996a:	d13a      	bne.n	80099e2 <_malloc_r+0xd2>
 800996c:	6821      	ldr	r1, [r4, #0]
 800996e:	3503      	adds	r5, #3
 8009970:	1a6d      	subs	r5, r5, r1
 8009972:	f025 0503 	bic.w	r5, r5, #3
 8009976:	3508      	adds	r5, #8
 8009978:	2d0c      	cmp	r5, #12
 800997a:	bf38      	it	cc
 800997c:	250c      	movcc	r5, #12
 800997e:	4629      	mov	r1, r5
 8009980:	4638      	mov	r0, r7
 8009982:	f7ff ffa5 	bl	80098d0 <sbrk_aligned>
 8009986:	3001      	adds	r0, #1
 8009988:	d02b      	beq.n	80099e2 <_malloc_r+0xd2>
 800998a:	6823      	ldr	r3, [r4, #0]
 800998c:	442b      	add	r3, r5
 800998e:	6023      	str	r3, [r4, #0]
 8009990:	e00e      	b.n	80099b0 <_malloc_r+0xa0>
 8009992:	6822      	ldr	r2, [r4, #0]
 8009994:	1b52      	subs	r2, r2, r5
 8009996:	d41e      	bmi.n	80099d6 <_malloc_r+0xc6>
 8009998:	2a0b      	cmp	r2, #11
 800999a:	d916      	bls.n	80099ca <_malloc_r+0xba>
 800999c:	1961      	adds	r1, r4, r5
 800999e:	42a3      	cmp	r3, r4
 80099a0:	6025      	str	r5, [r4, #0]
 80099a2:	bf18      	it	ne
 80099a4:	6059      	strne	r1, [r3, #4]
 80099a6:	6863      	ldr	r3, [r4, #4]
 80099a8:	bf08      	it	eq
 80099aa:	6031      	streq	r1, [r6, #0]
 80099ac:	5162      	str	r2, [r4, r5]
 80099ae:	604b      	str	r3, [r1, #4]
 80099b0:	4638      	mov	r0, r7
 80099b2:	f104 060b 	add.w	r6, r4, #11
 80099b6:	f000 f865 	bl	8009a84 <__malloc_unlock>
 80099ba:	f026 0607 	bic.w	r6, r6, #7
 80099be:	1d23      	adds	r3, r4, #4
 80099c0:	1af2      	subs	r2, r6, r3
 80099c2:	d0b6      	beq.n	8009932 <_malloc_r+0x22>
 80099c4:	1b9b      	subs	r3, r3, r6
 80099c6:	50a3      	str	r3, [r4, r2]
 80099c8:	e7b3      	b.n	8009932 <_malloc_r+0x22>
 80099ca:	6862      	ldr	r2, [r4, #4]
 80099cc:	42a3      	cmp	r3, r4
 80099ce:	bf0c      	ite	eq
 80099d0:	6032      	streq	r2, [r6, #0]
 80099d2:	605a      	strne	r2, [r3, #4]
 80099d4:	e7ec      	b.n	80099b0 <_malloc_r+0xa0>
 80099d6:	4623      	mov	r3, r4
 80099d8:	6864      	ldr	r4, [r4, #4]
 80099da:	e7b2      	b.n	8009942 <_malloc_r+0x32>
 80099dc:	4634      	mov	r4, r6
 80099de:	6876      	ldr	r6, [r6, #4]
 80099e0:	e7b9      	b.n	8009956 <_malloc_r+0x46>
 80099e2:	230c      	movs	r3, #12
 80099e4:	603b      	str	r3, [r7, #0]
 80099e6:	4638      	mov	r0, r7
 80099e8:	f000 f84c 	bl	8009a84 <__malloc_unlock>
 80099ec:	e7a1      	b.n	8009932 <_malloc_r+0x22>
 80099ee:	6025      	str	r5, [r4, #0]
 80099f0:	e7de      	b.n	80099b0 <_malloc_r+0xa0>
 80099f2:	bf00      	nop
 80099f4:	20001fc4 	.word	0x20001fc4

080099f8 <_realloc_r>:
 80099f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099fc:	4680      	mov	r8, r0
 80099fe:	4614      	mov	r4, r2
 8009a00:	460e      	mov	r6, r1
 8009a02:	b921      	cbnz	r1, 8009a0e <_realloc_r+0x16>
 8009a04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a08:	4611      	mov	r1, r2
 8009a0a:	f7ff bf81 	b.w	8009910 <_malloc_r>
 8009a0e:	b92a      	cbnz	r2, 8009a1c <_realloc_r+0x24>
 8009a10:	f7ff ff12 	bl	8009838 <_free_r>
 8009a14:	4625      	mov	r5, r4
 8009a16:	4628      	mov	r0, r5
 8009a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a1c:	f000 f838 	bl	8009a90 <_malloc_usable_size_r>
 8009a20:	4284      	cmp	r4, r0
 8009a22:	4607      	mov	r7, r0
 8009a24:	d802      	bhi.n	8009a2c <_realloc_r+0x34>
 8009a26:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009a2a:	d812      	bhi.n	8009a52 <_realloc_r+0x5a>
 8009a2c:	4621      	mov	r1, r4
 8009a2e:	4640      	mov	r0, r8
 8009a30:	f7ff ff6e 	bl	8009910 <_malloc_r>
 8009a34:	4605      	mov	r5, r0
 8009a36:	2800      	cmp	r0, #0
 8009a38:	d0ed      	beq.n	8009a16 <_realloc_r+0x1e>
 8009a3a:	42bc      	cmp	r4, r7
 8009a3c:	4622      	mov	r2, r4
 8009a3e:	4631      	mov	r1, r6
 8009a40:	bf28      	it	cs
 8009a42:	463a      	movcs	r2, r7
 8009a44:	f7ff fed0 	bl	80097e8 <memcpy>
 8009a48:	4631      	mov	r1, r6
 8009a4a:	4640      	mov	r0, r8
 8009a4c:	f7ff fef4 	bl	8009838 <_free_r>
 8009a50:	e7e1      	b.n	8009a16 <_realloc_r+0x1e>
 8009a52:	4635      	mov	r5, r6
 8009a54:	e7df      	b.n	8009a16 <_realloc_r+0x1e>
	...

08009a58 <_sbrk_r>:
 8009a58:	b538      	push	{r3, r4, r5, lr}
 8009a5a:	4d06      	ldr	r5, [pc, #24]	; (8009a74 <_sbrk_r+0x1c>)
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	4604      	mov	r4, r0
 8009a60:	4608      	mov	r0, r1
 8009a62:	602b      	str	r3, [r5, #0]
 8009a64:	f7f7 f9f0 	bl	8000e48 <_sbrk>
 8009a68:	1c43      	adds	r3, r0, #1
 8009a6a:	d102      	bne.n	8009a72 <_sbrk_r+0x1a>
 8009a6c:	682b      	ldr	r3, [r5, #0]
 8009a6e:	b103      	cbz	r3, 8009a72 <_sbrk_r+0x1a>
 8009a70:	6023      	str	r3, [r4, #0]
 8009a72:	bd38      	pop	{r3, r4, r5, pc}
 8009a74:	20001fcc 	.word	0x20001fcc

08009a78 <__malloc_lock>:
 8009a78:	4801      	ldr	r0, [pc, #4]	; (8009a80 <__malloc_lock+0x8>)
 8009a7a:	f000 b811 	b.w	8009aa0 <__retarget_lock_acquire_recursive>
 8009a7e:	bf00      	nop
 8009a80:	20001fd0 	.word	0x20001fd0

08009a84 <__malloc_unlock>:
 8009a84:	4801      	ldr	r0, [pc, #4]	; (8009a8c <__malloc_unlock+0x8>)
 8009a86:	f000 b80c 	b.w	8009aa2 <__retarget_lock_release_recursive>
 8009a8a:	bf00      	nop
 8009a8c:	20001fd0 	.word	0x20001fd0

08009a90 <_malloc_usable_size_r>:
 8009a90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a94:	1f18      	subs	r0, r3, #4
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	bfbc      	itt	lt
 8009a9a:	580b      	ldrlt	r3, [r1, r0]
 8009a9c:	18c0      	addlt	r0, r0, r3
 8009a9e:	4770      	bx	lr

08009aa0 <__retarget_lock_acquire_recursive>:
 8009aa0:	4770      	bx	lr

08009aa2 <__retarget_lock_release_recursive>:
 8009aa2:	4770      	bx	lr

08009aa4 <_init>:
 8009aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aa6:	bf00      	nop
 8009aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009aaa:	bc08      	pop	{r3}
 8009aac:	469e      	mov	lr, r3
 8009aae:	4770      	bx	lr

08009ab0 <_fini>:
 8009ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ab2:	bf00      	nop
 8009ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ab6:	bc08      	pop	{r3}
 8009ab8:	469e      	mov	lr, r3
 8009aba:	4770      	bx	lr
